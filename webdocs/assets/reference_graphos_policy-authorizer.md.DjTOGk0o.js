import{_ as i,c as t,o as a,ae as s}from"./chunks/framework.h4D8wia2.js";const d=JSON.parse('{"title":"PolicyAuthorizer","description":"","frontmatter":{},"headers":[],"relativePath":"reference/graphos/policy-authorizer.md","filePath":"reference/graphos/policy-authorizer.md"}'),o={name:"reference/graphos/policy-authorizer.md"};function n(r,e,l,h,c,p){return a(),t("div",null,e[0]||(e[0]=[s(`<h1 id="policyauthorizer" tabindex="-1">PolicyAuthorizer <a class="header-anchor" href="#policyauthorizer" aria-label="Permalink to &quot;PolicyAuthorizer&quot;">​</a></h1><p>The <code>PolicyAuthorizer</code> interface is a critical component in the Structures policy system, responsible for authorizing a list of policy requests. It provides the mechanism to evaluate whether specific policies are allowed or denied based on the provided <code>SecurityContext</code>.</p><h2 id="interface-overview" tabindex="-1">Interface Overview <a class="header-anchor" href="#interface-overview" aria-label="Permalink to &quot;Interface Overview&quot;">​</a></h2><p>The <code>PolicyAuthorizer</code> defines a single method:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PolicyAuthorizer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * Authorizes a list of {@link PolicyAuthorizationRequest}s based on the provided security context.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> requests</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        A list of {@link PolicyAuthorizationRequest}s to evaluate.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> securityContext</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> The security context containing authentication and authorization details.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> A {@link CompletableFuture} that completes successfully if all policies are authorized,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *         or completes exceptionally if any policy is denied.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CompletableFuture&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authorize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PolicyAuthorizationRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">requests</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SecurityContext </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">securityContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><ul><li><strong><code>requests</code></strong>: A list of <code>PolicyAuthorizationRequest</code> objects, each representing a specific policy to be authorized.</li><li><strong><code>securityContext</code></strong>: Contains information about the user or system making the request, such as roles, permissions, or authentication details.</li></ul><h2 id="return-value" tabindex="-1">Return Value <a class="header-anchor" href="#return-value" aria-label="Permalink to &quot;Return Value&quot;">​</a></h2><ul><li><strong>Returns a <code>CompletableFuture&lt;Void&gt;</code></strong>: <ul><li><strong>Successful Completion</strong>: All policies are authorized.</li><li><strong>Exceptional Completion</strong>: One or more policies are denied, resulting in an <code>AuthorizationException</code>.</li></ul></li></ul><h2 id="usage-in-structures" tabindex="-1">Usage in Structures <a class="header-anchor" href="#usage-in-structures" aria-label="Permalink to &quot;Usage in Structures&quot;">​</a></h2><p>The <code>PolicyAuthorizationService</code> relies on the <code>PolicyAuthorizer</code> to:</p><ol><li>Verify the authorization for each policy using the <code>authorize</code> method.</li><li>Enforce the results of the policy evaluation during runtime.</li></ol><h2 id="related-classes" tabindex="-1">Related Classes <a class="header-anchor" href="#related-classes" aria-label="Permalink to &quot;Related Classes&quot;">​</a></h2><h3 id="policyauthorizationrequest" tabindex="-1">PolicyAuthorizationRequest <a class="header-anchor" href="#policyauthorizationrequest" aria-label="Permalink to &quot;PolicyAuthorizationRequest&quot;">​</a></h3><p>The <code>PolicyAuthorizationRequest</code> represents individual policy requests passed to the <code>authorize</code> method. Each request includes:</p><ul><li>The policy name.</li><li>Methods to mark the policy as authorized or denied.</li></ul><p>For more details, see <a href="./policy-authorization-request.html">PolicyAuthorizationRequest</a>.</p><h3 id="securitycontext" tabindex="-1">SecurityContext <a class="header-anchor" href="#securitycontext" aria-label="Permalink to &quot;SecurityContext&quot;">​</a></h3><p>The <code>SecurityContext</code> encapsulates the user’s authentication and authorization information. It provides the context needed to evaluate the policies.</p><p>For more details, see <a href="./security-context.html">SecurityContext</a>.</p><h2 id="example-implementations" tabindex="-1">Example Implementations <a class="header-anchor" href="#example-implementations" aria-label="Permalink to &quot;Example Implementations&quot;">​</a></h2><p>The <code>PolicyAuthorizer</code> can be implemented in various ways, depending on the requirements:</p><ul><li><strong>Mock Authorizer</strong>: For testing, a simple implementation can mock authorization behavior.</li><li><strong>Role-Based Authorizer</strong>: Uses roles and permissions to determine authorization.</li><li><strong>External Service Integration</strong>: Calls an external system to evaluate policies dynamically.</li></ul><h2 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h2><ul><li><strong>Flexible Design</strong>: Customizable to fit different authorization strategies.</li><li><strong>Asynchronous Processing</strong>: Leverages <code>CompletableFuture</code> for non-blocking authorization logic.</li><li><strong>Integration Ready</strong>: Works seamlessly with Structures’ policy system and external services.</li></ul><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li>Understand how <a href="./policy-authorization-service.html">PolicyAuthorizationService</a> uses <code>PolicyAuthorizer</code> for runtime policy enforcement.</li><li>Explore the <a href="./policy-authorization-request.html">PolicyAuthorizationRequest</a> and its role in defining individual policy evaluations.</li><li>Learn about <a href="./../../guide/graphos/policy-decorators.html">Policy Decorators</a> and how they define policies in Structures models.</li></ul>`,27)]))}const k=i(o,[["render",n]]);export{d as __pageData,k as default};
