import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.h4D8wia2.js";const k=JSON.parse('{"title":"Structures Config","description":"","frontmatter":{},"headers":[],"relativePath":"reference/structures-config.md","filePath":"reference/structures-config.md"}'),n={name:"reference/structures-config.md"};function l(o,s,r,h,p,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="structures-config" tabindex="-1">Structures Config <a class="header-anchor" href="#structures-config" aria-label="Permalink to &quot;Structures Config&quot;">​</a></h1><p>Structures is designed to be embedded in any Spring Boot project. You can configure it using any standard Spring configuration mechanism, such as <code>application.yml</code>, <code>application.properties</code>, or environment variables. The reference implementation is in the <code>@structures-server</code> module, but you can use these options in your own Spring Boot applications by adding the <code>@EnableStructures</code> annotation to your main class.</p><h2 id="enabling-structures-in-your-project" tabindex="-1">Enabling Structures in Your Project <a class="header-anchor" href="#enabling-structures-in-your-project" aria-label="Permalink to &quot;Enabling Structures in Your Project&quot;">​</a></h2><p>Add the following annotation to your Spring Boot application:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.kinotic.structures.api.annotations.EnableStructures;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EnableStructures</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        SpringApplication.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyApplication.class, args);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configuration-options" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options" aria-label="Permalink to &quot;Configuration Options&quot;">​</a></h2><p>All configuration options are prefixed with <code>structures.</code>. Here are the available options, their types, and default values:</p><h3 id="indexing-and-tenant" tabindex="-1">Indexing and Tenant <a class="header-anchor" href="#indexing-and-tenant" aria-label="Permalink to &quot;Indexing and Tenant&quot;">​</a></h3><ul><li><strong>indexPrefix</strong> (<code>String</code>, default: <code>struct_</code>): Prefix for all Elasticsearch indices. Must be a valid namespace (letters, numbers, <code>.</code>, <code>_</code>, <code>-</code>, max 16 chars).</li><li><strong>tenantIdFieldName</strong> (<code>String</code>, default: <code>tenantId</code>): Field name used for tenant identification.</li></ul><h3 id="elasticsearch-connection" tabindex="-1">Elasticsearch Connection <a class="header-anchor" href="#elasticsearch-connection" aria-label="Permalink to &quot;Elasticsearch Connection&quot;">​</a></h3><ul><li><strong>elasticConnections</strong> (<code>List&lt;ElasticConnectionInfo&gt;</code>, default: one entry with <code>host: localhost</code>, <code>port: 9200</code>, <code>scheme: http</code>): List of Elasticsearch connection info. Each entry has: <ul><li><code>host</code> (<code>String</code>, default: <code>localhost</code>)</li><li><code>port</code> (<code>int</code>, default: <code>9200</code>)</li><li><code>scheme</code> (<code>String</code>, default: <code>http</code>)</li></ul></li><li><strong>elasticUsername</strong> (<code>String</code>, default: <code>null</code>): Username for Elasticsearch (optional).</li><li><strong>elasticPassword</strong> (<code>String</code>, default: <code>null</code>): Password for Elasticsearch (optional).</li><li><strong>elasticConnectionTimeout</strong> (<code>Duration</code>, default: <code>5s</code>): Connection timeout for Elasticsearch.</li><li><strong>elasticSocketTimeout</strong> (<code>Duration</code>, default: <code>1m</code>): Socket timeout for Elasticsearch.</li><li><strong>elasticHealthCheckInterval</strong> (<code>Duration</code>, default: <code>1m</code>): Interval for health checks on the Elasticsearch cluster.</li></ul><h4 id="example" tabindex="-1">Example: <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example:&quot;">​</a></h4><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">structures</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  elasticConnections</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9200</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      scheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  elasticUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  elasticPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pass&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  elasticConnectionTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">5s</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  elasticSocketTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1m</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  elasticHealthCheckInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1m</span></span></code></pre></div><h3 id="cors-cross-origin-resource-sharing" tabindex="-1">CORS (Cross-Origin Resource Sharing) <a class="header-anchor" href="#cors-cross-origin-resource-sharing" aria-label="Permalink to &quot;CORS (Cross-Origin Resource Sharing)&quot;">​</a></h3><ul><li><strong>corsAllowedOriginPattern</strong> (<code>String</code>, default: <code>http://localhost.*</code>): Java regex pattern for allowed origins. Use <code>*</code> to allow all.</li><li><strong>corsAllowedHeaders</strong> (<code>Set&lt;String&gt;</code>, default: <code>[Accept, Authorization, Content-Type]</code>): Allowed headers for CORS.</li><li><strong>corsAllowCredentials</strong> (<code>Boolean</code>, default: <code>null</code>): If set, controls the <code>Access-Control-Allow-Credentials</code> header. If <code>true</code>, origins must not contain <code>*</code>.</li></ul><h4 id="example-1" tabindex="-1">Example: <a class="header-anchor" href="#example-1" aria-label="Permalink to &quot;Example:&quot;">​</a></h4><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">structures</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  corsAllowedOriginPattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://studio.apollographql.com|http://localhost:\\d+&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  corsAllowedHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  corsAllowCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h3 id="http-limits" tabindex="-1">HTTP Limits <a class="header-anchor" href="#http-limits" aria-label="Permalink to &quot;HTTP Limits&quot;">​</a></h3><ul><li><strong>maxHttpHeaderSize</strong> (<code>int</code>, default: <code>8192</code>): Max length of all HTTP headers in bytes.</li><li><strong>maxHttpBodySize</strong> (<code>long</code>, default: <code>-1</code>): Max length of HTTP body in bytes. <code>-1</code> means no limit.</li></ul><h3 id="openapi-and-graphql" tabindex="-1">OpenAPI and GraphQL <a class="header-anchor" href="#openapi-and-graphql" aria-label="Permalink to &quot;OpenAPI and GraphQL&quot;">​</a></h3><ul><li><strong>openApiSecurityType</strong> (<code>String</code>, default: <code>NONE</code>): Security type for OpenAPI. Possible values: <ul><li><code>NONE</code>: No security</li><li><code>BASIC</code>: Basic authentication</li><li><code>BEARER</code>: Bearer token authentication</li></ul></li><li><strong>openApiPort</strong> (<code>int</code>, default: <code>8080</code>): Port for OpenAPI server.</li><li><strong>openApiPath</strong> (<code>String</code>, default: <code>/api/</code>): Path for OpenAPI endpoints.</li><li><strong>openApiAdminPath</strong> (<code>String</code>, default: <code>/admin/api/</code>): Path for OpenAPI admin endpoints.</li><li><strong>openApiServerUrl</strong> (<code>String</code>, default: <code>http://localhost:8080</code>): Server URL for OpenAPI.</li><li><strong>graphqlPort</strong> (<code>int</code>, default: <code>4000</code>): Port for GraphQL server.</li><li><strong>graphqlPath</strong> (<code>String</code>, default: <code>/graphql/</code>): Path for GraphQL endpoint.</li></ul><h4 id="example-2" tabindex="-1">Example: <a class="header-anchor" href="#example-2" aria-label="Permalink to &quot;Example:&quot;">​</a></h4><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">structures</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  openApiSecurityType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">BASIC</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  openApiPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  openApiPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  openApiAdminPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/admin/api/&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  openApiServerUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8080&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  graphqlPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4000</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  graphqlPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/graphql/&quot;</span></span></code></pre></div><h3 id="web-server-and-health-check" tabindex="-1">Web Server and Health Check <a class="header-anchor" href="#web-server-and-health-check" aria-label="Permalink to &quot;Web Server and Health Check&quot;">​</a></h3><ul><li><strong>webServerPort</strong> (<code>int</code>, default: <code>9090</code>): Port for static files and health check endpoint.</li><li><strong>healthCheckPath</strong> (<code>String</code>, default: <code>/health/</code>): Path for health check endpoint.</li><li><strong>enableStaticFileServer</strong> (<code>boolean</code>, default: <code>false</code>): If <code>true</code>, static files are served from <code>resources/webroot</code>.</li></ul><h3 id="sample-data" tabindex="-1">Sample Data <a class="header-anchor" href="#sample-data" aria-label="Permalink to &quot;Sample Data&quot;">​</a></h3><ul><li><strong>initializeWithSampleData</strong> (<code>boolean</code>, default: <code>false</code>): If <code>true</code>, initializes Structures with sample data.</li></ul><h2 id="example-minimal-configuration" tabindex="-1">Example Minimal Configuration <a class="header-anchor" href="#example-minimal-configuration" aria-label="Permalink to &quot;Example Minimal Configuration&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">structures</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  openApiSecurityType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">BASIC</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  enableStaticFileServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h2 id="example-development-configuration" tabindex="-1">Example Development Configuration <a class="header-anchor" href="#example-development-configuration" aria-label="Permalink to &quot;Example Development Configuration&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">structures</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  initializeWithSampleData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  corsAllowedOriginPattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://studio.apollographql.com|http://localhost:\\d+&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  corsAllowedHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  corsAllowCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h2><ul><li>All durations can be specified using the standard Spring Boot duration format (e.g., <code>5s</code>, <code>1m</code>).</li><li>You can use any Spring Boot mechanism to supply these properties: YAML, properties files, environment variables, or command-line arguments.</li><li>See the <code>@structures-server</code> module for a reference implementation and more configuration examples.</li></ul>`,33)]))}const g=i(n,[["render",l]]);export{k as __pageData,g as default};
