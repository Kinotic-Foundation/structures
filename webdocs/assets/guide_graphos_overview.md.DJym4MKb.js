import{_ as t,c as i,o,ae as a}from"./chunks/framework.DrOG_Kkp.js";const p=JSON.parse('{"title":"Policy Integration Overview","description":"","frontmatter":{},"headers":[],"relativePath":"guide/graphos/overview.md","filePath":"guide/graphos/overview.md"}'),r={name:"guide/graphos/overview.md"};function l(n,e,s,c,h,d){return o(),i("div",null,e[0]||(e[0]=[a('<h1 id="policy-integration-overview" tabindex="-1">Policy Integration Overview <a class="header-anchor" href="#policy-integration-overview" aria-label="Permalink to &quot;Policy Integration Overview&quot;">​</a></h1><p>The <code>PolicyAuthorizationService</code> in Structures provides seamless integration with GraphOS-style policies and the Apollo Router, enabling a 1-to-1 mapping between defined policies and GraphQL schema functionality. This integration ensures that your data management workflows in Structures align with the robust, declarative authorization capabilities of GraphOS.</p><h2 id="key-features" tabindex="-1">Key Features <a class="header-anchor" href="#key-features" aria-label="Permalink to &quot;Key Features&quot;">​</a></h2><ul><li><strong>GraphOS-Compatible Policies</strong>: Structures&#39; <code>@Policy</code> decorator maps directly to GraphOS&#39;s <code>@policy</code> directive, enabling the same fine-grained access control mechanisms.</li><li><strong>Automatic Schema Enrichment</strong>: Policy decorators defined in Structures are automatically included in the generated GraphQL schema, ensuring consistency between your TypeScript models and the resulting schema.</li><li><strong>Seamless Integration with Apollo Router</strong>: Policies propagate through the Apollo Router, leveraging GraphOS&#39;s <code>@policy</code> directive for distributed enforcement.</li></ul><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><ol><li><p><strong>Defining Policies in Structures</strong>:</p><ul><li>Policies are defined using the <code>@Policy</code> decorator, applied at the operation, entity, and field levels.</li><li>These decorators directly map to GraphQL schema directives, ensuring a consistent translation from your TypeScript models to GraphOS-compatible schemas.</li></ul></li><li><p><strong>Generate the GraphQL Schema</strong>:</p><ul><li>Structures automatically translates the <code>@Policy</code> decorators into <code>@policy</code> directives in the GraphQL schema.</li></ul></li><li><p><strong>Enforce Policies with Apollo Router</strong>:</p><ul><li>Deploy your schema with the Apollo Router to enforce these policies using the new GraphOS capabilities.</li></ul></li></ol><h2 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h2><ul><li><strong>Unified Policy Management</strong>: Define policies once in Structures and apply them consistently across GraphQL and REST APIs.</li><li><strong>GraphQL-Native Authorization</strong>: Take advantage of GraphOS-style policies directly within your Structures-based applications.</li><li><strong>Distributed Enforcement</strong>: Policies seamlessly integrate with the Apollo Router, enabling distributed enforcement across your federated services.</li></ul><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li>Explore how to define <a href="./policy-decorators.html">@Policy</a> in your Structures models.</li><li>Understand the <a href="./policy-evaluation-flow.html">Policy Evaluation Flow</a> for runtime authorization.</li></ul>',10)]))}const g=t(r,[["render",l]]);export{p as __pageData,g as default};
