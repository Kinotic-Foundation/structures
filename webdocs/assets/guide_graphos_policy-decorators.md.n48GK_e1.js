import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.h4D8wia2.js";const d=JSON.parse('{"title":"Policy Decorators","description":"","frontmatter":{},"headers":[],"relativePath":"guide/graphos/policy-decorators.md","filePath":"guide/graphos/policy-decorators.md"}'),n={name:"guide/graphos/policy-decorators.md"};function l(r,s,h,p,o,c){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="policy-decorators" tabindex="-1">Policy Decorators <a class="header-anchor" href="#policy-decorators" aria-label="Permalink to &quot;Policy Decorators&quot;">​</a></h1><p>Policy decorators in Structures allow you to define fine-grained access control directly within your TypeScript models. These decorators are used to specify policies for operations, entities, and fields, enabling seamless integration with GraphOS and consistent enforcement of access control.</p><h2 id="key-decorators" tabindex="-1">Key Decorators <a class="header-anchor" href="#key-decorators" aria-label="Permalink to &quot;Key Decorators&quot;">​</a></h2><h3 id="policy" tabindex="-1"><code>@Policy</code> <a class="header-anchor" href="#policy" aria-label="Permalink to &quot;\`@Policy\`&quot;">​</a></h3><p>The <code>@Policy</code> decorator applies policies to entities and fields. It defines the conditions under which the associated entity or field can be accessed.</p><ul><li><strong>Entity-Level Policies</strong>: Applied to an entity to define access requirements for the entire model.</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Policy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data:read&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Entity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MultiTenancyType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SHARED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> firstName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> lastName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>Field-Level Policies</strong>: Applied to individual fields to restrict access based on specific policies.</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Entity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MultiTenancyType.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SHARED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> firstName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> lastName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Policy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data:create&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="entityservicedecorators" tabindex="-1"><a href="./entity-service-decorators.html"><code>@EntityServiceDecorators</code></a> <a class="header-anchor" href="#entityservicedecorators" aria-label="Permalink to &quot;[\`@EntityServiceDecorators\`](./entity-service-decorators)&quot;">​</a></h3><p>The <a href="./entity-service-decorators.html"><code>@EntityServiceDecorators</code></a> decorator allows you to define policies for specific operations at the entity level. These include CRUD operations such as <code>create</code>, <code>read</code>, <code>update</code>, and <code>delete</code>.</p><ul><li><strong>Operation-Level Policies</strong>: Define access requirements for operations like <code>create</code> and <code>update</code>.</li></ul><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EntityServiceDecorators</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        allCreate: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            $Policy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data:create&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        findAll: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            $Policy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data:read&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>More information on the <code>@EntityServiceDecorators</code> decorator can be found <a href="./entity-service-decorators.html">here</a>.</p></div><h2 id="how-policies-translate-to-graphql" tabindex="-1">How Policies Translate to GraphQL <a class="header-anchor" href="#how-policies-translate-to-graphql" aria-label="Permalink to &quot;How Policies Translate to GraphQL&quot;">​</a></h2><p>Policies defined with these decorators are automatically translated into GraphOS-compatible <code>@policy</code> directives in the GraphQL schema.</p><ul><li>The policies applied at the entity and field levels in Structures directly map to corresponding <code>@policy</code> directives in GraphQL.</li></ul><p>This ensures that policies are enforced consistently across the generated GraphQL API.</p><h2 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h2><ul><li><strong>Centralized Access Control</strong>: Policies are defined directly in the model, ensuring a single source of truth for access control.</li><li><strong>Granular Control</strong>: Apply policies at the operation, entity, and field levels to match your exact requirements.</li><li><strong>GraphOS Compatibility</strong>: Policies map directly to GraphQL schema directives for use with GraphOS and the Apollo Router.</li></ul><h2 id="related-links" tabindex="-1">Related Links <a class="header-anchor" href="#related-links" aria-label="Permalink to &quot;Related Links&quot;">​</a></h2><ul><li>Learn about the <a href="./../../reference/graphos/policy-authorization-service.html">PolicyAuthorizationService</a> and its role in enforcing policies.</li><li>Explore the <a href="./policy-evaluation-flow.html">Policy Evaluation Flow</a> to understand runtime policy processing.</li></ul>`,22)]))}const E=i(n,[["render",l]]);export{d as __pageData,E as default};
