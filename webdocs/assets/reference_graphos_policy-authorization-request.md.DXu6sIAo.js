import{_ as a,c as s,o as e,ae as t}from"./chunks/framework.h4D8wia2.js";const k=JSON.parse('{"title":"PolicyAuthorizationRequest","description":"","frontmatter":{},"headers":[],"relativePath":"reference/graphos/policy-authorization-request.md","filePath":"reference/graphos/policy-authorization-request.md"}'),n={name:"reference/graphos/policy-authorization-request.md"};function l(o,i,h,r,p,c){return e(),s("div",null,i[0]||(i[0]=[t(`<h1 id="policyauthorizationrequest" tabindex="-1">PolicyAuthorizationRequest <a class="header-anchor" href="#policyauthorizationrequest" aria-label="Permalink to &quot;PolicyAuthorizationRequest&quot;">​</a></h1><p>The <code>PolicyAuthorizationRequest</code> interface is a core part of the Structures policy system. It represents an individual policy request passed to the <code>PolicyAuthorizer</code> for evaluation. Each <code>PolicyAuthorizationRequest</code> encapsulates the details of a single policy, providing methods to mark it as authorized or denied.</p><h2 id="interface-overview" tabindex="-1">Interface Overview <a class="header-anchor" href="#interface-overview" aria-label="Permalink to &quot;Interface Overview&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PolicyAuthorizationRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * Retrieves the name of the policy being evaluated.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> The policy name as a String.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">policy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * Marks the policy as authorized, indicating that it passed the evaluation.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> authorize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * Marks the policy as denied, indicating that it failed the evaluation.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * Checks if the policy has been authorized.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> True if the policy is authorized, otherwise false.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isAuthorized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>The <code>PolicyAuthorizationRequest</code> is used during the policy evaluation process by the <code>PolicyAuthorizer</code>. Each policy in the evaluation set is represented by a <code>PolicyAuthorizationRequest</code>, and the <code>PolicyAuthorizer</code> interacts with it to determine whether the policy passes or fails.</p><h2 id="example-workflow" tabindex="-1">Example Workflow <a class="header-anchor" href="#example-workflow" aria-label="Permalink to &quot;Example Workflow&quot;">​</a></h2><ol><li>A <code>PolicyAuthorizationRequest</code> is created for each unique policy in a request.</li><li>The <code>PolicyAuthorizer</code> processes the requests and calls either <code>authorize()</code> or <code>deny()</code> based on the evaluation result.</li><li>The <code>isAuthorized()</code> method can be used to query the evaluation status of the policy at runtime.</li></ol><h2 id="integration-with-policyauthorizer" tabindex="-1">Integration with PolicyAuthorizer <a class="header-anchor" href="#integration-with-policyauthorizer" aria-label="Permalink to &quot;Integration with PolicyAuthorizer&quot;">​</a></h2><p>The <code>PolicyAuthorizationRequest</code> is passed as part of a list to the <code>PolicyAuthorizer</code> for batch evaluation. Each request&#39;s evaluation outcome directly impacts whether the associated operation, entity, or field is authorized.</p><p>For more details, see <a href="./policy-authorizer.html">PolicyAuthorizer</a>.</p><h2 id="related-links" tabindex="-1">Related Links <a class="header-anchor" href="#related-links" aria-label="Permalink to &quot;Related Links&quot;">​</a></h2><ul><li>Explore the <a href="./policy-authorizer.html">PolicyAuthorizer</a> and its role in evaluating policy requests.</li><li>Learn how to define and use <a href="./../../guide/graphos/policy-decorators.html">Policy Decorators</a> in your Structures models.</li><li>Review the <a href="./../../guide/graphos/policy-evaluation-flow.html">Policy Evaluation Flow</a> for a complete understanding of runtime policy processing.</li></ul>`,13)]))}const u=a(n,[["render",l]]);export{k as __pageData,u as default};
