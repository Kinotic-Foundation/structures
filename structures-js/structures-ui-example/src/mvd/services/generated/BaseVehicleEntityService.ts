import { EntityService, IEntitiesService } from '@kinotic/structures-api'
import { Vehicle } from '../../domain/Vehicle.js'


/**
 * Base Service for interacting with Vehicle entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BaseVehicleEntityService extends EntityService<Vehicle> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('mvd', 'Vehicle', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: Vehicle): Promise<Vehicle> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: Vehicle[]): Promise<Vehicle[]> {
    if (this.shouldValidate) {
      const validatedEntities: Vehicle[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: Vehicle): Vehicle {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.color = entity.color
      ret.manufacturer = entity.manufacturer
      ret.model = entity.model
      ret.type = entity.type
      if (entity.owner) {
        ret.owner = (ret.owner ? ret.owner : {})
        ret.owner.id = entity.owner.id
      }
    }

    return ret
  }

}
