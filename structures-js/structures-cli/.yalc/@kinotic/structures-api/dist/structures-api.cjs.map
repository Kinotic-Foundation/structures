{"version":3,"file":"structures-api.cjs","sources":["../src/api/domain/NamedQueriesDefinition.ts","../src/api/domain/Namespace.ts","../src/api/domain/Structure.ts","../src/api/idl/decorators/AutoGeneratedIdDecorator.ts","../src/api/idl/decorators/DiscriminatorDecorator.ts","../src/api/idl/decorators/MultiTenancyType.ts","../src/api/idl/decorators/EntityDecorator.ts","../src/api/idl/decorators/FlattenedDecorator.ts","../src/api/idl/decorators/IdDecorator.ts","../src/api/idl/decorators/NestedDecorator.ts","../src/api/idl/decorators/QueryDecorator.ts","../src/api/idl/decorators/TextDecorator.ts","../src/internal/api/domain/FindAllIterablePage.ts","../src/internal/api/domain/NamedQueryIterablePage.ts","../src/internal/api/domain/SearchIterablePage.ts","../src/api/IEntitiesService.ts","../src/api/IEntityService.ts","../src/api/INamedQueriesService.ts","../src/api/INamespaceService.ts","../src/api/IStructureService.ts","../src/api/Structures.ts","../src/api/idl/decorators/PrecisionType.ts","../src/api/StructuresDecorators.ts"],"sourcesContent":["import { Identifiable } from '@kinotic/continuum-client'\nimport {FunctionDefinition} from '@kinotic/continuum-idl'\n\n/**\n * Provides Metadata that represents Named Queries for a Namespace\n */\nexport class NamedQueriesDefinition implements Identifiable<string> {\n    public id: string\n    public namespace: string\n    public structure: string\n    public namedQueries: FunctionDefinition[]\n\n    constructor(id: string,\n                namespace: string,\n                serviceName: string,\n                namedQueries: FunctionDefinition[]) {\n        this.id = id;\n        this.namespace = namespace;\n        this.structure = serviceName;\n        this.namedQueries = namedQueries;\n    }\n\n}\n\n","import { Identifiable } from '@kinotic/continuum-client'\nexport class Namespace implements Identifiable<string> {\n    public id: string\n    public description: string\n    public updated: number\n\n    constructor(id: string, description: string, updated: number) {\n        this.id = id;\n        this.description = description;\n        this.updated = updated;\n    }\n\n}\n","import {ObjectC3Type} from '@kinotic/continuum-idl'\nimport {Identifiable} from '@kinotic/continuum-client'\n\nexport class Structure implements Identifiable<string> {\n    public id!: string | null\n    public namespace!: string\n    public name!: string\n    public entityDefinition!: ObjectC3Type\n    public description?: string | null\n    public created!: number // do not ever set, system managed\n    public updated!: number // do not ever set, system managed\n    public published!: boolean // do not ever set, system managed\n    public publishedTimestamp!: number // do not ever set, system managed\n\n    constructor(namespace: string,\n                name: string,\n                entityDefinition: ObjectC3Type,\n                description?: string | null) {\n        this.namespace = namespace\n        this.name = name\n        this.entityDefinition = entityDefinition\n        this.description = description\n    }\n\n}\n","import {C3Decorator} from '@kinotic/continuum-idl'\n\n/**\n * Signifies the ID field of an entity, The ID will be auto generated.\n */\nexport class AutoGeneratedIdDecorator extends C3Decorator {\n\n    constructor() {\n        super()\n        this.type = 'AutoGeneratedId'\n    }\n}\n","import {C3Decorator} from '@kinotic/continuum-idl'\n\n/**\n * Specifies the discriminator field for polymorphic entities.\n */\nexport class DiscriminatorDecorator extends C3Decorator {\n    public propertyName?: string\n    constructor() {\n        super()\n        this.type = 'Discriminator'\n    }\n\n    public withPropertyName(propertyName: string): DiscriminatorDecorator {\n        this.propertyName = propertyName\n        return this\n    }\n}\n","/**\n * MultiTenancyType is an enum that represents the different types of multi-tenancy that can be applied to an entity.\n */\nexport enum MultiTenancyType {\n    /**\n     * Default, no multi-tenancy\n     */\n    NONE,\n\n    /**\n     * Shared table multi-tenancy\n     */\n    SHARED\n    // We will support these in the future\n//    ISOLATED,\n//    HYBRID\n}\n","import {C3Decorator} from '@kinotic/continuum-idl'\nimport {MultiTenancyType} from '@/api/idl/decorators/MultiTenancyType'\n\n/**\n * Signifies that a class is an entity.\n */\nexport class EntityDecorator extends C3Decorator {\n    public multiTenancyType: MultiTenancyType = MultiTenancyType.NONE\n    constructor() {\n        super()\n        this.type = 'Entity'\n    }\n\n    public withMultiTenancyType(type: MultiTenancyType): EntityDecorator {\n        this.multiTenancyType = type\n        return this\n    }\n}\n","import {C3Decorator} from '@kinotic/continuum-idl'\n\n/**\n * Signifies that an object should be stored as a flattened json.\n * This will not be indexed, and thus not searchable.\n * Created by NavÃ­d Mitchell ðŸ¤ª on 4/23/23.\n */\nexport class FlattenedDecorator extends C3Decorator {\n\n    constructor() {\n        super()\n        this.type = 'Flattened'\n    }\n}\n","import {C3Decorator} from '@kinotic/continuum-idl'\n\n/**\n * Signifies the ID field of an entity, The value must be a string and provided by the client.\n */\nexport class IdDecorator extends C3Decorator {\n\n    constructor() {\n        super()\n        this.type = 'Id'\n    }\n}\n","import {C3Decorator} from '@kinotic/continuum-idl'\n\n/**\n * Marks a property as a nested object.\n * Created by NavÃ­d Mitchell ðŸ¤ª on 4/23/23.\n */\nexport class NestedDecorator extends C3Decorator {\n\n    constructor() {\n        super()\n        this.type = 'Nested'\n    }\n}\n","import {C3Decorator} from '@kinotic/continuum-idl'\n\nexport class QueryDecorator extends C3Decorator {\n\n    public statements: string\n\n    constructor(statements: string) {\n        super()\n        this.type = 'Query'\n        this.statements = statements\n    }\n}\n","import {C3Decorator} from '@kinotic/continuum-idl'\n\n/**\n * Signals that a property is a text field, and will be full text indexed.\n * Created by NavÃ­d Mitchell ðŸ¤ª on 4/23/23.\n */\nexport class TextDecorator extends C3Decorator {\n\n    constructor() {\n        super()\n        this.type = 'Text'\n    }\n}\n","import {EntitiesService} from '@/api/IEntitiesService'\nimport {AbstractIterablePage, Page, Pageable, IterablePage} from '@kinotic/continuum-client'\n\n/**\n * {@link IterablePage} for use when finding all\n */\nexport class FindAllIterablePage<T> extends AbstractIterablePage<T> {\n\n    private readonly structureId: string\n    private readonly entitiesService: EntitiesService\n\n    constructor(entitiesService: EntitiesService,\n                pageable: Pageable,\n                page: Page<T>,\n                structureId: string) {\n        super(pageable, page)\n        this.entitiesService = entitiesService\n        this.structureId = structureId\n    }\n\n    protected findNext(pageable: Pageable): Promise<Page<T>> {\n        return this.entitiesService.findAllSinglePage(this.structureId, pageable)\n    }\n\n}\n","import {QueryParameter} from '@/api/domain/QueryParameter.js'\nimport {EntitiesService} from '@/api/IEntitiesService'\nimport {AbstractIterablePage, Page, Pageable, IterablePage} from '@kinotic/continuum-client'\n\n/**\n * {@link IterablePage} for use when searching\n */\nexport class NamedQueryIterablePage<T> extends AbstractIterablePage<T> {\n\n    private readonly parameters: QueryParameter[]\n    private readonly queryName: string\n    private readonly structureId: string\n    private readonly entitiesService: EntitiesService\n\n    constructor(entitiesService: EntitiesService,\n                pageable: Pageable,\n                page: Page<T>,\n                parameters: QueryParameter[],\n                queryName: string,\n                structureId: string) {\n        super(pageable, page)\n        this.entitiesService = entitiesService\n        this.parameters = parameters\n        this.queryName = queryName\n        this.structureId = structureId\n    }\n\n    protected findNext(pageable: Pageable): Promise<Page<T>> {\n        return this.entitiesService.namedQuerySinglePage(this.structureId, this.queryName, this.parameters, pageable)\n    }\n\n}\n","import {EntitiesService} from '@/api/IEntitiesService'\nimport {AbstractIterablePage, Page, Pageable, IterablePage} from '@kinotic/continuum-client'\n\n/**\n * {@link IterablePage} for use when searching\n */\nexport class SearchIterablePage<T> extends AbstractIterablePage<T> {\n\n    private readonly searchText: string\n    private readonly structureId: string\n    private readonly entitiesService: EntitiesService\n\n    constructor(entitiesService: EntitiesService, pageable: Pageable,\n                page: Page<T>,\n                searchText: string,\n                structureId: string) {\n        super(pageable, page)\n        this.entitiesService = entitiesService\n        this.searchText = searchText\n        this.structureId = structureId\n    }\n\n    protected findNext(pageable: Pageable): Promise<Page<T>> {\n        return this.entitiesService.searchSinglePage(this.structureId, this.searchText, pageable)\n    }\n\n}\n","import {QueryParameter} from '@/api/domain/QueryParameter.js'\nimport {FindAllIterablePage} from '@/internal/api/domain/FindAllIterablePage'\nimport {NamedQueryIterablePage} from '@/internal/api/domain/NamedQueryIterablePage.js'\nimport {SearchIterablePage} from '@/internal/api/domain/SearchIterablePage'\nimport {\n    Continuum,\n    IServiceProxy,\n    Page,\n    Pageable,\n    IterablePage,\n    IServiceRegistry\n} from '@kinotic/continuum-client'\n\nexport interface IEntitiesService {\n\n    /**\n     * Saves all given entities.\n     * @param structureId the id of the structure to save the entities for\n     * @param entities all the entities to save\n     * @return Promise that will complete when all entities have been saved\n     */\n    bulkSave<T>(structureId: string, entities: T[]): Promise<void>\n\n    /**\n     * Updates all given entities.\n     * @param structureId the id of the structure to update the entities for\n     * @param entities all the entities to save\n     * @return Promise that will complete when all entities have been saved\n     */\n    bulkUpdate<T>(structureId: string, entities: T[]): Promise<void>\n\n    /**\n     * Returns the number of entities available.\n     * @param structureId the id of the structure to count\n     * @return {@link Promise} emitting the number of entities.\n     */\n    count(structureId: string): Promise<number>\n\n    /**\n     * Returns the number of entities available for the given query.\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param query       the query used to limit result\n     * @return Promise    emitting the number of entities\n     */\n    countByQuery(structureId: string, query: string): Promise<number>\n\n    /**\n     * Deletes the entity with the given id.\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param id          must not be {@literal null}\n     * @return {@link Promise} emitting when delete is complete\n     * @throws IllegalArgumentException in case the given {@literal id} is {@literal null}\n     */\n    deleteById(structureId: string, id: string): Promise<void>\n\n    /**\n     * Deletes the entity with the given id.\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param query      the query used to filter records to delete, must not be {@literal null}\n     * @return Promise signaling when operation has completed\n     * @throws Error in case the given {@literal query} is {@literal null}\n     */\n    deleteByQuery(structureId: string, query: string): Promise<void>\n\n    /**\n     * Returns a {@link IterablePage} of entities meeting the paging restriction provided in the {@link Pageable} object.\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param pageable    the page settings to be used\n     * @return a page of entities\n     */\n    findAll<T>(structureId: string, pageable: Pageable): Promise<IterablePage<T>>\n\n    /**\n     * Returns a single {@link Page} of entities meeting the paging restriction provided in the {@link Pageable} object.\n     * @param structureId\n     * @param pageable\n     */\n    findAllSinglePage<T>(structureId: string, pageable: Pageable): Promise<Page<T>>\n\n    /**\n     * Retrieves an entity by its id.\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param id          must not be {@literal null}\n     * @return {@link Promise} with the entity with the given id or {@link Promise} emitting null if none found\n     * @throws IllegalArgumentException in case the given {@literal id} is {@literal null}\n     */\n    findById<T>(structureId: string, id: string): Promise<T>\n\n    /**\n     * Retrieves a list of entities by their id.\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param ids      must not be {@literal null}\n     * @return Promise emitting the entities with the given ids or Promise emitting null if none found\n     * @throws Error in case the given {@literal ids} is {@literal null}\n     */\n    findByIds<T>(structureId: string, ids: string[]): Promise<T[]>\n\n    /**\n     * Executes a named query.\n     * @param structureId the id of the structure that this named query is defined for\n     * @param queryName the name of the function that defines the query\n     * @param parameters to pass to the query\n     * @returns Promise with the result of the query\n     */\n    namedQuery<T>(structureId: string, queryName: string, parameters: QueryParameter[]): Promise<T>\n\n    /**\n     * Executes a named query and returns a Page of results.\n     * @param structureId the id of the structure that this named query is defined for\n     * @param queryName the name of the function that defines the query\n     * @param parameters to pass to the query\n     * @param pageable the page settings to be used\n     * @returns Promise with the result of the query\n     */\n    namedQueryPage<T>(structureId: string, queryName: string, parameters: QueryParameter[], pageable: Pageable): Promise<IterablePage<T>>\n\n    /**\n     * Saves a given entity. Use the returned instance for further operations as the save operation might have changed the\n     * entity instance completely.\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param entity      must not be {@literal null}\n     * @return {@link Promise} emitting the saved entity\n     * @throws IllegalArgumentException in case the given {@literal entity} is {@literal null}\n     */\n    save<T>(structureId: string, entity: T): Promise<T>\n\n    /**\n     * Returns a {@link IterablePage} of entities matching the search text and paging restriction provided in the {@link Pageable} object.\n     * <p>\n     * You can find more information about the search syntax <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax\">here</a>\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param searchText  the text to search for entities for\n     * @param pageable    the page settings to be used\n     * @return a page of entities\n     */\n    search<T>(structureId: string, searchText: string, pageable: Pageable): Promise<IterablePage<T>>\n\n    /**\n     * Returns a single {@link Page} of entities matching the search text and paging restriction provided in the {@link Pageable} object.\n     * <p>\n     * You can find more information about the search syntax <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax\">here</a>\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param searchText  the text to search for entities for\n     * @param pageable    the page settings to be used\n     * @return a page of entities\n     */\n    searchSinglePage<T>(structureId: string, searchText: string, pageable: Pageable): Promise<Page<T>>\n\n    /**\n     * Updates a given entity. This will only override the fields that are present in the given entity.\n     * If any fields are not present in the given entity data they will not be changed.\n     * If the entity does not exist it will be created.\n     * Use the returned instance for further operations as the save operation might have changed the entity instance.\n     *\n     * @param structureId the id of the structure to update the entity for\n     * @param entity      must not be {@literal null}\n     * @return Promise emitting the saved entity\n     * @throws Error in case the given {@literal entity} is {@literal null}\n     */\n    update<T>(structureId: string, entity: T): Promise<T>\n\n}\n\nexport class EntitiesService implements IEntitiesService {\n\n    protected serviceProxy: IServiceProxy\n\n     constructor(serviceRegistry?: IServiceRegistry) {\n        const service = 'org.kinotic.structures.api.services.JsonEntitiesService'\n        this.serviceProxy = serviceRegistry?.serviceProxy(service) || Continuum.serviceProxy(service)\n    }\n\n    public bulkSave<T>(structureId: string, entities: T[]): Promise<void>{\n        return this.serviceProxy.invoke('bulkSave', [structureId, entities])\n    }\n\n    public bulkUpdate<T>(structureId: string, entities: T[]): Promise<void>{\n        return this.serviceProxy.invoke('bulkUpdate', [structureId, entities])\n    }\n\n    public count(structureId: string): Promise<number> {\n        return this.serviceProxy.invoke('count', [structureId])\n    }\n\n    public countByQuery(structureId: string, query: string): Promise<number> {\n        return this.serviceProxy.invoke('countByQuery', [structureId, query])\n    }\n\n    public deleteById(structureId: string, id: string): Promise<void> {\n        return this.serviceProxy.invoke('deleteById', [structureId, id])\n    }\n\n    public deleteByQuery(structureId: string, query: string): Promise<void> {\n        return this.serviceProxy.invoke('deleteByQuery', [structureId, query])\n    }\n\n    public async findAll<T>(structureId: string, pageable: Pageable): Promise<IterablePage<T>> {\n        const page: Page<T> = await this.findAllSinglePage(structureId, pageable)\n        return new FindAllIterablePage(this, pageable, page, structureId)\n    }\n\n    public async findAllSinglePage<T>(structureId: string, pageable: Pageable): Promise<Page<T>> {\n        return this.serviceProxy.invoke('findAll', [structureId, pageable])\n    }\n\n    public findById<T>(structureId: string, id: string): Promise<T> {\n        return this.serviceProxy.invoke('findById', [structureId, id])\n    }\n\n    public findByIds<T>(structureId: string, ids: string[]): Promise<T[]> {\n        return this.serviceProxy.invoke('findByIds', [structureId, ids])\n    }\n\n    public namedQuery<T>(structureId: string, queryName: string, parameters: QueryParameter[]): Promise<T> {\n        return this.serviceProxy.invoke('namedQuery', [structureId, queryName, parameters])\n    }\n\n    public async namedQueryPage<T>(structureId: string, queryName: string, parameters: QueryParameter[], pageable: Pageable): Promise<IterablePage<T>> {\n        const page: Page<T> = await this.namedQuerySinglePage(structureId, queryName, parameters, pageable)\n        return new NamedQueryIterablePage(this, pageable, page, parameters, queryName, structureId)\n    }\n\n    public namedQuerySinglePage<T>(structureId: string, queryName: string, parameters: QueryParameter[], pageable: Pageable): Promise<Page<T>> {\n        return this.serviceProxy.invoke('namedQueryPage', [structureId, queryName, parameters, pageable])\n    }\n\n    public save<T>(structureId: string, entity: T): Promise<T> {\n        return this.serviceProxy.invoke('save', [structureId, entity])\n    }\n\n    public async search<T>(structureId: string, searchText: string, pageable: Pageable): Promise<IterablePage<T>> {\n        const page: Page<T> = await this.searchSinglePage(structureId, searchText, pageable)\n        return new SearchIterablePage(this, pageable, page, searchText, structureId)\n    }\n\n    public async searchSinglePage<T>(structureId: string, searchText: string, pageable: Pageable): Promise<Page<T>> {\n        return this.serviceProxy.invoke('search', [structureId, searchText, pageable])\n    }\n\n    public update<T>(structureId: string, entity: T): Promise<T>{\n        return this.serviceProxy.invoke('update', [structureId, entity])\n    }\n}\n\nexport const EntitiesServiceSingleton: IEntitiesService = new EntitiesService()\n","import {QueryParameter} from '@/api/domain/QueryParameter.js'\nimport {Page, Pageable, IterablePage} from '@kinotic/continuum-client'\nimport {EntitiesServiceSingleton, IEntitiesService} from '@/api/IEntitiesService'\n\n/**\n * This is the base interface for all entity services.\n * It provides the basic CRUD operations for entities.\n */\nexport interface IEntityService<T> {\n\n    /**\n     * The namespace of the structure this service is for\n     */\n    structureNamespace: string\n\n    /**\n     * The name of the structure this service is for\n     */\n    structureName: string\n\n    /**\n     * Saves all given entities.\n     * @param entities all the entities to save\n     * @return Promise that will complete when all entities have been saved\n     */\n    bulkSave(entities: T[]): Promise<void>;\n\n    /**\n     * Updates all given entities.\n     * @param entities all the entities to save\n     * @return Promise that will complete when all entities have been saved\n     */\n    bulkUpdate(entities: T[]): Promise<void>;\n\n    /**\n     * Returns the number of entities available.\n     *\n     * @return Promise emitting the number of entities\n     */\n    count(): Promise<number>;\n\n    /**\n     * Returns the number of entities available for the given query.\n     *\n     * @param query       the query used to limit result\n     * @return Promise    emitting the number of entities\n     */\n    countByQuery(query: string): Promise<number>;\n\n    /**\n     * Deletes the entity with the given id.\n     *\n     * @param id      must not be {@literal null}\n     * @return Promise signaling when operation has completed\n     * @throws Error in case the given {@literal id} is {@literal null}\n     */\n    deleteById(id: string): Promise<void>;\n\n    /**\n     * Deletes the entity with the given id.\n     *\n     * @param query      the query used to filter records to delete, must not be {@literal null}\n     * @return Promise signaling when operation has completed\n     * @throws Error in case the given {@literal query} is {@literal null}\n     */\n    deleteByQuery(query: string): Promise<void>;\n\n    /**\n     * Returns a {@link Page} of entities meeting the paging restriction provided in the {@link Pageable} object.\n     *\n     * @param pageable the page settings to be used\n     * @return a page of entities\n     */\n    findAll(pageable: Pageable): Promise<IterablePage<T>>;\n\n    /**\n     * Retrieves an entity by its id.\n     *\n     * @param id      must not be {@literal null}\n     * @return Promise emitting the entity with the given id or Promise emitting null if none found\n     * @throws Error in case the given {@literal id} is {@literal null}\n     */\n    findById(id: string): Promise<T>;\n\n    /**\n     * Retrieves a list of entities by their id.\n     *\n     * @param ids      must not be {@literal null}\n     * @return Promise emitting the entities with the given ids or Promise emitting null if none found\n     * @throws Error in case the given {@literal ids} is {@literal null}\n     */\n    findByIds(ids: string[]): Promise<T[]>;\n\n    /**\n     * Executes a named query.\n     * @param queryName the name of the function that defines the query\n     * @param parameters to pass to the query\n     * @returns Promise with the result of the query\n     */\n    namedQuery<U>(queryName: string, parameters: QueryParameter[]): Promise<U>\n\n    /**\n     * Executes a named query and returns a Page of results.\n     * @param queryName the name of the function that defines the query\n     * @param parameters to pass to the query\n     * @param pageable the page settings to be used\n     * @returns Promise with the result of the query\n     */\n    namedQueryPage<U>(queryName: string, parameters: QueryParameter[], pageable: Pageable): Promise<IterablePage<U>>\n\n    /**\n     * Saves a given entity. This will override all data if there is an existing entity with the same id.\n     * Use the returned instance for further operations as the save operation might have changed the entity instance.\n     *\n     * @param entity  must not be {@literal null}\n     * @return Promise emitting the saved entity\n     * @throws Error in case the given {@literal entity} is {@literal null}\n     */\n    save(entity: T): Promise<T>;\n\n    /**\n     * Returns a {@link Page} of entities matching the search text and paging restriction provided in the {@link Pageable} object.\n     *\n     * @param searchText the text to search for entities for\n     * @param pageable   the page settings to be used\n     * @return a page of entities\n     */\n    search(searchText: string, pageable: Pageable): Promise<IterablePage<T>>;\n\n    /**\n     * Updates a given entity. This will only override the fields that are present in the given entity.\n     * If any fields are not present in the given entity data they will not be changed.\n     * If the entity does not exist it will be created.\n     * Use the returned instance for further operations as the save operation might have changed the entity instance.\n     *\n     * @param entity      must not be {@literal null}\n     * @return Promise emitting the saved entity\n     * @throws Error in case the given {@literal entity} is {@literal null}\n     */\n    update(entity: T): Promise<T>;\n\n}\n\n/**\n * This is the base class for all entity services.\n * It provides the basic CRUD operations for entities.\n */\nexport class EntityService<T> implements IEntityService<T>{\n\n    public structureNamespace: string\n    public structureName: string\n\n    private entitiesService: IEntitiesService\n    private readonly structuresId: string\n\n    public constructor(structureNamespace: string,\n                       structureName: string,\n                       entitiesService?: IEntitiesService) {\n        this.structureNamespace = structureNamespace\n        this.structureName = structureName\n        this.structuresId = (structureNamespace + '.' + structureName).toLowerCase()\n        this.entitiesService = entitiesService || EntitiesServiceSingleton\n    }\n\n    public async bulkSave(entities: T[]): Promise<void>{\n        const entitiesToSave = await this.beforeBulkSaveOrUpdate(entities)\n        return this.entitiesService.bulkSave(this.structuresId, entitiesToSave)\n    }\n\n    public async bulkUpdate(entities: T[]): Promise<void>{\n        const entitiesToSave = await this.beforeBulkSaveOrUpdate(entities)\n        return this.entitiesService.bulkUpdate(this.structuresId, entitiesToSave)\n    }\n\n    public count(): Promise<number>{\n        return this.entitiesService.count(this.structuresId)\n    }\n\n    public countByQuery(query: string): Promise<number>{\n        return this.entitiesService.countByQuery(this.structuresId, query)\n    }\n\n    public deleteById(id: string): Promise<void>{\n        return this.entitiesService.deleteById(this.structuresId, id)\n    }\n\n    public deleteByQuery(query: string): Promise<void>{\n        return this.entitiesService.deleteByQuery(this.structuresId, query)\n    }\n\n    public findAll(pageable: Pageable): Promise<IterablePage<T>>{\n        return this.entitiesService.findAll(this.structuresId, pageable)\n    }\n\n    public findById(id: string): Promise<T>{\n        return this.entitiesService.findById(this.structuresId, id)\n    }\n\n    public findByIds(ids: string[]): Promise<T[]>{\n        return this.entitiesService.findByIds(this.structuresId, ids)\n    }\n\n    public namedQuery<U>(queryName: string, parameters: QueryParameter[]): Promise<U> {\n        return this.entitiesService.namedQuery(this.structuresId, queryName, parameters)\n    }\n\n    public namedQueryPage<U>(queryName: string, parameters: QueryParameter[], pageable: Pageable): Promise<IterablePage<U>> {\n        return this.entitiesService.namedQueryPage(this.structuresId, queryName, parameters, pageable)\n    }\n\n    public async save(entity: T): Promise<T>{\n        const entityToSave = await this.beforeSaveOrUpdate(entity)\n        return this.entitiesService.save(this.structuresId, entityToSave)\n    }\n\n    public search(searchText: string, pageable: Pageable): Promise<IterablePage<T>>{\n        return this.entitiesService.search(this.structuresId, searchText, pageable)\n    }\n\n    public async update(entity: T): Promise<T>{\n        const entityToSave = await this.beforeSaveOrUpdate(entity)\n        return this.entitiesService.update(this.structuresId, entityToSave)\n    }\n\n    protected async beforeBulkSaveOrUpdate(entities: T[]): Promise<T[]>{\n        return Promise.resolve(entities)\n    }\n\n    protected async beforeSaveOrUpdate(entity: T): Promise<T>{\n        return Promise.resolve(entity)\n    }\n}\n","import {NamedQueriesDefinition} from '@/api/domain/NamedQueriesDefinition.js'\nimport {Continuum, CrudServiceProxy, ICrudServiceProxy,} from '@kinotic/continuum-client'\n\nexport interface INamedQueriesService extends ICrudServiceProxy<NamedQueriesDefinition> {\n\n}\n\nexport class NamedQueriesService extends CrudServiceProxy<NamedQueriesDefinition> implements INamedQueriesService{\n\n    constructor() {\n        super(Continuum.serviceProxy('org.kinotic.structures.api.services.NamedQueriesService'))\n    }\n\n}\n","import {Continuum, CrudServiceProxy, ICrudServiceProxy,} from '@kinotic/continuum-client'\nimport {Namespace} from '@/api/domain/Namespace.js'\n\n\nexport interface INamespaceService extends ICrudServiceProxy<Namespace> {\n\n    /**\n     * Creates a new namespace if it does not already exist.\n     * @param id the id of the namespace to create\n     * @param description the description of the namespace to create\n     * @return {@link Promise} emitting the created namespace\n     */\n    createNamespaceIfNotExist(id: string, description: string): Promise<Namespace>\n\n}\n\nexport class NamespaceService extends CrudServiceProxy<Namespace> implements INamespaceService{\n\n    constructor() {\n        super(Continuum.serviceProxy('org.kinotic.structures.api.services.NamespaceService'))\n    }\n\n    public createNamespaceIfNotExist(id: string, description: string): Promise<Namespace> {\n        return this.serviceProxy.invoke('createNamespaceIfNotExist', [id, description])\n    }\n\n}\n","import {Continuum, CrudServiceProxy, ICrudServiceProxy, Page, Pageable} from '@kinotic/continuum-client'\nimport {Structure} from '@/api/domain/Structure.js'\n\n\nexport interface IStructureService extends ICrudServiceProxy<Structure> {\n\n    /**\n     * Finds all published structures for the given namespace.\n     * @param namespace the namespace to find structures for\n     * @param pageable the page to return\n     * @return a future that will complete with a page of structures\n     */\n    findAllPublishedForNamespace(namespace: string, pageable: Pageable): Promise<Page<Structure>>\n\n    /**\n     * Counts all structures for the given namespace.\n     * @param namespace the namespace to find structures for\n     * @return a future that will complete with a page of structures\n     */\n    countForNamespace(namespace: string): Promise<number>\n\n    /**\n     * Publishes the structure with the given id.\n     * This will make the structure available for use to read and write items for.\n     * @param structureId the id of the structure to publish\n     * @return a future that will complete when the structure has been published\n     */\n    publish(structureId: string): Promise<void>\n\n    /**\n     * Un-publish the structure with the given id.\n     * @param structureId the id of the structure to un-publish\n     * @return a future that will complete when the structure has been unpublished\n     */\n    unPublish(structureId: string): Promise<void>\n}\n\nexport class StructureService extends CrudServiceProxy<Structure> implements IStructureService{\n\n    constructor() {\n        super(Continuum.serviceProxy('org.kinotic.structures.api.services.StructureService'))\n    }\n\n    public findAllPublishedForNamespace(namespace: string, pageable: Pageable): Promise<Page<Structure>> {\n        return this.serviceProxy.invoke('findAllPublishedForNamespace', [namespace, pageable])\n    }\n\n    public countForNamespace(namespace: string): Promise<number> {\n        return this.serviceProxy.invoke('countForNamespace', [namespace])\n    }\n\n    public publish(structureId: string): Promise<void> {\n        return this.serviceProxy.invoke('publish', [structureId])\n    }\n\n    public unPublish(structureId: string): Promise<void> {\n        return this.serviceProxy.invoke('unPublish', [structureId])\n    }\n}\n","import {INamedQueriesService, NamedQueriesService} from '@/api/INamedQueriesService.js'\nimport {IEntitiesService, EntitiesService} from './IEntitiesService.js'\nimport {IStructureService, StructureService} from './IStructureService.js'\nimport {INamespaceService, NamespaceService} from '@/api/INamespaceService.js'\nimport {EntityService, IEntityService} from '@/api/IEntityService.js'\n\nconst NAMESPACE_SERVICE: INamespaceService = new NamespaceService()\nconst STRUCTURE_SERVICE: IStructureService = new StructureService()\nconst ENTITIES_SERVICE: IEntitiesService = new EntitiesService()\nconst NAMED_QUERIES_SERVICE: INamedQueriesService = new NamedQueriesService()\n\nexport namespace Structures {\n\n    export function getNamespaceService(): INamespaceService {\n        return NAMESPACE_SERVICE\n    }\n\n    export function getStructureService(): IStructureService {\n        return STRUCTURE_SERVICE\n    }\n\n    export function getEntitiesService(): IEntitiesService {\n        return ENTITIES_SERVICE\n    }\n\n    export function getNamedQueriesService(): INamedQueriesService {\n        return NAMED_QUERIES_SERVICE\n    }\n\n    export function createEntityService(structureNamespace: string, structureName: string): IEntityService<any> {\n        return new EntityService(structureNamespace, structureName)\n    }\n\n}\n","/**\n * The {@link PrecisionType} enum is used to define the precision of a numeric field in the Continuum IDL.\n */\nexport enum PrecisionType {\n    /**\n     * A double-precision 64-bit IEEE 754 floating point number, restricted to finite values.\n     */\n    DOUBLE,\n    /**\n     * A single-precision 32-bit IEEE 754 floating point number, restricted to finite values.\n     */\n    FLOAT,\n    /**\n     * A signed 32-bit integer with a minimum value of -231 and a maximum value of 231-1.\n     */\n    INT,\n    /**\n     * A signed 64-bit integer with a minimum value of -263 and a maximum value of 263-1.\n     */\n    LONG,\n    /**\n     * A signed 16-bit integer with a minimum value of -32,768 and a maximum value of 32,767.\n     */\n    SHORT\n}\n","import 'reflect-metadata'\nimport {MultiTenancyType} from '@/api/idl/decorators/MultiTenancyType'\nimport {PrecisionType} from '@/api/idl/decorators/PrecisionType'\n\nexport enum StructuresDecorator {\n    Entity = '__structures-entity__',\n    Id = '__structures-id__',\n    AutoGeneratedId = '__structures-auto-generated-id__',\n    Flattened = '__structures-flattened__',\n    Nested = '__structures-nested__',\n    Text = '__structures-text__',\n    NotNull = '__structures-notnull__',\n    Precision = '__structures-precision__',\n    Discriminator = '__structures-discriminator__',\n    Query = '__structures-query__'\n}\n\nexport class EntityConfig {\n    public multiTenancyType: MultiTenancyType\n\n    constructor(multiTenancyType: MultiTenancyType) {\n        this.multiTenancyType = multiTenancyType\n    }\n}\n\nexport function Entity(multiTenancyType: MultiTenancyType = MultiTenancyType.NONE) {\n    return function (constructor: Function) {\n        Reflect.defineMetadata(StructuresDecorator.Entity, new EntityConfig(multiTenancyType), constructor)\n    }\n}\n\nexport function Id(target: any, propertyKey: string) {\n    Reflect.defineMetadata(StructuresDecorator.Id, {}, target, propertyKey)\n}\n\nexport function AutoGeneratedId(target: any, propertyKey: string) {\n    Reflect.defineMetadata(StructuresDecorator.AutoGeneratedId, {}, target, propertyKey)\n\n}\n\nexport function Flattened(target: any, propertyKey: string) {\n    Reflect.defineMetadata(StructuresDecorator.Flattened, {}, target, propertyKey)\n}\n\nexport function Nested(target: any, propertyKey: string) {\n    Reflect.defineMetadata(StructuresDecorator.Nested, {}, target, propertyKey)\n}\n\nexport function Text(target: any, propertyKey: string) {\n    Reflect.defineMetadata(StructuresDecorator.Text, {}, target, propertyKey)\n}\n\nexport function NotNull(target: any, propertyKey: string) {\n    Reflect.defineMetadata(StructuresDecorator.NotNull, {}, target, propertyKey)\n}\n\nexport function Query(statements: string) {\n    return function (target: any, key: string, descriptor: PropertyDescriptor) {\n\n        Reflect.defineMetadata(StructuresDecorator.Query, statements, target, key)\n\n        /** Code below will be needed if we want the auto generated invocation logic to live in the base service class for the entity service **/\n        // const originalMethod = descriptor.value;\n        //\n        // // Access the super class and its method\n        // const superClass = Object.getPrototypeOf(target.constructor.prototype);\n        // const superMethod = superClass[key];\n        //\n        // descriptor.value = function (...args: any[]) {\n        //     // Check if the super method exists\n        //     if (typeof superMethod === 'function') {\n        //         return superMethod.apply(this, args);\n        //     } else {\n        //         return originalMethod.apply(this, args);\n        //     }\n        // };\n\n        return descriptor;\n    }\n}\n\nexport class PrecisionConfig {\n    public precisionType: PrecisionType\n\n    constructor(precisionType: PrecisionType) {\n        this.precisionType = precisionType\n    }\n}\n\nexport function Precision(precisionType: PrecisionType = PrecisionType.INT){\n    return function(target: any, propertyKey: string) {\n        Reflect.defineMetadata(StructuresDecorator.Precision, new PrecisionConfig(precisionType), target, propertyKey)\n    }\n}\n\nexport class DiscriminatorConfig {\n    public propertyName: string\n\n    constructor(propertyName: string) {\n        this.propertyName = propertyName\n    }\n}\n\nexport function Discriminator(propertyName: string){\n    return function(target: any, propertyKey: string) {\n        Reflect.defineMetadata(StructuresDecorator.Discriminator, new DiscriminatorConfig(propertyName), target, propertyKey)\n    }\n}\n"],"names":["NamedQueriesDefinition","id","namespace","serviceName","namedQueries","__publicField","Namespace","description","updated","Structure","name","entityDefinition","AutoGeneratedIdDecorator","C3Decorator","DiscriminatorDecorator","propertyName","MultiTenancyType","MultiTenancyType2","EntityDecorator","type","FlattenedDecorator","IdDecorator","NestedDecorator","QueryDecorator","statements","TextDecorator","FindAllIterablePage","AbstractIterablePage","entitiesService","pageable","page","structureId","NamedQueryIterablePage","parameters","queryName","SearchIterablePage","searchText","EntitiesService","serviceRegistry","service","Continuum","entities","query","ids","entity","EntitiesServiceSingleton","EntityService","structureNamespace","structureName","entitiesToSave","entityToSave","NamedQueriesService","CrudServiceProxy","NamespaceService","StructureService","NAMESPACE_SERVICE","STRUCTURE_SERVICE","ENTITIES_SERVICE","NAMED_QUERIES_SERVICE","Structures","getNamespaceService","getStructureService","getEntitiesService","getNamedQueriesService","createEntityService","PrecisionType","PrecisionType2","StructuresDecorator","EntityConfig","multiTenancyType","Entity","constructor","Id","target","propertyKey","AutoGeneratedId","Flattened","Nested","Text","NotNull","Query","key","descriptor","PrecisionConfig","precisionType","Precision","DiscriminatorConfig","Discriminator"],"mappings":"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"}