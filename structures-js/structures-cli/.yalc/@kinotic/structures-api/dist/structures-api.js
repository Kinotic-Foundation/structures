var f = Object.defineProperty;
var S = (r, e, t) => e in r ? f(r, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : r[e] = t;
var s = (r, e, t) => (S(r, typeof e != "symbol" ? e + "" : e, t), t);
import { C3Decorator as u } from "@kinotic/continuum-idl";
import { AbstractIterablePage as h, Continuum as o, CrudServiceProxy as v } from "@kinotic/continuum-client";
import "reflect-metadata";
class M {
  constructor(e, t, i, n) {
    s(this, "id");
    s(this, "namespace");
    s(this, "structure");
    s(this, "namedQueries");
    this.id = e, this.namespace = t, this.structure = i, this.namedQueries = n;
  }
}
class L {
  constructor(e, t, i) {
    s(this, "id");
    s(this, "description");
    s(this, "updated");
    this.id = e, this.description = t, this.updated = i;
  }
}
class G {
  // do not ever set, system managed
  constructor(e, t, i, n) {
    s(this, "id");
    s(this, "namespace");
    s(this, "name");
    s(this, "entityDefinition");
    s(this, "description");
    s(this, "created");
    // do not ever set, system managed
    s(this, "updated");
    // do not ever set, system managed
    s(this, "published");
    // do not ever set, system managed
    s(this, "publishedTimestamp");
    this.namespace = e, this.name = t, this.entityDefinition = i, this.description = n;
  }
}
class q extends u {
  constructor() {
    super(), this.type = "AutoGeneratedId";
  }
}
class H extends u {
  constructor() {
    super();
    s(this, "propertyName");
    this.type = "Discriminator";
  }
  withPropertyName(t) {
    return this.propertyName = t, this;
  }
}
var l = /* @__PURE__ */ ((r) => (r[r.NONE = 0] = "NONE", r[r.SHARED = 1] = "SHARED", r))(l || {});
class V extends u {
  constructor() {
    super();
    s(this, "multiTenancyType", l.NONE);
    this.type = "Entity";
  }
  withMultiTenancyType(t) {
    return this.multiTenancyType = t, this;
  }
}
class J extends u {
  constructor() {
    super(), this.type = "Flattened";
  }
}
class j extends u {
  constructor() {
    super(), this.type = "Id";
  }
}
class z extends u {
  constructor() {
    super(), this.type = "Nested";
  }
}
class K extends u {
  constructor(t) {
    super();
    s(this, "statements");
    this.type = "Query", this.statements = t;
  }
}
class W extends u {
  constructor() {
    super(), this.type = "Text";
  }
}
class m extends h {
  constructor(t, i, n, c) {
    super(i, n);
    s(this, "structureId");
    s(this, "entitiesService");
    this.entitiesService = t, this.structureId = c;
  }
  findNext(t) {
    return this.entitiesService.findAllSinglePage(this.structureId, t);
  }
}
class I extends h {
  constructor(t, i, n, c, a, d) {
    super(i, n);
    s(this, "parameters");
    s(this, "queryName");
    s(this, "structureId");
    s(this, "entitiesService");
    this.entitiesService = t, this.parameters = c, this.queryName = a, this.structureId = d;
  }
  findNext(t) {
    return this.entitiesService.namedQuerySinglePage(this.structureId, this.queryName, this.parameters, t);
  }
}
class x extends h {
  constructor(t, i, n, c, a) {
    super(i, n);
    s(this, "searchText");
    s(this, "structureId");
    s(this, "entitiesService");
    this.entitiesService = t, this.searchText = c, this.structureId = a;
  }
  findNext(t) {
    return this.entitiesService.searchSinglePage(this.structureId, this.searchText, t);
  }
}
class _ {
  constructor(e) {
    s(this, "serviceProxy");
    const t = "org.kinotic.structures.api.services.JsonEntitiesService";
    this.serviceProxy = (e == null ? void 0 : e.serviceProxy(t)) || o.serviceProxy(t);
  }
  bulkSave(e, t) {
    return this.serviceProxy.invoke("bulkSave", [e, t]);
  }
  bulkUpdate(e, t) {
    return this.serviceProxy.invoke("bulkUpdate", [e, t]);
  }
  count(e) {
    return this.serviceProxy.invoke("count", [e]);
  }
  countByQuery(e, t) {
    return this.serviceProxy.invoke("countByQuery", [e, t]);
  }
  deleteById(e, t) {
    return this.serviceProxy.invoke("deleteById", [e, t]);
  }
  deleteByQuery(e, t) {
    return this.serviceProxy.invoke("deleteByQuery", [e, t]);
  }
  async findAll(e, t) {
    const i = await this.findAllSinglePage(e, t);
    return new m(this, t, i, e);
  }
  async findAllSinglePage(e, t) {
    return this.serviceProxy.invoke("findAll", [e, t]);
  }
  findById(e, t) {
    return this.serviceProxy.invoke("findById", [e, t]);
  }
  findByIds(e, t) {
    return this.serviceProxy.invoke("findByIds", [e, t]);
  }
  namedQuery(e, t, i) {
    return this.serviceProxy.invoke("namedQuery", [e, t, i]);
  }
  async namedQueryPage(e, t, i, n) {
    const c = await this.namedQuerySinglePage(e, t, i, n);
    return new I(this, n, c, i, t, e);
  }
  namedQuerySinglePage(e, t, i, n) {
    return this.serviceProxy.invoke("namedQueryPage", [e, t, i, n]);
  }
  save(e, t) {
    return this.serviceProxy.invoke("save", [e, t]);
  }
  async search(e, t, i) {
    const n = await this.searchSinglePage(e, t, i);
    return new x(this, i, n, t, e);
  }
  async searchSinglePage(e, t, i) {
    return this.serviceProxy.invoke("search", [e, t, i]);
  }
  update(e, t) {
    return this.serviceProxy.invoke("update", [e, t]);
  }
}
const N = new _();
class P {
  constructor(e, t, i) {
    s(this, "structureNamespace");
    s(this, "structureName");
    s(this, "entitiesService");
    s(this, "structuresId");
    this.structureNamespace = e, this.structureName = t, this.structuresId = (e + "." + t).toLowerCase(), this.entitiesService = i || N;
  }
  async bulkSave(e) {
    const t = await this.beforeBulkSaveOrUpdate(e);
    return this.entitiesService.bulkSave(this.structuresId, t);
  }
  async bulkUpdate(e) {
    const t = await this.beforeBulkSaveOrUpdate(e);
    return this.entitiesService.bulkUpdate(this.structuresId, t);
  }
  count() {
    return this.entitiesService.count(this.structuresId);
  }
  countByQuery(e) {
    return this.entitiesService.countByQuery(this.structuresId, e);
  }
  deleteById(e) {
    return this.entitiesService.deleteById(this.structuresId, e);
  }
  deleteByQuery(e) {
    return this.entitiesService.deleteByQuery(this.structuresId, e);
  }
  findAll(e) {
    return this.entitiesService.findAll(this.structuresId, e);
  }
  findById(e) {
    return this.entitiesService.findById(this.structuresId, e);
  }
  findByIds(e) {
    return this.entitiesService.findByIds(this.structuresId, e);
  }
  namedQuery(e, t) {
    return this.entitiesService.namedQuery(this.structuresId, e, t);
  }
  namedQueryPage(e, t, i) {
    return this.entitiesService.namedQueryPage(this.structuresId, e, t, i);
  }
  async save(e) {
    const t = await this.beforeSaveOrUpdate(e);
    return this.entitiesService.save(this.structuresId, t);
  }
  search(e, t) {
    return this.entitiesService.search(this.structuresId, e, t);
  }
  async update(e) {
    const t = await this.beforeSaveOrUpdate(e);
    return this.entitiesService.update(this.structuresId, t);
  }
  async beforeBulkSaveOrUpdate(e) {
    return Promise.resolve(e);
  }
  async beforeSaveOrUpdate(e) {
    return Promise.resolve(e);
  }
}
class g extends v {
  constructor() {
    super(o.serviceProxy("org.kinotic.structures.api.services.NamedQueriesService"));
  }
}
class E extends v {
  constructor() {
    super(o.serviceProxy("org.kinotic.structures.api.services.NamespaceService"));
  }
  createNamespaceIfNotExist(e, t) {
    return this.serviceProxy.invoke("createNamespaceIfNotExist", [e, t]);
  }
}
class k extends v {
  constructor() {
    super(o.serviceProxy("org.kinotic.structures.api.services.StructureService"));
  }
  findAllPublishedForNamespace(e, t) {
    return this.serviceProxy.invoke("findAllPublishedForNamespace", [e, t]);
  }
  countForNamespace(e) {
    return this.serviceProxy.invoke("countForNamespace", [e]);
  }
  publish(e) {
    return this.serviceProxy.invoke("publish", [e]);
  }
  unPublish(e) {
    return this.serviceProxy.invoke("unPublish", [e]);
  }
}
const Q = new E(), B = new k(), b = new _(), w = new g();
var y;
((r) => {
  function e() {
    return Q;
  }
  r.getNamespaceService = e;
  function t() {
    return B;
  }
  r.getStructureService = t;
  function i() {
    return b;
  }
  r.getEntitiesService = i;
  function n() {
    return w;
  }
  r.getNamedQueriesService = n;
  function c(a, d) {
    return new P(a, d);
  }
  r.createEntityService = c;
})(y || (y = {}));
var p = /* @__PURE__ */ ((r) => (r[r.DOUBLE = 0] = "DOUBLE", r[r.FLOAT = 1] = "FLOAT", r[r.INT = 2] = "INT", r[r.LONG = 3] = "LONG", r[r.SHORT = 4] = "SHORT", r))(p || {}), A = /* @__PURE__ */ ((r) => (r.Entity = "__structures-entity__", r.Id = "__structures-id__", r.AutoGeneratedId = "__structures-auto-generated-id__", r.Flattened = "__structures-flattened__", r.Nested = "__structures-nested__", r.Text = "__structures-text__", r.NotNull = "__structures-notnull__", r.Precision = "__structures-precision__", r.Discriminator = "__structures-discriminator__", r.Query = "__structures-query__", r))(A || {});
class T {
  constructor(e) {
    s(this, "multiTenancyType");
    this.multiTenancyType = e;
  }
}
function X(r = l.NONE) {
  return function(e) {
    Reflect.defineMetadata("__structures-entity__", new T(r), e);
  };
}
function Y(r, e) {
  Reflect.defineMetadata("__structures-id__", {}, r, e);
}
function Z(r, e) {
  Reflect.defineMetadata("__structures-auto-generated-id__", {}, r, e);
}
function $(r, e) {
  Reflect.defineMetadata("__structures-flattened__", {}, r, e);
}
function ee(r, e) {
  Reflect.defineMetadata("__structures-nested__", {}, r, e);
}
function te(r, e) {
  Reflect.defineMetadata("__structures-text__", {}, r, e);
}
function re(r, e) {
  Reflect.defineMetadata("__structures-notnull__", {}, r, e);
}
function se(r) {
  return function(e, t, i) {
    return Reflect.defineMetadata("__structures-query__", r, e, t), i;
  };
}
class O {
  constructor(e) {
    s(this, "precisionType");
    this.precisionType = e;
  }
}
function ie(r = p.INT) {
  return function(e, t) {
    Reflect.defineMetadata("__structures-precision__", new O(r), e, t);
  };
}
class R {
  constructor(e) {
    s(this, "propertyName");
    this.propertyName = e;
  }
}
function ne(r) {
  return function(e, t) {
    Reflect.defineMetadata("__structures-discriminator__", new R(r), e, t);
  };
}
export {
  Z as AutoGeneratedId,
  q as AutoGeneratedIdDecorator,
  ne as Discriminator,
  R as DiscriminatorConfig,
  H as DiscriminatorDecorator,
  _ as EntitiesService,
  N as EntitiesServiceSingleton,
  X as Entity,
  T as EntityConfig,
  V as EntityDecorator,
  P as EntityService,
  $ as Flattened,
  J as FlattenedDecorator,
  Y as Id,
  j as IdDecorator,
  l as MultiTenancyType,
  M as NamedQueriesDefinition,
  g as NamedQueriesService,
  L as Namespace,
  E as NamespaceService,
  ee as Nested,
  z as NestedDecorator,
  re as NotNull,
  ie as Precision,
  O as PrecisionConfig,
  se as Query,
  K as QueryDecorator,
  G as Structure,
  k as StructureService,
  y as Structures,
  A as StructuresDecorator,
  te as Text,
  W as TextDecorator
};
//# sourceMappingURL=structures-api.js.map
