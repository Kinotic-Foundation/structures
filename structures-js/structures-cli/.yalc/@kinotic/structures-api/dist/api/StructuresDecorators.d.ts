import { PrecisionType } from './idl/decorators/PrecisionType';
import { MultiTenancyType } from './idl/decorators/MultiTenancyType';

export declare enum StructuresDecorator {
    Entity = "__structures-entity__",
    Id = "__structures-id__",
    AutoGeneratedId = "__structures-auto-generated-id__",
    Flattened = "__structures-flattened__",
    Nested = "__structures-nested__",
    Text = "__structures-text__",
    NotNull = "__structures-notnull__",
    Precision = "__structures-precision__",
    Discriminator = "__structures-discriminator__",
    Query = "__structures-query__"
}
export declare class EntityConfig {
    multiTenancyType: MultiTenancyType;
    constructor(multiTenancyType: MultiTenancyType);
}
export declare function Entity(multiTenancyType?: MultiTenancyType): (constructor: Function) => void;
export declare function Id(target: any, propertyKey: string): void;
export declare function AutoGeneratedId(target: any, propertyKey: string): void;
export declare function Flattened(target: any, propertyKey: string): void;
export declare function Nested(target: any, propertyKey: string): void;
export declare function Text(target: any, propertyKey: string): void;
export declare function NotNull(target: any, propertyKey: string): void;
export declare function Query(statements: string): (target: any, key: string, descriptor: PropertyDescriptor) => PropertyDescriptor;
export declare class PrecisionConfig {
    precisionType: PrecisionType;
    constructor(precisionType: PrecisionType);
}
export declare function Precision(precisionType?: PrecisionType): (target: any, propertyKey: string) => void;
export declare class DiscriminatorConfig {
    propertyName: string;
    constructor(propertyName: string);
}
export declare function Discriminator(propertyName: string): (target: any, propertyKey: string) => void;
