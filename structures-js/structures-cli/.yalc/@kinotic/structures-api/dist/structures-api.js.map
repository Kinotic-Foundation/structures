{"version":3,"file":"structures-api.js","sources":["../src/api/domain/NamedQueriesDefinition.ts","../src/api/domain/Namespace.ts","../src/api/domain/Structure.ts","../src/api/idl/decorators/AutoGeneratedIdDecorator.ts","../src/api/idl/decorators/DiscriminatorDecorator.ts","../src/api/idl/decorators/MultiTenancyType.ts","../src/api/idl/decorators/EntityDecorator.ts","../src/api/idl/decorators/FlattenedDecorator.ts","../src/api/idl/decorators/IdDecorator.ts","../src/api/idl/decorators/NestedDecorator.ts","../src/api/idl/decorators/QueryDecorator.ts","../src/api/idl/decorators/TextDecorator.ts","../src/internal/api/domain/FindAllIterablePage.ts","../src/internal/api/domain/NamedQueryIterablePage.ts","../src/internal/api/domain/SearchIterablePage.ts","../src/api/IEntitiesService.ts","../src/api/IEntityService.ts","../src/api/INamedQueriesService.ts","../src/api/INamespaceService.ts","../src/api/IStructureService.ts","../src/api/Structures.ts","../src/api/idl/decorators/PrecisionType.ts","../src/api/StructuresDecorators.ts"],"sourcesContent":["import { Identifiable } from '@kinotic/continuum-client'\nimport {FunctionDefinition} from '@kinotic/continuum-idl'\n\n/**\n * Provides Metadata that represents Named Queries for a Namespace\n */\nexport class NamedQueriesDefinition implements Identifiable<string> {\n    public id: string\n    public namespace: string\n    public structure: string\n    public namedQueries: FunctionDefinition[]\n\n    constructor(id: string,\n                namespace: string,\n                serviceName: string,\n                namedQueries: FunctionDefinition[]) {\n        this.id = id;\n        this.namespace = namespace;\n        this.structure = serviceName;\n        this.namedQueries = namedQueries;\n    }\n\n}\n\n","import { Identifiable } from '@kinotic/continuum-client'\nexport class Namespace implements Identifiable<string> {\n    public id: string\n    public description: string\n    public updated: number\n\n    constructor(id: string, description: string, updated: number) {\n        this.id = id;\n        this.description = description;\n        this.updated = updated;\n    }\n\n}\n","import {ObjectC3Type} from '@kinotic/continuum-idl'\nimport {Identifiable} from '@kinotic/continuum-client'\n\nexport class Structure implements Identifiable<string> {\n    public id!: string | null\n    public namespace!: string\n    public name!: string\n    public entityDefinition!: ObjectC3Type\n    public description?: string | null\n    public created!: number // do not ever set, system managed\n    public updated!: number // do not ever set, system managed\n    public published!: boolean // do not ever set, system managed\n    public publishedTimestamp!: number // do not ever set, system managed\n\n    constructor(namespace: string,\n                name: string,\n                entityDefinition: ObjectC3Type,\n                description?: string | null) {\n        this.namespace = namespace\n        this.name = name\n        this.entityDefinition = entityDefinition\n        this.description = description\n    }\n\n}\n","import {C3Decorator} from '@kinotic/continuum-idl'\n\n/**\n * Signifies the ID field of an entity, The ID will be auto generated.\n */\nexport class AutoGeneratedIdDecorator extends C3Decorator {\n\n    constructor() {\n        super()\n        this.type = 'AutoGeneratedId'\n    }\n}\n","import {C3Decorator} from '@kinotic/continuum-idl'\n\n/**\n * Specifies the discriminator field for polymorphic entities.\n */\nexport class DiscriminatorDecorator extends C3Decorator {\n    public propertyName?: string\n    constructor() {\n        super()\n        this.type = 'Discriminator'\n    }\n\n    public withPropertyName(propertyName: string): DiscriminatorDecorator {\n        this.propertyName = propertyName\n        return this\n    }\n}\n","/**\n * MultiTenancyType is an enum that represents the different types of multi-tenancy that can be applied to an entity.\n */\nexport enum MultiTenancyType {\n    /**\n     * Default, no multi-tenancy\n     */\n    NONE,\n\n    /**\n     * Shared table multi-tenancy\n     */\n    SHARED\n    // We will support these in the future\n//    ISOLATED,\n//    HYBRID\n}\n","import {C3Decorator} from '@kinotic/continuum-idl'\nimport {MultiTenancyType} from '@/api/idl/decorators/MultiTenancyType'\n\n/**\n * Signifies that a class is an entity.\n */\nexport class EntityDecorator extends C3Decorator {\n    public multiTenancyType: MultiTenancyType = MultiTenancyType.NONE\n    constructor() {\n        super()\n        this.type = 'Entity'\n    }\n\n    public withMultiTenancyType(type: MultiTenancyType): EntityDecorator {\n        this.multiTenancyType = type\n        return this\n    }\n}\n","import {C3Decorator} from '@kinotic/continuum-idl'\n\n/**\n * Signifies that an object should be stored as a flattened json.\n * This will not be indexed, and thus not searchable.\n * Created by NavÃ­d Mitchell ðŸ¤ª on 4/23/23.\n */\nexport class FlattenedDecorator extends C3Decorator {\n\n    constructor() {\n        super()\n        this.type = 'Flattened'\n    }\n}\n","import {C3Decorator} from '@kinotic/continuum-idl'\n\n/**\n * Signifies the ID field of an entity, The value must be a string and provided by the client.\n */\nexport class IdDecorator extends C3Decorator {\n\n    constructor() {\n        super()\n        this.type = 'Id'\n    }\n}\n","import {C3Decorator} from '@kinotic/continuum-idl'\n\n/**\n * Marks a property as a nested object.\n * Created by NavÃ­d Mitchell ðŸ¤ª on 4/23/23.\n */\nexport class NestedDecorator extends C3Decorator {\n\n    constructor() {\n        super()\n        this.type = 'Nested'\n    }\n}\n","import {C3Decorator} from '@kinotic/continuum-idl'\n\nexport class QueryDecorator extends C3Decorator {\n\n    public statements: string\n\n    constructor(statements: string) {\n        super()\n        this.type = 'Query'\n        this.statements = statements\n    }\n}\n","import {C3Decorator} from '@kinotic/continuum-idl'\n\n/**\n * Signals that a property is a text field, and will be full text indexed.\n * Created by NavÃ­d Mitchell ðŸ¤ª on 4/23/23.\n */\nexport class TextDecorator extends C3Decorator {\n\n    constructor() {\n        super()\n        this.type = 'Text'\n    }\n}\n","import {EntitiesService} from '@/api/IEntitiesService'\nimport {AbstractIterablePage, Page, Pageable, IterablePage} from '@kinotic/continuum-client'\n\n/**\n * {@link IterablePage} for use when finding all\n */\nexport class FindAllIterablePage<T> extends AbstractIterablePage<T> {\n\n    private readonly structureId: string\n    private readonly entitiesService: EntitiesService\n\n    constructor(entitiesService: EntitiesService,\n                pageable: Pageable,\n                page: Page<T>,\n                structureId: string) {\n        super(pageable, page)\n        this.entitiesService = entitiesService\n        this.structureId = structureId\n    }\n\n    protected findNext(pageable: Pageable): Promise<Page<T>> {\n        return this.entitiesService.findAllSinglePage(this.structureId, pageable)\n    }\n\n}\n","import {QueryParameter} from '@/api/domain/QueryParameter.js'\nimport {EntitiesService} from '@/api/IEntitiesService'\nimport {AbstractIterablePage, Page, Pageable, IterablePage} from '@kinotic/continuum-client'\n\n/**\n * {@link IterablePage} for use when searching\n */\nexport class NamedQueryIterablePage<T> extends AbstractIterablePage<T> {\n\n    private readonly parameters: QueryParameter[]\n    private readonly queryName: string\n    private readonly structureId: string\n    private readonly entitiesService: EntitiesService\n\n    constructor(entitiesService: EntitiesService,\n                pageable: Pageable,\n                page: Page<T>,\n                parameters: QueryParameter[],\n                queryName: string,\n                structureId: string) {\n        super(pageable, page)\n        this.entitiesService = entitiesService\n        this.parameters = parameters\n        this.queryName = queryName\n        this.structureId = structureId\n    }\n\n    protected findNext(pageable: Pageable): Promise<Page<T>> {\n        return this.entitiesService.namedQuerySinglePage(this.structureId, this.queryName, this.parameters, pageable)\n    }\n\n}\n","import {EntitiesService} from '@/api/IEntitiesService'\nimport {AbstractIterablePage, Page, Pageable, IterablePage} from '@kinotic/continuum-client'\n\n/**\n * {@link IterablePage} for use when searching\n */\nexport class SearchIterablePage<T> extends AbstractIterablePage<T> {\n\n    private readonly searchText: string\n    private readonly structureId: string\n    private readonly entitiesService: EntitiesService\n\n    constructor(entitiesService: EntitiesService, pageable: Pageable,\n                page: Page<T>,\n                searchText: string,\n                structureId: string) {\n        super(pageable, page)\n        this.entitiesService = entitiesService\n        this.searchText = searchText\n        this.structureId = structureId\n    }\n\n    protected findNext(pageable: Pageable): Promise<Page<T>> {\n        return this.entitiesService.searchSinglePage(this.structureId, this.searchText, pageable)\n    }\n\n}\n","import {QueryParameter} from '@/api/domain/QueryParameter.js'\nimport {FindAllIterablePage} from '@/internal/api/domain/FindAllIterablePage'\nimport {NamedQueryIterablePage} from '@/internal/api/domain/NamedQueryIterablePage.js'\nimport {SearchIterablePage} from '@/internal/api/domain/SearchIterablePage'\nimport {\n    Continuum,\n    IServiceProxy,\n    Page,\n    Pageable,\n    IterablePage,\n    IServiceRegistry\n} from '@kinotic/continuum-client'\n\nexport interface IEntitiesService {\n\n    /**\n     * Saves all given entities.\n     * @param structureId the id of the structure to save the entities for\n     * @param entities all the entities to save\n     * @return Promise that will complete when all entities have been saved\n     */\n    bulkSave<T>(structureId: string, entities: T[]): Promise<void>\n\n    /**\n     * Updates all given entities.\n     * @param structureId the id of the structure to update the entities for\n     * @param entities all the entities to save\n     * @return Promise that will complete when all entities have been saved\n     */\n    bulkUpdate<T>(structureId: string, entities: T[]): Promise<void>\n\n    /**\n     * Returns the number of entities available.\n     * @param structureId the id of the structure to count\n     * @return {@link Promise} emitting the number of entities.\n     */\n    count(structureId: string): Promise<number>\n\n    /**\n     * Returns the number of entities available for the given query.\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param query       the query used to limit result\n     * @return Promise    emitting the number of entities\n     */\n    countByQuery(structureId: string, query: string): Promise<number>\n\n    /**\n     * Deletes the entity with the given id.\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param id          must not be {@literal null}\n     * @return {@link Promise} emitting when delete is complete\n     * @throws IllegalArgumentException in case the given {@literal id} is {@literal null}\n     */\n    deleteById(structureId: string, id: string): Promise<void>\n\n    /**\n     * Deletes the entity with the given id.\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param query      the query used to filter records to delete, must not be {@literal null}\n     * @return Promise signaling when operation has completed\n     * @throws Error in case the given {@literal query} is {@literal null}\n     */\n    deleteByQuery(structureId: string, query: string): Promise<void>\n\n    /**\n     * Returns a {@link IterablePage} of entities meeting the paging restriction provided in the {@link Pageable} object.\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param pageable    the page settings to be used\n     * @return a page of entities\n     */\n    findAll<T>(structureId: string, pageable: Pageable): Promise<IterablePage<T>>\n\n    /**\n     * Returns a single {@link Page} of entities meeting the paging restriction provided in the {@link Pageable} object.\n     * @param structureId\n     * @param pageable\n     */\n    findAllSinglePage<T>(structureId: string, pageable: Pageable): Promise<Page<T>>\n\n    /**\n     * Retrieves an entity by its id.\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param id          must not be {@literal null}\n     * @return {@link Promise} with the entity with the given id or {@link Promise} emitting null if none found\n     * @throws IllegalArgumentException in case the given {@literal id} is {@literal null}\n     */\n    findById<T>(structureId: string, id: string): Promise<T>\n\n    /**\n     * Retrieves a list of entities by their id.\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param ids      must not be {@literal null}\n     * @return Promise emitting the entities with the given ids or Promise emitting null if none found\n     * @throws Error in case the given {@literal ids} is {@literal null}\n     */\n    findByIds<T>(structureId: string, ids: string[]): Promise<T[]>\n\n    /**\n     * Executes a named query.\n     * @param structureId the id of the structure that this named query is defined for\n     * @param queryName the name of the function that defines the query\n     * @param parameters to pass to the query\n     * @returns Promise with the result of the query\n     */\n    namedQuery<T>(structureId: string, queryName: string, parameters: QueryParameter[]): Promise<T>\n\n    /**\n     * Executes a named query and returns a Page of results.\n     * @param structureId the id of the structure that this named query is defined for\n     * @param queryName the name of the function that defines the query\n     * @param parameters to pass to the query\n     * @param pageable the page settings to be used\n     * @returns Promise with the result of the query\n     */\n    namedQueryPage<T>(structureId: string, queryName: string, parameters: QueryParameter[], pageable: Pageable): Promise<IterablePage<T>>\n\n    /**\n     * Saves a given entity. Use the returned instance for further operations as the save operation might have changed the\n     * entity instance completely.\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param entity      must not be {@literal null}\n     * @return {@link Promise} emitting the saved entity\n     * @throws IllegalArgumentException in case the given {@literal entity} is {@literal null}\n     */\n    save<T>(structureId: string, entity: T): Promise<T>\n\n    /**\n     * Returns a {@link IterablePage} of entities matching the search text and paging restriction provided in the {@link Pageable} object.\n     * <p>\n     * You can find more information about the search syntax <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax\">here</a>\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param searchText  the text to search for entities for\n     * @param pageable    the page settings to be used\n     * @return a page of entities\n     */\n    search<T>(structureId: string, searchText: string, pageable: Pageable): Promise<IterablePage<T>>\n\n    /**\n     * Returns a single {@link Page} of entities matching the search text and paging restriction provided in the {@link Pageable} object.\n     * <p>\n     * You can find more information about the search syntax <a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html#query-string-syntax\">here</a>\n     *\n     * @param structureId the id of the structure to save the entity for\n     * @param searchText  the text to search for entities for\n     * @param pageable    the page settings to be used\n     * @return a page of entities\n     */\n    searchSinglePage<T>(structureId: string, searchText: string, pageable: Pageable): Promise<Page<T>>\n\n    /**\n     * Updates a given entity. This will only override the fields that are present in the given entity.\n     * If any fields are not present in the given entity data they will not be changed.\n     * If the entity does not exist it will be created.\n     * Use the returned instance for further operations as the save operation might have changed the entity instance.\n     *\n     * @param structureId the id of the structure to update the entity for\n     * @param entity      must not be {@literal null}\n     * @return Promise emitting the saved entity\n     * @throws Error in case the given {@literal entity} is {@literal null}\n     */\n    update<T>(structureId: string, entity: T): Promise<T>\n\n}\n\nexport class EntitiesService implements IEntitiesService {\n\n    protected serviceProxy: IServiceProxy\n\n     constructor(serviceRegistry?: IServiceRegistry) {\n        const service = 'org.kinotic.structures.api.services.JsonEntitiesService'\n        this.serviceProxy = serviceRegistry?.serviceProxy(service) || Continuum.serviceProxy(service)\n    }\n\n    public bulkSave<T>(structureId: string, entities: T[]): Promise<void>{\n        return this.serviceProxy.invoke('bulkSave', [structureId, entities])\n    }\n\n    public bulkUpdate<T>(structureId: string, entities: T[]): Promise<void>{\n        return this.serviceProxy.invoke('bulkUpdate', [structureId, entities])\n    }\n\n    public count(structureId: string): Promise<number> {\n        return this.serviceProxy.invoke('count', [structureId])\n    }\n\n    public countByQuery(structureId: string, query: string): Promise<number> {\n        return this.serviceProxy.invoke('countByQuery', [structureId, query])\n    }\n\n    public deleteById(structureId: string, id: string): Promise<void> {\n        return this.serviceProxy.invoke('deleteById', [structureId, id])\n    }\n\n    public deleteByQuery(structureId: string, query: string): Promise<void> {\n        return this.serviceProxy.invoke('deleteByQuery', [structureId, query])\n    }\n\n    public async findAll<T>(structureId: string, pageable: Pageable): Promise<IterablePage<T>> {\n        const page: Page<T> = await this.findAllSinglePage(structureId, pageable)\n        return new FindAllIterablePage(this, pageable, page, structureId)\n    }\n\n    public async findAllSinglePage<T>(structureId: string, pageable: Pageable): Promise<Page<T>> {\n        return this.serviceProxy.invoke('findAll', [structureId, pageable])\n    }\n\n    public findById<T>(structureId: string, id: string): Promise<T> {\n        return this.serviceProxy.invoke('findById', [structureId, id])\n    }\n\n    public findByIds<T>(structureId: string, ids: string[]): Promise<T[]> {\n        return this.serviceProxy.invoke('findByIds', [structureId, ids])\n    }\n\n    public namedQuery<T>(structureId: string, queryName: string, parameters: QueryParameter[]): Promise<T> {\n        return this.serviceProxy.invoke('namedQuery', [structureId, queryName, parameters])\n    }\n\n    public async namedQueryPage<T>(structureId: string, queryName: string, parameters: QueryParameter[], pageable: Pageable): Promise<IterablePage<T>> {\n        const page: Page<T> = await this.namedQuerySinglePage(structureId, queryName, parameters, pageable)\n        return new NamedQueryIterablePage(this, pageable, page, parameters, queryName, structureId)\n    }\n\n    public namedQuerySinglePage<T>(structureId: string, queryName: string, parameters: QueryParameter[], pageable: Pageable): Promise<Page<T>> {\n        return this.serviceProxy.invoke('namedQueryPage', [structureId, queryName, parameters, pageable])\n    }\n\n    public save<T>(structureId: string, entity: T): Promise<T> {\n        return this.serviceProxy.invoke('save', [structureId, entity])\n    }\n\n    public async search<T>(structureId: string, searchText: string, pageable: Pageable): Promise<IterablePage<T>> {\n        const page: Page<T> = await this.searchSinglePage(structureId, searchText, pageable)\n        return new SearchIterablePage(this, pageable, page, searchText, structureId)\n    }\n\n    public async searchSinglePage<T>(structureId: string, searchText: string, pageable: Pageable): Promise<Page<T>> {\n        return this.serviceProxy.invoke('search', [structureId, searchText, pageable])\n    }\n\n    public update<T>(structureId: string, entity: T): Promise<T>{\n        return this.serviceProxy.invoke('update', [structureId, entity])\n    }\n}\n\nexport const EntitiesServiceSingleton: IEntitiesService = new EntitiesService()\n","import {QueryParameter} from '@/api/domain/QueryParameter.js'\nimport {Page, Pageable, IterablePage} from '@kinotic/continuum-client'\nimport {EntitiesServiceSingleton, IEntitiesService} from '@/api/IEntitiesService'\n\n/**\n * This is the base interface for all entity services.\n * It provides the basic CRUD operations for entities.\n */\nexport interface IEntityService<T> {\n\n    /**\n     * The namespace of the structure this service is for\n     */\n    structureNamespace: string\n\n    /**\n     * The name of the structure this service is for\n     */\n    structureName: string\n\n    /**\n     * Saves all given entities.\n     * @param entities all the entities to save\n     * @return Promise that will complete when all entities have been saved\n     */\n    bulkSave(entities: T[]): Promise<void>;\n\n    /**\n     * Updates all given entities.\n     * @param entities all the entities to save\n     * @return Promise that will complete when all entities have been saved\n     */\n    bulkUpdate(entities: T[]): Promise<void>;\n\n    /**\n     * Returns the number of entities available.\n     *\n     * @return Promise emitting the number of entities\n     */\n    count(): Promise<number>;\n\n    /**\n     * Returns the number of entities available for the given query.\n     *\n     * @param query       the query used to limit result\n     * @return Promise    emitting the number of entities\n     */\n    countByQuery(query: string): Promise<number>;\n\n    /**\n     * Deletes the entity with the given id.\n     *\n     * @param id      must not be {@literal null}\n     * @return Promise signaling when operation has completed\n     * @throws Error in case the given {@literal id} is {@literal null}\n     */\n    deleteById(id: string): Promise<void>;\n\n    /**\n     * Deletes the entity with the given id.\n     *\n     * @param query      the query used to filter records to delete, must not be {@literal null}\n     * @return Promise signaling when operation has completed\n     * @throws Error in case the given {@literal query} is {@literal null}\n     */\n    deleteByQuery(query: string): Promise<void>;\n\n    /**\n     * Returns a {@link Page} of entities meeting the paging restriction provided in the {@link Pageable} object.\n     *\n     * @param pageable the page settings to be used\n     * @return a page of entities\n     */\n    findAll(pageable: Pageable): Promise<IterablePage<T>>;\n\n    /**\n     * Retrieves an entity by its id.\n     *\n     * @param id      must not be {@literal null}\n     * @return Promise emitting the entity with the given id or Promise emitting null if none found\n     * @throws Error in case the given {@literal id} is {@literal null}\n     */\n    findById(id: string): Promise<T>;\n\n    /**\n     * Retrieves a list of entities by their id.\n     *\n     * @param ids      must not be {@literal null}\n     * @return Promise emitting the entities with the given ids or Promise emitting null if none found\n     * @throws Error in case the given {@literal ids} is {@literal null}\n     */\n    findByIds(ids: string[]): Promise<T[]>;\n\n    /**\n     * Executes a named query.\n     * @param queryName the name of the function that defines the query\n     * @param parameters to pass to the query\n     * @returns Promise with the result of the query\n     */\n    namedQuery<U>(queryName: string, parameters: QueryParameter[]): Promise<U>\n\n    /**\n     * Executes a named query and returns a Page of results.\n     * @param queryName the name of the function that defines the query\n     * @param parameters to pass to the query\n     * @param pageable the page settings to be used\n     * @returns Promise with the result of the query\n     */\n    namedQueryPage<U>(queryName: string, parameters: QueryParameter[], pageable: Pageable): Promise<IterablePage<U>>\n\n    /**\n     * Saves a given entity. This will override all data if there is an existing entity with the same id.\n     * Use the returned instance for further operations as the save operation might have changed the entity instance.\n     *\n     * @param entity  must not be {@literal null}\n     * @return Promise emitting the saved entity\n     * @throws Error in case the given {@literal entity} is {@literal null}\n     */\n    save(entity: T): Promise<T>;\n\n    /**\n     * Returns a {@link Page} of entities matching the search text and paging restriction provided in the {@link Pageable} object.\n     *\n     * @param searchText the text to search for entities for\n     * @param pageable   the page settings to be used\n     * @return a page of entities\n     */\n    search(searchText: string, pageable: Pageable): Promise<IterablePage<T>>;\n\n    /**\n     * Updates a given entity. This will only override the fields that are present in the given entity.\n     * If any fields are not present in the given entity data they will not be changed.\n     * If the entity does not exist it will be created.\n     * Use the returned instance for further operations as the save operation might have changed the entity instance.\n     *\n     * @param entity      must not be {@literal null}\n     * @return Promise emitting the saved entity\n     * @throws Error in case the given {@literal entity} is {@literal null}\n     */\n    update(entity: T): Promise<T>;\n\n}\n\n/**\n * This is the base class for all entity services.\n * It provides the basic CRUD operations for entities.\n */\nexport class EntityService<T> implements IEntityService<T>{\n\n    public structureNamespace: string\n    public structureName: string\n\n    private entitiesService: IEntitiesService\n    private readonly structuresId: string\n\n    public constructor(structureNamespace: string,\n                       structureName: string,\n                       entitiesService?: IEntitiesService) {\n        this.structureNamespace = structureNamespace\n        this.structureName = structureName\n        this.structuresId = (structureNamespace + '.' + structureName).toLowerCase()\n        this.entitiesService = entitiesService || EntitiesServiceSingleton\n    }\n\n    public async bulkSave(entities: T[]): Promise<void>{\n        const entitiesToSave = await this.beforeBulkSaveOrUpdate(entities)\n        return this.entitiesService.bulkSave(this.structuresId, entitiesToSave)\n    }\n\n    public async bulkUpdate(entities: T[]): Promise<void>{\n        const entitiesToSave = await this.beforeBulkSaveOrUpdate(entities)\n        return this.entitiesService.bulkUpdate(this.structuresId, entitiesToSave)\n    }\n\n    public count(): Promise<number>{\n        return this.entitiesService.count(this.structuresId)\n    }\n\n    public countByQuery(query: string): Promise<number>{\n        return this.entitiesService.countByQuery(this.structuresId, query)\n    }\n\n    public deleteById(id: string): Promise<void>{\n        return this.entitiesService.deleteById(this.structuresId, id)\n    }\n\n    public deleteByQuery(query: string): Promise<void>{\n        return this.entitiesService.deleteByQuery(this.structuresId, query)\n    }\n\n    public findAll(pageable: Pageable): Promise<IterablePage<T>>{\n        return this.entitiesService.findAll(this.structuresId, pageable)\n    }\n\n    public findById(id: string): Promise<T>{\n        return this.entitiesService.findById(this.structuresId, id)\n    }\n\n    public findByIds(ids: string[]): Promise<T[]>{\n        return this.entitiesService.findByIds(this.structuresId, ids)\n    }\n\n    public namedQuery<U>(queryName: string, parameters: QueryParameter[]): Promise<U> {\n        return this.entitiesService.namedQuery(this.structuresId, queryName, parameters)\n    }\n\n    public namedQueryPage<U>(queryName: string, parameters: QueryParameter[], pageable: Pageable): Promise<IterablePage<U>> {\n        return this.entitiesService.namedQueryPage(this.structuresId, queryName, parameters, pageable)\n    }\n\n    public async save(entity: T): Promise<T>{\n        const entityToSave = await this.beforeSaveOrUpdate(entity)\n        return this.entitiesService.save(this.structuresId, entityToSave)\n    }\n\n    public search(searchText: string, pageable: Pageable): Promise<IterablePage<T>>{\n        return this.entitiesService.search(this.structuresId, searchText, pageable)\n    }\n\n    public async update(entity: T): Promise<T>{\n        const entityToSave = await this.beforeSaveOrUpdate(entity)\n        return this.entitiesService.update(this.structuresId, entityToSave)\n    }\n\n    protected async beforeBulkSaveOrUpdate(entities: T[]): Promise<T[]>{\n        return Promise.resolve(entities)\n    }\n\n    protected async beforeSaveOrUpdate(entity: T): Promise<T>{\n        return Promise.resolve(entity)\n    }\n}\n","import {NamedQueriesDefinition} from '@/api/domain/NamedQueriesDefinition.js'\nimport {Continuum, CrudServiceProxy, ICrudServiceProxy,} from '@kinotic/continuum-client'\n\nexport interface INamedQueriesService extends ICrudServiceProxy<NamedQueriesDefinition> {\n\n}\n\nexport class NamedQueriesService extends CrudServiceProxy<NamedQueriesDefinition> implements INamedQueriesService{\n\n    constructor() {\n        super(Continuum.serviceProxy('org.kinotic.structures.api.services.NamedQueriesService'))\n    }\n\n}\n","import {Continuum, CrudServiceProxy, ICrudServiceProxy,} from '@kinotic/continuum-client'\nimport {Namespace} from '@/api/domain/Namespace.js'\n\n\nexport interface INamespaceService extends ICrudServiceProxy<Namespace> {\n\n    /**\n     * Creates a new namespace if it does not already exist.\n     * @param id the id of the namespace to create\n     * @param description the description of the namespace to create\n     * @return {@link Promise} emitting the created namespace\n     */\n    createNamespaceIfNotExist(id: string, description: string): Promise<Namespace>\n\n}\n\nexport class NamespaceService extends CrudServiceProxy<Namespace> implements INamespaceService{\n\n    constructor() {\n        super(Continuum.serviceProxy('org.kinotic.structures.api.services.NamespaceService'))\n    }\n\n    public createNamespaceIfNotExist(id: string, description: string): Promise<Namespace> {\n        return this.serviceProxy.invoke('createNamespaceIfNotExist', [id, description])\n    }\n\n}\n","import {Continuum, CrudServiceProxy, ICrudServiceProxy, Page, Pageable} from '@kinotic/continuum-client'\nimport {Structure} from '@/api/domain/Structure.js'\n\n\nexport interface IStructureService extends ICrudServiceProxy<Structure> {\n\n    /**\n     * Finds all published structures for the given namespace.\n     * @param namespace the namespace to find structures for\n     * @param pageable the page to return\n     * @return a future that will complete with a page of structures\n     */\n    findAllPublishedForNamespace(namespace: string, pageable: Pageable): Promise<Page<Structure>>\n\n    /**\n     * Counts all structures for the given namespace.\n     * @param namespace the namespace to find structures for\n     * @return a future that will complete with a page of structures\n     */\n    countForNamespace(namespace: string): Promise<number>\n\n    /**\n     * Publishes the structure with the given id.\n     * This will make the structure available for use to read and write items for.\n     * @param structureId the id of the structure to publish\n     * @return a future that will complete when the structure has been published\n     */\n    publish(structureId: string): Promise<void>\n\n    /**\n     * Un-publish the structure with the given id.\n     * @param structureId the id of the structure to un-publish\n     * @return a future that will complete when the structure has been unpublished\n     */\n    unPublish(structureId: string): Promise<void>\n}\n\nexport class StructureService extends CrudServiceProxy<Structure> implements IStructureService{\n\n    constructor() {\n        super(Continuum.serviceProxy('org.kinotic.structures.api.services.StructureService'))\n    }\n\n    public findAllPublishedForNamespace(namespace: string, pageable: Pageable): Promise<Page<Structure>> {\n        return this.serviceProxy.invoke('findAllPublishedForNamespace', [namespace, pageable])\n    }\n\n    public countForNamespace(namespace: string): Promise<number> {\n        return this.serviceProxy.invoke('countForNamespace', [namespace])\n    }\n\n    public publish(structureId: string): Promise<void> {\n        return this.serviceProxy.invoke('publish', [structureId])\n    }\n\n    public unPublish(structureId: string): Promise<void> {\n        return this.serviceProxy.invoke('unPublish', [structureId])\n    }\n}\n","import {INamedQueriesService, NamedQueriesService} from '@/api/INamedQueriesService.js'\nimport {IEntitiesService, EntitiesService} from './IEntitiesService.js'\nimport {IStructureService, StructureService} from './IStructureService.js'\nimport {INamespaceService, NamespaceService} from '@/api/INamespaceService.js'\nimport {EntityService, IEntityService} from '@/api/IEntityService.js'\n\nconst NAMESPACE_SERVICE: INamespaceService = new NamespaceService()\nconst STRUCTURE_SERVICE: IStructureService = new StructureService()\nconst ENTITIES_SERVICE: IEntitiesService = new EntitiesService()\nconst NAMED_QUERIES_SERVICE: INamedQueriesService = new NamedQueriesService()\n\nexport namespace Structures {\n\n    export function getNamespaceService(): INamespaceService {\n        return NAMESPACE_SERVICE\n    }\n\n    export function getStructureService(): IStructureService {\n        return STRUCTURE_SERVICE\n    }\n\n    export function getEntitiesService(): IEntitiesService {\n        return ENTITIES_SERVICE\n    }\n\n    export function getNamedQueriesService(): INamedQueriesService {\n        return NAMED_QUERIES_SERVICE\n    }\n\n    export function createEntityService(structureNamespace: string, structureName: string): IEntityService<any> {\n        return new EntityService(structureNamespace, structureName)\n    }\n\n}\n","/**\n * The {@link PrecisionType} enum is used to define the precision of a numeric field in the Continuum IDL.\n */\nexport enum PrecisionType {\n    /**\n     * A double-precision 64-bit IEEE 754 floating point number, restricted to finite values.\n     */\n    DOUBLE,\n    /**\n     * A single-precision 32-bit IEEE 754 floating point number, restricted to finite values.\n     */\n    FLOAT,\n    /**\n     * A signed 32-bit integer with a minimum value of -231 and a maximum value of 231-1.\n     */\n    INT,\n    /**\n     * A signed 64-bit integer with a minimum value of -263 and a maximum value of 263-1.\n     */\n    LONG,\n    /**\n     * A signed 16-bit integer with a minimum value of -32,768 and a maximum value of 32,767.\n     */\n    SHORT\n}\n","import 'reflect-metadata'\nimport {MultiTenancyType} from '@/api/idl/decorators/MultiTenancyType'\nimport {PrecisionType} from '@/api/idl/decorators/PrecisionType'\n\nexport enum StructuresDecorator {\n    Entity = '__structures-entity__',\n    Id = '__structures-id__',\n    AutoGeneratedId = '__structures-auto-generated-id__',\n    Flattened = '__structures-flattened__',\n    Nested = '__structures-nested__',\n    Text = '__structures-text__',\n    NotNull = '__structures-notnull__',\n    Precision = '__structures-precision__',\n    Discriminator = '__structures-discriminator__',\n    Query = '__structures-query__'\n}\n\nexport class EntityConfig {\n    public multiTenancyType: MultiTenancyType\n\n    constructor(multiTenancyType: MultiTenancyType) {\n        this.multiTenancyType = multiTenancyType\n    }\n}\n\nexport function Entity(multiTenancyType: MultiTenancyType = MultiTenancyType.NONE) {\n    return function (constructor: Function) {\n        Reflect.defineMetadata(StructuresDecorator.Entity, new EntityConfig(multiTenancyType), constructor)\n    }\n}\n\nexport function Id(target: any, propertyKey: string) {\n    Reflect.defineMetadata(StructuresDecorator.Id, {}, target, propertyKey)\n}\n\nexport function AutoGeneratedId(target: any, propertyKey: string) {\n    Reflect.defineMetadata(StructuresDecorator.AutoGeneratedId, {}, target, propertyKey)\n\n}\n\nexport function Flattened(target: any, propertyKey: string) {\n    Reflect.defineMetadata(StructuresDecorator.Flattened, {}, target, propertyKey)\n}\n\nexport function Nested(target: any, propertyKey: string) {\n    Reflect.defineMetadata(StructuresDecorator.Nested, {}, target, propertyKey)\n}\n\nexport function Text(target: any, propertyKey: string) {\n    Reflect.defineMetadata(StructuresDecorator.Text, {}, target, propertyKey)\n}\n\nexport function NotNull(target: any, propertyKey: string) {\n    Reflect.defineMetadata(StructuresDecorator.NotNull, {}, target, propertyKey)\n}\n\nexport function Query(statements: string) {\n    return function (target: any, key: string, descriptor: PropertyDescriptor) {\n\n        Reflect.defineMetadata(StructuresDecorator.Query, statements, target, key)\n\n        /** Code below will be needed if we want the auto generated invocation logic to live in the base service class for the entity service **/\n        // const originalMethod = descriptor.value;\n        //\n        // // Access the super class and its method\n        // const superClass = Object.getPrototypeOf(target.constructor.prototype);\n        // const superMethod = superClass[key];\n        //\n        // descriptor.value = function (...args: any[]) {\n        //     // Check if the super method exists\n        //     if (typeof superMethod === 'function') {\n        //         return superMethod.apply(this, args);\n        //     } else {\n        //         return originalMethod.apply(this, args);\n        //     }\n        // };\n\n        return descriptor;\n    }\n}\n\nexport class PrecisionConfig {\n    public precisionType: PrecisionType\n\n    constructor(precisionType: PrecisionType) {\n        this.precisionType = precisionType\n    }\n}\n\nexport function Precision(precisionType: PrecisionType = PrecisionType.INT){\n    return function(target: any, propertyKey: string) {\n        Reflect.defineMetadata(StructuresDecorator.Precision, new PrecisionConfig(precisionType), target, propertyKey)\n    }\n}\n\nexport class DiscriminatorConfig {\n    public propertyName: string\n\n    constructor(propertyName: string) {\n        this.propertyName = propertyName\n    }\n}\n\nexport function Discriminator(propertyName: string){\n    return function(target: any, propertyKey: string) {\n        Reflect.defineMetadata(StructuresDecorator.Discriminator, new DiscriminatorConfig(propertyName), target, propertyKey)\n    }\n}\n"],"names":["NamedQueriesDefinition","id","namespace","serviceName","namedQueries","__publicField","Namespace","description","updated","Structure","name","entityDefinition","AutoGeneratedIdDecorator","C3Decorator","DiscriminatorDecorator","propertyName","MultiTenancyType","MultiTenancyType2","EntityDecorator","type","FlattenedDecorator","IdDecorator","NestedDecorator","QueryDecorator","statements","TextDecorator","FindAllIterablePage","AbstractIterablePage","entitiesService","pageable","page","structureId","NamedQueryIterablePage","parameters","queryName","SearchIterablePage","searchText","EntitiesService","serviceRegistry","service","Continuum","entities","query","ids","entity","EntitiesServiceSingleton","EntityService","structureNamespace","structureName","entitiesToSave","entityToSave","NamedQueriesService","CrudServiceProxy","NamespaceService","StructureService","NAMESPACE_SERVICE","STRUCTURE_SERVICE","ENTITIES_SERVICE","NAMED_QUERIES_SERVICE","Structures","getNamespaceService","getStructureService","getEntitiesService","getNamedQueriesService","createEntityService","PrecisionType","PrecisionType2","StructuresDecorator","EntityConfig","multiTenancyType","Entity","constructor","Id","target","propertyKey","AutoGeneratedId","Flattened","Nested","Text","NotNull","Query","key","descriptor","PrecisionConfig","precisionType","Precision","DiscriminatorConfig","Discriminator"],"mappings":"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"}