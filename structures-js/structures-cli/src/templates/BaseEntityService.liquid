import { EntityService } from '@kinotic/structures-api'
{%- if defaultExport == true %}
import {{ entityName }} from '../{{ importPath }}'
{%- else %}
import { {{ exportName }} } from '../{{ importPath }}'
{%- endif %}

/**
 * Base Service for interacting with {{ entityName }} entities
 * This class was generated by the structures cli. And will be overwritten if the cli is run again.
 */
export class Base{{ entityName }}EntityService extends EntityService<{{ entityName }}> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true) {
    super('{{ entityNamespace }}', '{{ entityName }}')
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: {{ entityName }}): Promise<{{ entityName }}> {
    if (this.shouldValidate) {
      return this.validate(entity)
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: {{ entityName }}[]): Promise<{{ entityName }}[]> {
    if (this.shouldValidate) {
      const validatedEntities: {{ entityName }}[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: {{ entityName }}): {{ entityName }} {
    let ret
{{ validationLogic }}
    return ret
  }

}
