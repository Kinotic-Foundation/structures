import {Decorator} from 'ts-morph'
import {
  C3Decorator,
  EntityDecorator,
  IdDecorator,
  MultiTenancyType,
  FlattenedDecorator,
  TextDecorator,
  AutoGeneratedIdDecorator,
  NotNullDecorator
} from '@kinotic/continuum-idl'

export function tsDecoratorToC3Decorator(decorator: Decorator): C3Decorator{
  let ret: C3Decorator

  if(decorator.getName() === "Entity"){
    const entityDecorator = new EntityDecorator()
    if (decorator.getArguments().length == 1) {
      const argument = decorator.getArguments()[0]
      if (argument?.getText() == 'MultiTenancyType.SHARED') {
        entityDecorator.multiTenancyType = MultiTenancyType.SHARED
      } else if (argument?.getText() == 'MultiTenancyType.NONE') {
        entityDecorator.multiTenancyType = MultiTenancyType.NONE
      } else {
        throw new Error(`Unsupported MultiTenancyType ${argument?.getText()}`)
      }
    }
    ret = entityDecorator
  }else if(decorator.getName() === "Id") {
    ret = new IdDecorator()
  }else if(decorator.getName() === "AutoGeneratedId") {
    ret = new AutoGeneratedIdDecorator()
  }else if(decorator.getName() === "Flattened") {
    ret = new FlattenedDecorator()
  }else if(decorator.getName() === "Nested") {
    ret = new FlattenedDecorator()
  }else if(decorator.getName() === "Text") {
    ret = new TextDecorator()
  }else if(decorator.getName() === "NotNull") {
    ret = new NotNullDecorator()
  }else{
    throw new Error(`Unsupported decorator ${decorator.getName()}`)
  }

  return ret
}
