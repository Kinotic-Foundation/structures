import { EntityService, IEntitiesService } from '@kinotic/structures-api'
import { Person } from '../../domain/Person.js'
import {Cat,
Dog} from '../../domain/Pet.js'


/**
 * Base Service for interacting with Person entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BasePersonEntityService extends EntityService<Person> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('openapi.admin', 'Person', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: Person): Promise<Person> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: Person[]): Promise<Person[]> {
    if (this.shouldValidate) {
      const validatedEntities: Person[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: Person): Person {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.firstName = entity.firstName
      ret.lastName = entity.lastName
      ret.age = entity.age
      if (entity.address) {
        ret.address = (ret.address ? ret.address : {})
        ret.address.street = entity.address.street
        ret.address.city = entity.address.city
        ret.address.state = entity.address.state
        ret.address.zip = entity.address.zip
      }
      let entityMyPetI1 = entity.myPet as Cat
      let retMyPetO1 = ret.myPet
      if (entityMyPetI1) {
        retMyPetO1 = (retMyPetO1 ? retMyPetO1 : {})
        retMyPetO1.type = entityMyPetI1.type
        retMyPetO1.name = entityMyPetI1.name
        retMyPetO1.age = entityMyPetI1.age
      }
      ret.myPet = retMyPetO1
      let entityMyPetI2 = entity.myPet as Dog
      let retMyPetO2 = ret.myPet
      if (entityMyPetI2) {
        retMyPetO2 = (retMyPetO2 ? retMyPetO2 : {})
        retMyPetO2.type = entityMyPetI2.type
        retMyPetO2.name = entityMyPetI2.name
        retMyPetO2.age = entityMyPetI2.age
      }
      ret.myPet = retMyPetO2
    }

    return ret
  }

}
