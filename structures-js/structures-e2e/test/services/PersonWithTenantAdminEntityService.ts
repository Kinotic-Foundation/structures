import { IAdminEntitiesService, Query, TenantSelection } from '@kinotic/structures-api'
import { BasePersonWithTenantAdminEntityService } from './generated/BasePersonWithTenantAdminEntityService.js'

export class CountResult {
  public count!: number
}
/**
 * Admin Service for interacting with PersonWithTenant entities
 * This class was generated by the structures cli
 */
export class PersonWithTenantAdminEntityService extends BasePersonWithTenantAdminEntityService {

  constructor(adminEntitiesService?: IAdminEntitiesService) {
    super(adminEntitiesService)
  }

  /**
   * Get a count of all people in a given city
   * @param city The city name to get the count for
   */
  @Query('select count(firstName) as count from "struct_PLACEHOLDER" where lastName = ?')
  public async adminCountByLastName(lastName: string, tenantSelection: TenantSelection): Promise<CountResult[]> {
    /** Autogenerated code, changes will be overwritten. **/
    const parameters = [
      {key: 'lastName', value: lastName},
      {key: 'tenantSelection', value: tenantSelection}
    ]
    return this.namedQuery('adminCountByLastName', parameters)
  }

}
