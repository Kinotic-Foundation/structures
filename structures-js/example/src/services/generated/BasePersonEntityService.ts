import { EntityService, IEntitiesService } from '@kinotic/structures-api'
import { Person } from '../../domain/Person.js'
import {Dog,
Cat} from '../../domain/Pet.js'


/**
 * Base Service for interacting with Person entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BasePersonEntityService extends EntityService<Person> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('example', 'Person', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: Person): Promise<Person> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: Person[]): Promise<Person[]> {
    if (this.shouldValidate) {
      const validatedEntities: Person[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: Person): Person {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.firstName = entity.firstName
      ret.lastName = entity.lastName
      ret.bio = entity.bio
      ret.age = entity.age
      ret.privateNotes = entity.privateNotes
      if (entity.addresses) {
        ret.addresses = []
        for (let entityAddressesItem of entity.addresses) {
          let retAddressesValue: any
          if (entityAddressesItem) {
            retAddressesValue = (retAddressesValue ? retAddressesValue : {})
            retAddressesValue.street = entityAddressesItem.street
            retAddressesValue.city = entityAddressesItem.city
            retAddressesValue.state = entityAddressesItem.state
            retAddressesValue.zipCode = entityAddressesItem.zipCode
            retAddressesValue.additionalInfo = entityAddressesItem.additionalInfo
          }
          ret.addresses.push(retAddressesValue)
        }
      }
      let entityPetI1 = entity.pet as Dog
      let retPetO1 = ret.pet
      if (entityPetI1) {
        retPetO1 = (retPetO1 ? retPetO1 : {})
        retPetO1.breed = entityPetI1.breed
        retPetO1.isGoodBoy = entityPetI1.isGoodBoy
        retPetO1.name = entityPetI1.name
        retPetO1.type = entityPetI1.type
      }
      ret.pet = retPetO1
      let entityPetI2 = entity.pet as Cat
      let retPetO2 = ret.pet
      if (entityPetI2) {
        retPetO2 = (retPetO2 ? retPetO2 : {})
        retPetO2.lives = entityPetI2.lives
        retPetO2.isIndoor = entityPetI2.isIndoor
        retPetO2.name = entityPetI2.name
        retPetO2.type = entityPetI2.type
      }
      ret.pet = retPetO2
      ret.version = entity.version
    }

    return ret
  }

}
