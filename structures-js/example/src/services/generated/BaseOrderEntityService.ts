import { EntityService, type IEntitiesService } from '@kinotic/structures-api'
import { Order } from '../../domain/Order.js'


/**
 * Base Service for interacting with Order entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BaseOrderEntityService extends EntityService<Order> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('example', 'Order', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: Order): Promise<Order> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: Order[]): Promise<Order[]> {
    if (this.shouldValidate) {
      const validatedEntities: Order[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: Order): Order {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.orderNumber = entity.orderNumber
      ret.status = entity.status
      ret.customerId = entity.customerId
      ret.totalAmount = entity.totalAmount
      ret.orderDate = entity.orderDate
    }

    return ret
  }

}
