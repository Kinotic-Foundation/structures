import {MultiTenancyType} from '@/api/idl/decorators/MultiTenancyType'

export function Entity(multiTenancyType: MultiTenancyType = MultiTenancyType.NONE) {
    return function (constructor: Function) {
        constructor.prototype._multiTenancyType = multiTenancyType
    }
}

export function Id(_: any, context: any) {
    if(context.kind === "field") {

    }
}

export function AutoGeneratedId(_: any, context: any) {
    if(context.kind === "field") {

    }
}

export function Flattened(_: any, context: any) {
    if(context.kind === "field") {

    }
}

export function Nested(_: any, context: any) {
    if(context.kind === "field") {

    }
}

export function Text(_: any, context: any) {
    if(context.kind === "field") {

    }
}

export function NotNull(_: any, context: any) {
    if(context.kind === "field") {

    }
}

export enum PrecisionType {
    /**
     * A double-precision 64-bit IEEE 754 floating point number, restricted to finite values.
     */
    DOUBLE,
    /**
     * A single-precision 32-bit IEEE 754 floating point number, restricted to finite values.
     */
    FLOAT,
    /**
     * A signed 32-bit integer with a minimum value of -231 and a maximum value of 231-1.
     */
    INT,
    /**
     * A signed 64-bit integer with a minimum value of -263 and a maximum value of 263-1.
     */
    LONG,
    /**
     * A signed 16-bit integer with a minimum value of -32,768 and a maximum value of 32,767.
     */
    SHORT
}

// @ts-ignore
export function Precision(precisionType: PrecisionType = PrecisionType.INT){
    return function (_: any, context: any) {
        if(context.kind === "field") {

        }
    }
}
