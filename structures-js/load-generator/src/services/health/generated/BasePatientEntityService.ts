import { EntityService, IEntitiesService } from '@kinotic/structures-api'
import { Patient } from '../../../entity/domain/health/Patient.js'


/**
 * Base Service for interacting with Patient entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BasePatientEntityService extends EntityService<Patient> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('healthcare', 'Patient', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: Patient): Promise<Patient> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: Patient[]): Promise<Patient[]> {
    if (this.shouldValidate) {
      const validatedEntities: Patient[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: Patient): Patient {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.firstName = entity.firstName
      ret.lastName = entity.lastName
      ret.dateOfBirth = entity.dateOfBirth
      ret.gender = entity.gender
      ret.mrn = entity.mrn
      if (entity.addresses) {
        ret.addresses = []
        for (let entityAddressesItem of entity.addresses) {
          let retAddressesValue: any
          if (entityAddressesItem) {
            retAddressesValue = (retAddressesValue ? retAddressesValue : {})
            retAddressesValue.streetAddress = entityAddressesItem.streetAddress
            retAddressesValue.city = entityAddressesItem.city
            retAddressesValue.state = entityAddressesItem.state
            retAddressesValue.postalCode = entityAddressesItem.postalCode
            retAddressesValue.country = entityAddressesItem.country
            retAddressesValue.isPrimary = entityAddressesItem.isPrimary
          }
          ret.addresses.push(retAddressesValue)
        }
      }
      if (entity.contactInfo) {
        ret.contactInfo = (ret.contactInfo ? ret.contactInfo : {})
        ret.contactInfo.email = entity.contactInfo.email
        ret.contactInfo.phoneNumber = entity.contactInfo.phoneNumber
        ret.contactInfo.emergencyContactName = entity.contactInfo.emergencyContactName
        ret.contactInfo.emergencyContactPhone = entity.contactInfo.emergencyContactPhone
        ret.contactInfo.emergencyContactRelationship = entity.contactInfo.emergencyContactRelationship
        ret.contactInfo.preferredContactMethod = entity.contactInfo.preferredContactMethod
        ret.contactInfo.isPrimary = entity.contactInfo.isPrimary
      }
      if (entity.insuranceInfo) {
        ret.insuranceInfo = (ret.insuranceInfo ? ret.insuranceInfo : {})
        ret.insuranceInfo.providerName = entity.insuranceInfo.providerName
        ret.insuranceInfo.policyNumber = entity.insuranceInfo.policyNumber
        ret.insuranceInfo.groupNumber = entity.insuranceInfo.groupNumber
        ret.insuranceInfo.coverageStartDate = entity.insuranceInfo.coverageStartDate
        ret.insuranceInfo.coverageEndDate = entity.insuranceInfo.coverageEndDate
        ret.insuranceInfo.isPrimary = entity.insuranceInfo.isPrimary
        ret.insuranceInfo.copayAmount = entity.insuranceInfo.copayAmount
        ret.insuranceInfo.deductibleAmount = entity.insuranceInfo.deductibleAmount
        ret.insuranceInfo.outOfPocketMaximum = entity.insuranceInfo.outOfPocketMaximum
        ret.insuranceInfo.isActive = entity.insuranceInfo.isActive
      }
      if (entity.medicalHistory) {
        ret.medicalHistory = []
        for (let entityMedicalHistoryItem of entity.medicalHistory) {
          let retMedicalHistoryValue: any
          retMedicalHistoryValue = entityMedicalHistoryItem
          ret.medicalHistory.push(retMedicalHistoryValue)
        }
      }
      ret.bloodType = entity.bloodType
      if (entity.allergies) {
        ret.allergies = []
        for (let entityAllergiesItem of entity.allergies) {
          let retAllergiesValue: any
          retAllergiesValue = entityAllergiesItem
          ret.allergies.push(retAllergiesValue)
        }
      }
      ret.isActive = entity.isActive
      if (entity.emergencyContact) {
        ret.emergencyContact = (ret.emergencyContact ? ret.emergencyContact : {})
        ret.emergencyContact.email = entity.emergencyContact.email
        ret.emergencyContact.phoneNumber = entity.emergencyContact.phoneNumber
        ret.emergencyContact.emergencyContactName = entity.emergencyContact.emergencyContactName
        ret.emergencyContact.emergencyContactPhone = entity.emergencyContact.emergencyContactPhone
        ret.emergencyContact.emergencyContactRelationship = entity.emergencyContact.emergencyContactRelationship
        ret.emergencyContact.preferredContactMethod = entity.emergencyContact.preferredContactMethod
        ret.emergencyContact.isPrimary = entity.emergencyContact.isPrimary
      }
      ret.createdAt = entity.createdAt
      ret.updatedAt = entity.updatedAt
    }

    return ret
  }

}
