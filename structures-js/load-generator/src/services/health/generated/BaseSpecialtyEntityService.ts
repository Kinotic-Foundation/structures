import { EntityService, IEntitiesService } from '@kinotic/structures-api'
import { Specialty } from '../../../entity/domain/health/Specialty.js'


/**
 * Base Service for interacting with Specialty entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BaseSpecialtyEntityService extends EntityService<Specialty> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('healthcare', 'Specialty', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: Specialty): Promise<Specialty> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: Specialty[]): Promise<Specialty[]> {
    if (this.shouldValidate) {
      const validatedEntities: Specialty[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: Specialty): Specialty {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.name = entity.name
      ret.description = entity.description
      ret.certificationRequired = entity.certificationRequired
      ret.yearsOfTraining = entity.yearsOfTraining
      ret.isActive = entity.isActive
    }

    return ret
  }

}
