import { EntityService, IEntitiesService } from '@kinotic/structures-api'
import { Provider } from '../../../entity/domain/health/Provider.js'


/**
 * Base Service for interacting with Provider entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BaseProviderEntityService extends EntityService<Provider> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('healthcare', 'Provider', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: Provider): Promise<Provider> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: Provider[]): Promise<Provider[]> {
    if (this.shouldValidate) {
      const validatedEntities: Provider[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: Provider): Provider {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.firstName = entity.firstName
      ret.lastName = entity.lastName
      ret.title = entity.title
      if (entity.specialties) {
        ret.specialties = []
        for (let entitySpecialtiesItem of entity.specialties) {
          let retSpecialtiesValue: any
          if (entitySpecialtiesItem) {
            retSpecialtiesValue = (retSpecialtiesValue ? retSpecialtiesValue : {})
            retSpecialtiesValue.name = entitySpecialtiesItem.name
            retSpecialtiesValue.description = entitySpecialtiesItem.description
            retSpecialtiesValue.certificationRequired = entitySpecialtiesItem.certificationRequired
            retSpecialtiesValue.yearsOfTraining = entitySpecialtiesItem.yearsOfTraining
            retSpecialtiesValue.isActive = entitySpecialtiesItem.isActive
          }
          ret.specialties.push(retSpecialtiesValue)
        }
      }
      if (entity.qualifications) {
        ret.qualifications = []
        for (let entityQualificationsItem of entity.qualifications) {
          let retQualificationsValue: any
          if (entityQualificationsItem) {
            retQualificationsValue = (retQualificationsValue ? retQualificationsValue : {})
            retQualificationsValue.degree = entityQualificationsItem.degree
            retQualificationsValue.institution = entityQualificationsItem.institution
            retQualificationsValue.certification = entityQualificationsItem.certification
            retQualificationsValue.yearObtained = entityQualificationsItem.yearObtained
            retQualificationsValue.isVerified = entityQualificationsItem.isVerified
            retQualificationsValue.verificationDate = entityQualificationsItem.verificationDate
            retQualificationsValue.expiryDate = entityQualificationsItem.expiryDate
            retQualificationsValue.isActive = entityQualificationsItem.isActive
          }
          ret.qualifications.push(retQualificationsValue)
        }
      }
      if (entity.addresses) {
        ret.addresses = []
        for (let entityAddressesItem of entity.addresses) {
          let retAddressesValue: any
          if (entityAddressesItem) {
            retAddressesValue = (retAddressesValue ? retAddressesValue : {})
            retAddressesValue.streetAddress = entityAddressesItem.streetAddress
            retAddressesValue.city = entityAddressesItem.city
            retAddressesValue.state = entityAddressesItem.state
            retAddressesValue.postalCode = entityAddressesItem.postalCode
            retAddressesValue.country = entityAddressesItem.country
            retAddressesValue.isPrimary = entityAddressesItem.isPrimary
          }
          ret.addresses.push(retAddressesValue)
        }
      }
      if (entity.contactInfo) {
        ret.contactInfo = (ret.contactInfo ? ret.contactInfo : {})
        ret.contactInfo.email = entity.contactInfo.email
        ret.contactInfo.phoneNumber = entity.contactInfo.phoneNumber
        ret.contactInfo.emergencyContactName = entity.contactInfo.emergencyContactName
        ret.contactInfo.emergencyContactPhone = entity.contactInfo.emergencyContactPhone
        ret.contactInfo.emergencyContactRelationship = entity.contactInfo.emergencyContactRelationship
        ret.contactInfo.preferredContactMethod = entity.contactInfo.preferredContactMethod
        ret.contactInfo.isPrimary = entity.contactInfo.isPrimary
      }
      ret.licenseNumber = entity.licenseNumber
      ret.licenseExpiryDate = entity.licenseExpiryDate
      ret.isActive = entity.isActive
      ret.createdAt = entity.createdAt
      ret.updatedAt = entity.updatedAt
    }

    return ret
  }

}
