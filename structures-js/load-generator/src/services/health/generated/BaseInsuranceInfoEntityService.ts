import { EntityService, IEntitiesService } from '@kinotic/structures-api'
import { InsuranceInfo } from '../../../entity/domain/health/InsuranceInfo.js'


/**
 * Base Service for interacting with InsuranceInfo entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BaseInsuranceInfoEntityService extends EntityService<InsuranceInfo> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('healthcare', 'InsuranceInfo', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: InsuranceInfo): Promise<InsuranceInfo> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: InsuranceInfo[]): Promise<InsuranceInfo[]> {
    if (this.shouldValidate) {
      const validatedEntities: InsuranceInfo[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: InsuranceInfo): InsuranceInfo {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.providerName = entity.providerName
      ret.policyNumber = entity.policyNumber
      ret.groupNumber = entity.groupNumber
      ret.coverageStartDate = entity.coverageStartDate
      ret.coverageEndDate = entity.coverageEndDate
      ret.isPrimary = entity.isPrimary
      ret.copayAmount = entity.copayAmount
      ret.deductibleAmount = entity.deductibleAmount
      ret.outOfPocketMaximum = entity.outOfPocketMaximum
      ret.isActive = entity.isActive
    }

    return ret
  }

}
