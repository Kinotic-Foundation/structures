import { EntityService, IEntitiesService } from '@kinotic/structures-api'
import { Treatment } from '../../../entity/domain/health/Treatment.js'


/**
 * Base Service for interacting with Treatment entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BaseTreatmentEntityService extends EntityService<Treatment> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('healthcare', 'Treatment', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: Treatment): Promise<Treatment> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: Treatment[]): Promise<Treatment[]> {
    if (this.shouldValidate) {
      const validatedEntities: Treatment[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: Treatment): Treatment {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.patientId = entity.patientId
      ret.providerId = entity.providerId
      ret.diagnosisId = entity.diagnosisId
      ret.name = entity.name
      ret.description = entity.description
      ret.status = entity.status
      ret.startDate = entity.startDate
      ret.endDate = entity.endDate
      ret.frequency = entity.frequency
      ret.dosage = entity.dosage
      ret.notes = entity.notes
      ret.createdAt = entity.createdAt
      ret.updatedAt = entity.updatedAt
      if (entity.diagnoses) {
        ret.diagnoses = []
        for (let entityDiagnosesItem of entity.diagnoses) {
          let retDiagnosesValue: any
          if (entityDiagnosesItem) {
            retDiagnosesValue = (retDiagnosesValue ? retDiagnosesValue : {})
            retDiagnosesValue.id = entityDiagnosesItem.id
            retDiagnosesValue.patientId = entityDiagnosesItem.patientId
            retDiagnosesValue.providerId = entityDiagnosesItem.providerId
            retDiagnosesValue.condition = entityDiagnosesItem.condition
            retDiagnosesValue.description = entityDiagnosesItem.description
            retDiagnosesValue.status = entityDiagnosesItem.status
            retDiagnosesValue.diagnosisDate = entityDiagnosesItem.diagnosisDate
            retDiagnosesValue.severity = entityDiagnosesItem.severity
            retDiagnosesValue.notes = entityDiagnosesItem.notes
            retDiagnosesValue.createdAt = entityDiagnosesItem.createdAt
            retDiagnosesValue.updatedAt = entityDiagnosesItem.updatedAt
          }
          ret.diagnoses.push(retDiagnosesValue)
        }
      }
      if (entity.prescriptions) {
        ret.prescriptions = []
        for (let entityPrescriptionsItem of entity.prescriptions) {
          let retPrescriptionsValue: any
          if (entityPrescriptionsItem) {
            retPrescriptionsValue = (retPrescriptionsValue ? retPrescriptionsValue : {})
            retPrescriptionsValue.id = entityPrescriptionsItem.id
            retPrescriptionsValue.patientId = entityPrescriptionsItem.patientId
            retPrescriptionsValue.providerId = entityPrescriptionsItem.providerId
            retPrescriptionsValue.diagnosisId = entityPrescriptionsItem.diagnosisId
            retPrescriptionsValue.medicationName = entityPrescriptionsItem.medicationName
            retPrescriptionsValue.dosageForm = entityPrescriptionsItem.dosageForm
            retPrescriptionsValue.strength = entityPrescriptionsItem.strength
            retPrescriptionsValue.frequency = entityPrescriptionsItem.frequency
            retPrescriptionsValue.quantity = entityPrescriptionsItem.quantity
            retPrescriptionsValue.refillsRemaining = entityPrescriptionsItem.refillsRemaining
            retPrescriptionsValue.startDate = entityPrescriptionsItem.startDate
            retPrescriptionsValue.endDate = entityPrescriptionsItem.endDate
            retPrescriptionsValue.instructions = entityPrescriptionsItem.instructions
            retPrescriptionsValue.pharmacyName = entityPrescriptionsItem.pharmacyName
            retPrescriptionsValue.pharmacyPhone = entityPrescriptionsItem.pharmacyPhone
            retPrescriptionsValue.isActive = entityPrescriptionsItem.isActive
            retPrescriptionsValue.notes = entityPrescriptionsItem.notes
            retPrescriptionsValue.createdAt = entityPrescriptionsItem.createdAt
            retPrescriptionsValue.updatedAt = entityPrescriptionsItem.updatedAt
            retPrescriptionsValue.status = entityPrescriptionsItem.status
          }
          ret.prescriptions.push(retPrescriptionsValue)
        }
      }
      ret.isActive = entity.isActive
    }

    return ret
  }

}
