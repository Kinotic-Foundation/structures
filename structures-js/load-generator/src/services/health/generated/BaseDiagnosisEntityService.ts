import { EntityService, IEntitiesService } from '@kinotic/structures-api'
import { Diagnosis } from '../../../entity/domain/health/Diagnosis.js'


/**
 * Base Service for interacting with Diagnosis entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BaseDiagnosisEntityService extends EntityService<Diagnosis> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('healthcare', 'Diagnosis', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: Diagnosis): Promise<Diagnosis> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: Diagnosis[]): Promise<Diagnosis[]> {
    if (this.shouldValidate) {
      const validatedEntities: Diagnosis[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: Diagnosis): Diagnosis {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.patientId = entity.patientId
      ret.providerId = entity.providerId
      ret.condition = entity.condition
      ret.description = entity.description
      ret.status = entity.status
      ret.diagnosisDate = entity.diagnosisDate
      ret.severity = entity.severity
      ret.notes = entity.notes
      ret.createdAt = entity.createdAt
      ret.updatedAt = entity.updatedAt
    }

    return ret
  }

}
