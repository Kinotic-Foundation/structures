import { EntityService, IEntitiesService } from '@kinotic/structures-api'
import { Appointment } from '../../../entity/domain/health/Appointment.js'


/**
 * Base Service for interacting with Appointment entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BaseAppointmentEntityService extends EntityService<Appointment> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('healthcare', 'Appointment', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: Appointment): Promise<Appointment> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: Appointment[]): Promise<Appointment[]> {
    if (this.shouldValidate) {
      const validatedEntities: Appointment[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: Appointment): Appointment {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.patientId = entity.patientId
      ret.providerId = entity.providerId
      ret.type = entity.type
      ret.status = entity.status
      ret.startTime = entity.startTime
      ret.endTime = entity.endTime
      ret.duration = entity.duration
      ret.notes = entity.notes
      ret.isRecurring = entity.isRecurring
      ret.recurrencePattern = entity.recurrencePattern
      ret.createdAt = entity.createdAt
      ret.updatedAt = entity.updatedAt
      ret.treatmentId = entity.treatmentId
      ret.reason = entity.reason
      ret.isVirtual = entity.isVirtual
      ret.isActive = entity.isActive
    }

    return ret
  }

}
