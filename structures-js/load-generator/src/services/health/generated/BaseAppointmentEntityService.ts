import { EntityService, IEntitiesService } from '@kinotic/structures-api'
import { Appointment } from '../../../entity/domain/health/Appointment.js'


/**
 * Base Service for interacting with Appointment entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BaseAppointmentEntityService extends EntityService<Appointment> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('healthcare', 'Appointment', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: Appointment): Promise<Appointment> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: Appointment[]): Promise<Appointment[]> {
    if (this.shouldValidate) {
      const validatedEntities: Appointment[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: Appointment): Appointment {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.patientId = entity.patientId
      ret.providerId = entity.providerId
      ret.type = entity.type
      ret.status = entity.status
      ret.startTime = entity.startTime
      ret.endTime = entity.endTime
      ret.duration = entity.duration
      ret.notes = entity.notes
      ret.isRecurring = entity.isRecurring
      ret.recurrencePattern = entity.recurrencePattern
      ret.createdAt = entity.createdAt
      ret.updatedAt = entity.updatedAt
      if (entity.patient) {
        ret.patient = (ret.patient ? ret.patient : {})
        ret.patient.id = entity.patient.id
        ret.patient.firstName = entity.patient.firstName
        ret.patient.lastName = entity.patient.lastName
        ret.patient.dateOfBirth = entity.patient.dateOfBirth
        ret.patient.gender = entity.patient.gender
        ret.patient.mrn = entity.patient.mrn
        if (entity.patient.addresses) {
          ret.patient.addresses = []
          for (let entityPatientAddressesItem of entity.patient.addresses) {
            let retPatientAddressesValue: any
            if (entityPatientAddressesItem) {
              retPatientAddressesValue = (retPatientAddressesValue ? retPatientAddressesValue : {})
              retPatientAddressesValue.streetAddress = entityPatientAddressesItem.streetAddress
              retPatientAddressesValue.city = entityPatientAddressesItem.city
              retPatientAddressesValue.state = entityPatientAddressesItem.state
              retPatientAddressesValue.postalCode = entityPatientAddressesItem.postalCode
              retPatientAddressesValue.country = entityPatientAddressesItem.country
              retPatientAddressesValue.isPrimary = entityPatientAddressesItem.isPrimary
            }
            ret.patient.addresses.push(retPatientAddressesValue)
          }
        }
        if (entity.patient.contactInfo) {
          ret.patient.contactInfo = (ret.patient.contactInfo ? ret.patient.contactInfo : {})
          ret.patient.contactInfo.email = entity.patient.contactInfo.email
          ret.patient.contactInfo.phoneNumber = entity.patient.contactInfo.phoneNumber
          ret.patient.contactInfo.emergencyContactName = entity.patient.contactInfo.emergencyContactName
          ret.patient.contactInfo.emergencyContactPhone = entity.patient.contactInfo.emergencyContactPhone
          ret.patient.contactInfo.emergencyContactRelationship = entity.patient.contactInfo.emergencyContactRelationship
          ret.patient.contactInfo.preferredContactMethod = entity.patient.contactInfo.preferredContactMethod
          ret.patient.contactInfo.isPrimary = entity.patient.contactInfo.isPrimary
        }
        if (entity.patient.insuranceInfo) {
          ret.patient.insuranceInfo = (ret.patient.insuranceInfo ? ret.patient.insuranceInfo : {})
          ret.patient.insuranceInfo.providerName = entity.patient.insuranceInfo.providerName
          ret.patient.insuranceInfo.policyNumber = entity.patient.insuranceInfo.policyNumber
          ret.patient.insuranceInfo.groupNumber = entity.patient.insuranceInfo.groupNumber
          ret.patient.insuranceInfo.coverageStartDate = entity.patient.insuranceInfo.coverageStartDate
          ret.patient.insuranceInfo.coverageEndDate = entity.patient.insuranceInfo.coverageEndDate
          ret.patient.insuranceInfo.isPrimary = entity.patient.insuranceInfo.isPrimary
          ret.patient.insuranceInfo.copayAmount = entity.patient.insuranceInfo.copayAmount
          ret.patient.insuranceInfo.deductibleAmount = entity.patient.insuranceInfo.deductibleAmount
          ret.patient.insuranceInfo.outOfPocketMaximum = entity.patient.insuranceInfo.outOfPocketMaximum
          ret.patient.insuranceInfo.isActive = entity.patient.insuranceInfo.isActive
        }
        if (entity.patient.treatments) {
          ret.patient.treatments = []
          for (let entityPatientTreatmentsItem of entity.patient.treatments) {
            let retPatientTreatmentsValue: any
            if (entityPatientTreatmentsItem) {
              retPatientTreatmentsValue = (retPatientTreatmentsValue ? retPatientTreatmentsValue : {})
              retPatientTreatmentsValue.id = entityPatientTreatmentsItem.id
              retPatientTreatmentsValue.patientId = entityPatientTreatmentsItem.patientId
              retPatientTreatmentsValue.providerId = entityPatientTreatmentsItem.providerId
              retPatientTreatmentsValue.diagnosisId = entityPatientTreatmentsItem.diagnosisId
              retPatientTreatmentsValue.name = entityPatientTreatmentsItem.name
              retPatientTreatmentsValue.description = entityPatientTreatmentsItem.description
              retPatientTreatmentsValue.status = entityPatientTreatmentsItem.status
              retPatientTreatmentsValue.startDate = entityPatientTreatmentsItem.startDate
              retPatientTreatmentsValue.endDate = entityPatientTreatmentsItem.endDate
              retPatientTreatmentsValue.frequency = entityPatientTreatmentsItem.frequency
              retPatientTreatmentsValue.dosage = entityPatientTreatmentsItem.dosage
              retPatientTreatmentsValue.notes = entityPatientTreatmentsItem.notes
              retPatientTreatmentsValue.createdAt = entityPatientTreatmentsItem.createdAt
              retPatientTreatmentsValue.updatedAt = entityPatientTreatmentsItem.updatedAt
              if (entityPatientTreatmentsItem.diagnoses) {
                retPatientTreatmentsValue.diagnoses = []
                for (let entityPatientTreatmentsItemDiagnosesItem of entityPatientTreatmentsItem.diagnoses) {
                  let retPatientTreatmentsValueDiagnosesValue: any
                  if (entityPatientTreatmentsItemDiagnosesItem) {
                    retPatientTreatmentsValueDiagnosesValue = (retPatientTreatmentsValueDiagnosesValue ? retPatientTreatmentsValueDiagnosesValue : {})
                    retPatientTreatmentsValueDiagnosesValue.id = entityPatientTreatmentsItemDiagnosesItem.id
                    retPatientTreatmentsValueDiagnosesValue.patientId = entityPatientTreatmentsItemDiagnosesItem.patientId
                    retPatientTreatmentsValueDiagnosesValue.providerId = entityPatientTreatmentsItemDiagnosesItem.providerId
                    retPatientTreatmentsValueDiagnosesValue.condition = entityPatientTreatmentsItemDiagnosesItem.condition
                    retPatientTreatmentsValueDiagnosesValue.description = entityPatientTreatmentsItemDiagnosesItem.description
                    retPatientTreatmentsValueDiagnosesValue.status = entityPatientTreatmentsItemDiagnosesItem.status
                    retPatientTreatmentsValueDiagnosesValue.diagnosisDate = entityPatientTreatmentsItemDiagnosesItem.diagnosisDate
                    retPatientTreatmentsValueDiagnosesValue.severity = entityPatientTreatmentsItemDiagnosesItem.severity
                    retPatientTreatmentsValueDiagnosesValue.notes = entityPatientTreatmentsItemDiagnosesItem.notes
                    retPatientTreatmentsValueDiagnosesValue.createdAt = entityPatientTreatmentsItemDiagnosesItem.createdAt
                    retPatientTreatmentsValueDiagnosesValue.updatedAt = entityPatientTreatmentsItemDiagnosesItem.updatedAt
                  }
                  retPatientTreatmentsValue.diagnoses.push(retPatientTreatmentsValueDiagnosesValue)
                }
              }
              if (entityPatientTreatmentsItem.prescriptions) {
                retPatientTreatmentsValue.prescriptions = []
                for (let entityPatientTreatmentsItemPrescriptionsItem of entityPatientTreatmentsItem.prescriptions) {
                  let retPatientTreatmentsValuePrescriptionsValue: any
                  if (entityPatientTreatmentsItemPrescriptionsItem) {
                    retPatientTreatmentsValuePrescriptionsValue = (retPatientTreatmentsValuePrescriptionsValue ? retPatientTreatmentsValuePrescriptionsValue : {})
                    retPatientTreatmentsValuePrescriptionsValue.id = entityPatientTreatmentsItemPrescriptionsItem.id
                    retPatientTreatmentsValuePrescriptionsValue.medicationName = entityPatientTreatmentsItemPrescriptionsItem.medicationName
                    retPatientTreatmentsValuePrescriptionsValue.dosage = entityPatientTreatmentsItemPrescriptionsItem.dosage
                    retPatientTreatmentsValuePrescriptionsValue.frequency = entityPatientTreatmentsItemPrescriptionsItem.frequency
                    retPatientTreatmentsValuePrescriptionsValue.startDate = entityPatientTreatmentsItemPrescriptionsItem.startDate
                    retPatientTreatmentsValuePrescriptionsValue.endDate = entityPatientTreatmentsItemPrescriptionsItem.endDate
                    retPatientTreatmentsValuePrescriptionsValue.refillsRemaining = entityPatientTreatmentsItemPrescriptionsItem.refillsRemaining
                    retPatientTreatmentsValuePrescriptionsValue.totalRefills = entityPatientTreatmentsItemPrescriptionsItem.totalRefills
                    retPatientTreatmentsValuePrescriptionsValue.status = entityPatientTreatmentsItemPrescriptionsItem.status
                    retPatientTreatmentsValuePrescriptionsValue.instructions = entityPatientTreatmentsItemPrescriptionsItem.instructions
                    retPatientTreatmentsValuePrescriptionsValue.pharmacy = entityPatientTreatmentsItemPrescriptionsItem.pharmacy
                    retPatientTreatmentsValuePrescriptionsValue.isActive = entityPatientTreatmentsItemPrescriptionsItem.isActive
                  }
                  retPatientTreatmentsValue.prescriptions.push(retPatientTreatmentsValuePrescriptionsValue)
                }
              }
              retPatientTreatmentsValue.isActive = entityPatientTreatmentsItem.isActive
            }
            ret.patient.treatments.push(retPatientTreatmentsValue)
          }
        }
        if (entity.patient.medicalHistory) {
          ret.patient.medicalHistory = []
          for (let entityPatientMedicalHistoryItem of entity.patient.medicalHistory) {
            let retPatientMedicalHistoryValue: any
            retPatientMedicalHistoryValue = entityPatientMedicalHistoryItem
            ret.patient.medicalHistory.push(retPatientMedicalHistoryValue)
          }
        }
        ret.patient.bloodType = entity.patient.bloodType
        if (entity.patient.allergies) {
          ret.patient.allergies = []
          for (let entityPatientAllergiesItem of entity.patient.allergies) {
            let retPatientAllergiesValue: any
            retPatientAllergiesValue = entityPatientAllergiesItem
            ret.patient.allergies.push(retPatientAllergiesValue)
          }
        }
        ret.patient.isActive = entity.patient.isActive
        if (entity.patient.emergencyContact) {
          ret.patient.emergencyContact = (ret.patient.emergencyContact ? ret.patient.emergencyContact : {})
          ret.patient.emergencyContact.email = entity.patient.emergencyContact.email
          ret.patient.emergencyContact.phoneNumber = entity.patient.emergencyContact.phoneNumber
          ret.patient.emergencyContact.emergencyContactName = entity.patient.emergencyContact.emergencyContactName
          ret.patient.emergencyContact.emergencyContactPhone = entity.patient.emergencyContact.emergencyContactPhone
          ret.patient.emergencyContact.emergencyContactRelationship = entity.patient.emergencyContact.emergencyContactRelationship
          ret.patient.emergencyContact.preferredContactMethod = entity.patient.emergencyContact.preferredContactMethod
          ret.patient.emergencyContact.isPrimary = entity.patient.emergencyContact.isPrimary
        }
        ret.patient.createdAt = entity.patient.createdAt
        ret.patient.updatedAt = entity.patient.updatedAt
      }
      if (entity.provider) {
        ret.provider = (ret.provider ? ret.provider : {})
        ret.provider.id = entity.provider.id
        ret.provider.firstName = entity.provider.firstName
        ret.provider.lastName = entity.provider.lastName
        ret.provider.title = entity.provider.title
        if (entity.provider.specialties) {
          ret.provider.specialties = []
          for (let entityProviderSpecialtiesItem of entity.provider.specialties) {
            let retProviderSpecialtiesValue: any
            if (entityProviderSpecialtiesItem) {
              retProviderSpecialtiesValue = (retProviderSpecialtiesValue ? retProviderSpecialtiesValue : {})
              retProviderSpecialtiesValue.name = entityProviderSpecialtiesItem.name
              retProviderSpecialtiesValue.description = entityProviderSpecialtiesItem.description
              retProviderSpecialtiesValue.certificationRequired = entityProviderSpecialtiesItem.certificationRequired
              retProviderSpecialtiesValue.yearsOfTraining = entityProviderSpecialtiesItem.yearsOfTraining
              retProviderSpecialtiesValue.isActive = entityProviderSpecialtiesItem.isActive
            }
            ret.provider.specialties.push(retProviderSpecialtiesValue)
          }
        }
        if (entity.provider.qualifications) {
          ret.provider.qualifications = []
          for (let entityProviderQualificationsItem of entity.provider.qualifications) {
            let retProviderQualificationsValue: any
            if (entityProviderQualificationsItem) {
              retProviderQualificationsValue = (retProviderQualificationsValue ? retProviderQualificationsValue : {})
              retProviderQualificationsValue.degree = entityProviderQualificationsItem.degree
              retProviderQualificationsValue.institution = entityProviderQualificationsItem.institution
              retProviderQualificationsValue.certification = entityProviderQualificationsItem.certification
              retProviderQualificationsValue.yearObtained = entityProviderQualificationsItem.yearObtained
              retProviderQualificationsValue.isVerified = entityProviderQualificationsItem.isVerified
              retProviderQualificationsValue.verificationDate = entityProviderQualificationsItem.verificationDate
              retProviderQualificationsValue.expiryDate = entityProviderQualificationsItem.expiryDate
              retProviderQualificationsValue.isActive = entityProviderQualificationsItem.isActive
            }
            ret.provider.qualifications.push(retProviderQualificationsValue)
          }
        }
        if (entity.provider.addresses) {
          ret.provider.addresses = []
          for (let entityProviderAddressesItem of entity.provider.addresses) {
            let retProviderAddressesValue: any
            if (entityProviderAddressesItem) {
              retProviderAddressesValue = (retProviderAddressesValue ? retProviderAddressesValue : {})
              retProviderAddressesValue.streetAddress = entityProviderAddressesItem.streetAddress
              retProviderAddressesValue.city = entityProviderAddressesItem.city
              retProviderAddressesValue.state = entityProviderAddressesItem.state
              retProviderAddressesValue.postalCode = entityProviderAddressesItem.postalCode
              retProviderAddressesValue.country = entityProviderAddressesItem.country
              retProviderAddressesValue.isPrimary = entityProviderAddressesItem.isPrimary
            }
            ret.provider.addresses.push(retProviderAddressesValue)
          }
        }
        if (entity.provider.contactInfo) {
          ret.provider.contactInfo = (ret.provider.contactInfo ? ret.provider.contactInfo : {})
          ret.provider.contactInfo.email = entity.provider.contactInfo.email
          ret.provider.contactInfo.phoneNumber = entity.provider.contactInfo.phoneNumber
          ret.provider.contactInfo.emergencyContactName = entity.provider.contactInfo.emergencyContactName
          ret.provider.contactInfo.emergencyContactPhone = entity.provider.contactInfo.emergencyContactPhone
          ret.provider.contactInfo.emergencyContactRelationship = entity.provider.contactInfo.emergencyContactRelationship
          ret.provider.contactInfo.preferredContactMethod = entity.provider.contactInfo.preferredContactMethod
          ret.provider.contactInfo.isPrimary = entity.provider.contactInfo.isPrimary
        }
        ret.provider.licenseNumber = entity.provider.licenseNumber
        ret.provider.licenseExpiryDate = entity.provider.licenseExpiryDate
        ret.provider.isActive = entity.provider.isActive
        ret.provider.createdAt = entity.provider.createdAt
        ret.provider.updatedAt = entity.provider.updatedAt
      }
      if (entity.treatment) {
        ret.treatment = (ret.treatment ? ret.treatment : {})
        ret.treatment.id = entity.treatment.id
        ret.treatment.patientId = entity.treatment.patientId
        ret.treatment.providerId = entity.treatment.providerId
        ret.treatment.diagnosisId = entity.treatment.diagnosisId
        ret.treatment.name = entity.treatment.name
        ret.treatment.description = entity.treatment.description
        ret.treatment.status = entity.treatment.status
        ret.treatment.startDate = entity.treatment.startDate
        ret.treatment.endDate = entity.treatment.endDate
        ret.treatment.frequency = entity.treatment.frequency
        ret.treatment.dosage = entity.treatment.dosage
        ret.treatment.notes = entity.treatment.notes
        ret.treatment.createdAt = entity.treatment.createdAt
        ret.treatment.updatedAt = entity.treatment.updatedAt
        if (entity.treatment.diagnoses) {
          ret.treatment.diagnoses = []
          for (let entityTreatmentDiagnosesItem of entity.treatment.diagnoses) {
            let retTreatmentDiagnosesValue: any
            if (entityTreatmentDiagnosesItem) {
              retTreatmentDiagnosesValue = (retTreatmentDiagnosesValue ? retTreatmentDiagnosesValue : {})
              retTreatmentDiagnosesValue.id = entityTreatmentDiagnosesItem.id
              retTreatmentDiagnosesValue.patientId = entityTreatmentDiagnosesItem.patientId
              retTreatmentDiagnosesValue.providerId = entityTreatmentDiagnosesItem.providerId
              retTreatmentDiagnosesValue.condition = entityTreatmentDiagnosesItem.condition
              retTreatmentDiagnosesValue.description = entityTreatmentDiagnosesItem.description
              retTreatmentDiagnosesValue.status = entityTreatmentDiagnosesItem.status
              retTreatmentDiagnosesValue.diagnosisDate = entityTreatmentDiagnosesItem.diagnosisDate
              retTreatmentDiagnosesValue.severity = entityTreatmentDiagnosesItem.severity
              retTreatmentDiagnosesValue.notes = entityTreatmentDiagnosesItem.notes
              retTreatmentDiagnosesValue.createdAt = entityTreatmentDiagnosesItem.createdAt
              retTreatmentDiagnosesValue.updatedAt = entityTreatmentDiagnosesItem.updatedAt
            }
            ret.treatment.diagnoses.push(retTreatmentDiagnosesValue)
          }
        }
        if (entity.treatment.prescriptions) {
          ret.treatment.prescriptions = []
          for (let entityTreatmentPrescriptionsItem of entity.treatment.prescriptions) {
            let retTreatmentPrescriptionsValue: any
            if (entityTreatmentPrescriptionsItem) {
              retTreatmentPrescriptionsValue = (retTreatmentPrescriptionsValue ? retTreatmentPrescriptionsValue : {})
              retTreatmentPrescriptionsValue.id = entityTreatmentPrescriptionsItem.id
              retTreatmentPrescriptionsValue.medicationName = entityTreatmentPrescriptionsItem.medicationName
              retTreatmentPrescriptionsValue.dosage = entityTreatmentPrescriptionsItem.dosage
              retTreatmentPrescriptionsValue.frequency = entityTreatmentPrescriptionsItem.frequency
              retTreatmentPrescriptionsValue.startDate = entityTreatmentPrescriptionsItem.startDate
              retTreatmentPrescriptionsValue.endDate = entityTreatmentPrescriptionsItem.endDate
              retTreatmentPrescriptionsValue.refillsRemaining = entityTreatmentPrescriptionsItem.refillsRemaining
              retTreatmentPrescriptionsValue.totalRefills = entityTreatmentPrescriptionsItem.totalRefills
              retTreatmentPrescriptionsValue.status = entityTreatmentPrescriptionsItem.status
              retTreatmentPrescriptionsValue.instructions = entityTreatmentPrescriptionsItem.instructions
              retTreatmentPrescriptionsValue.pharmacy = entityTreatmentPrescriptionsItem.pharmacy
              retTreatmentPrescriptionsValue.isActive = entityTreatmentPrescriptionsItem.isActive
            }
            ret.treatment.prescriptions.push(retTreatmentPrescriptionsValue)
          }
        }
        ret.treatment.isActive = entity.treatment.isActive
      }
      ret.reason = entity.reason
      ret.isVirtual = entity.isVirtual
      ret.isActive = entity.isActive
    }

    return ret
  }

}
