import { EntityService, IEntitiesService } from '@kinotic/structures-api'
import { Customer } from '../../../entity/domain/ecommerce/Customer.js'


/**
 * Base Service for interacting with Customer entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BaseCustomerEntityService extends EntityService<Customer> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('ecommerce', 'Customer', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: Customer): Promise<Customer> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: Customer[]): Promise<Customer[]> {
    if (this.shouldValidate) {
      const validatedEntities: Customer[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: Customer): Customer {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.email = entity.email
      ret.firstName = entity.firstName
      ret.lastName = entity.lastName
      ret.phoneNumber = entity.phoneNumber
      if (entity.shippingAddress) {
        ret.shippingAddress = (ret.shippingAddress ? ret.shippingAddress : {})
        ret.shippingAddress.street = entity.shippingAddress.street
        ret.shippingAddress.city = entity.shippingAddress.city
        ret.shippingAddress.state = entity.shippingAddress.state
        ret.shippingAddress.postalCode = entity.shippingAddress.postalCode
        ret.shippingAddress.country = entity.shippingAddress.country
      }
      if (entity.billingAddress) {
        ret.billingAddress = (ret.billingAddress ? ret.billingAddress : {})
        ret.billingAddress.street = entity.billingAddress.street
        ret.billingAddress.city = entity.billingAddress.city
        ret.billingAddress.state = entity.billingAddress.state
        ret.billingAddress.postalCode = entity.billingAddress.postalCode
        ret.billingAddress.country = entity.billingAddress.country
      }
      if (entity.paymentMethods) {
        ret.paymentMethods = []
        for (let entityPaymentMethodsItem of entity.paymentMethods) {
          let retPaymentMethodsValue: any
          if (entityPaymentMethodsItem) {
            retPaymentMethodsValue = (retPaymentMethodsValue ? retPaymentMethodsValue : {})
            retPaymentMethodsValue.type = entityPaymentMethodsItem.type
            retPaymentMethodsValue.lastFour = entityPaymentMethodsItem.lastFour
            retPaymentMethodsValue.expiryMonth = entityPaymentMethodsItem.expiryMonth
            retPaymentMethodsValue.expiryYear = entityPaymentMethodsItem.expiryYear
            retPaymentMethodsValue.isDefault = entityPaymentMethodsItem.isDefault
          }
          ret.paymentMethods.push(retPaymentMethodsValue)
        }
      }
      ret.totalSpent = entity.totalSpent
      ret.purchaseCount = entity.purchaseCount
      if (entity.favoriteCategories) {
        ret.favoriteCategories = []
        for (let entityFavoriteCategoriesItem of entity.favoriteCategories) {
          let retFavoriteCategoriesValue: any
          retFavoriteCategoriesValue = entityFavoriteCategoriesItem
          ret.favoriteCategories.push(retFavoriteCategoriesValue)
        }
      }
      ret.lastPurchaseDate = entity.lastPurchaseDate
      ret.createdAt = entity.createdAt
      ret.updatedAt = entity.updatedAt
    }

    return ret
  }

}
