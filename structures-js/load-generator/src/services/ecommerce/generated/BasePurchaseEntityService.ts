import { EntityService, IEntitiesService } from '@kinotic/structures-api'
import { Purchase } from '../../../entity/domain/ecommerce/Purchase.js'


/**
 * Base Service for interacting with Purchase entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BasePurchaseEntityService extends EntityService<Purchase> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('ecommerce', 'Purchase', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: Purchase): Promise<Purchase> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: Purchase[]): Promise<Purchase[]> {
    if (this.shouldValidate) {
      const validatedEntities: Purchase[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: Purchase): Purchase {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.purchaseNumber = entity.purchaseNumber
      ret.customerId = entity.customerId
      ret.status = entity.status
      if (entity.items) {
        ret.items = []
        for (let entityItemsItem of entity.items) {
          let retItemsValue: any
          if (entityItemsItem) {
            retItemsValue = (retItemsValue ? retItemsValue : {})
            retItemsValue.productId = entityItemsItem.productId
            retItemsValue.sku = entityItemsItem.sku
            retItemsValue.name = entityItemsItem.name
            retItemsValue.quantity = entityItemsItem.quantity
            retItemsValue.unitPrice = entityItemsItem.unitPrice
            retItemsValue.totalPrice = entityItemsItem.totalPrice
          }
          ret.items.push(retItemsValue)
        }
      }
      ret.subtotal = entity.subtotal
      ret.tax = entity.tax
      ret.shipping = entity.shipping
      ret.discount = entity.discount
      ret.total = entity.total
      if (entity.shippingAddress) {
        ret.shippingAddress = (ret.shippingAddress ? ret.shippingAddress : {})
        ret.shippingAddress.street = entity.shippingAddress.street
        ret.shippingAddress.city = entity.shippingAddress.city
        ret.shippingAddress.state = entity.shippingAddress.state
        ret.shippingAddress.postalCode = entity.shippingAddress.postalCode
        ret.shippingAddress.country = entity.shippingAddress.country
      }
      if (entity.billingAddress) {
        ret.billingAddress = (ret.billingAddress ? ret.billingAddress : {})
        ret.billingAddress.street = entity.billingAddress.street
        ret.billingAddress.city = entity.billingAddress.city
        ret.billingAddress.state = entity.billingAddress.state
        ret.billingAddress.postalCode = entity.billingAddress.postalCode
        ret.billingAddress.country = entity.billingAddress.country
      }
      if (entity.payment) {
        ret.payment = (ret.payment ? ret.payment : {})
        if (entity.payment.method) {
          ret.payment.method = (ret.payment.method ? ret.payment.method : {})
          ret.payment.method.type = entity.payment.method.type
          ret.payment.method.lastFour = entity.payment.method.lastFour
          ret.payment.method.expiryMonth = entity.payment.method.expiryMonth
          ret.payment.method.expiryYear = entity.payment.method.expiryYear
          ret.payment.method.isDefault = entity.payment.method.isDefault
        }
        ret.payment.transactionId = entity.payment.transactionId
        ret.payment.status = entity.payment.status
        ret.payment.amount = entity.payment.amount
        ret.payment.currency = entity.payment.currency
        ret.payment.lastFour = entity.payment.lastFour
      }
      ret.trackingNumber = entity.trackingNumber
      ret.carrier = entity.carrier
      ret.estimatedDeliveryDate = entity.estimatedDeliveryDate
      ret.actualDeliveryDate = entity.actualDeliveryDate
      ret.createdAt = entity.createdAt
      ret.updatedAt = entity.updatedAt
    }

    return ret
  }

}
