import { EntityService, IEntitiesService } from '@kinotic/structures-api'
import { ProductReview } from '../../../entity/domain/ecommerce/ProductReview.js'


/**
 * Base Service for interacting with ProductReview entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BaseProductReviewEntityService extends EntityService<ProductReview> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('ecommerce', 'ProductReview', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: ProductReview): Promise<ProductReview> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: ProductReview[]): Promise<ProductReview[]> {
    if (this.shouldValidate) {
      const validatedEntities: ProductReview[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: ProductReview): ProductReview {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.productId = entity.productId
      ret.customerId = entity.customerId
      ret.title = entity.title
      ret.content = entity.content
      ret.rating = entity.rating
      ret.verifiedPurchase = entity.verifiedPurchase
      ret.helpfulVotes = entity.helpfulVotes
      ret.unhelpfulVotes = entity.unhelpfulVotes
      if (entity.images) {
        ret.images = []
        for (let entityImagesItem of entity.images) {
          let retImagesValue: any
          retImagesValue = entityImagesItem
          ret.images.push(retImagesValue)
        }
      }
      ret.createdAt = entity.createdAt
      ret.updatedAt = entity.updatedAt
    }

    return ret
  }

}
