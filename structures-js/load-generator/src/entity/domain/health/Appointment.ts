import { Entity, AutoGeneratedId, MultiTenancyType, Text, NotNull } from '@kinotic/structures-api'
import { AppointmentStatus } from './AppointmentStatus'
import { AppointmentType } from './AppointmentType'

@Entity(MultiTenancyType.SHARED)
export class Appointment {
    @AutoGeneratedId
    public id: string | null = null

    @NotNull
    public patientId!: string

    @NotNull
    public providerId!: string

    public type!: AppointmentType

    public status!: AppointmentStatus

    public startTime!: Date

    public endTime!: Date

    public duration!: number

    @Text
    public notes!: string

    public isRecurring!: boolean

    public recurrencePattern!: string

    public createdAt!: Date

    public updatedAt!: Date

    public treatmentId: string | null = null

    @Text
    public reason: string = ''

    public isVirtual: boolean = false

    public isActive: boolean = true

    protected constructor() {}

    static create(): Appointment {
        return new Appointment()
    }

    static builder(): AppointmentBuilder {
        return new AppointmentBuilder()
    }
}

export class AppointmentBuilder {
    private appointment: Appointment = Appointment.create()

    withPatientId(patientId: string): AppointmentBuilder {
        this.appointment.patientId = patientId
        return this
    }

    withProviderId(providerId: string): AppointmentBuilder {
        this.appointment.providerId = providerId
        return this
    }

    withType(type: AppointmentType): AppointmentBuilder {
        this.appointment.type = type
        return this
    }

    withStatus(status: AppointmentStatus): AppointmentBuilder {
        this.appointment.status = status
        return this
    }

    withStartTime(startTime: Date): AppointmentBuilder {
        this.appointment.startTime = startTime
        return this
    }

    withEndTime(endTime: Date): AppointmentBuilder {
        this.appointment.endTime = endTime
        return this
    }

    withDuration(duration: number): AppointmentBuilder {
        this.appointment.duration = duration
        return this
    }

    withNotes(notes: string): AppointmentBuilder {
        this.appointment.notes = notes
        return this
    }

    withIsRecurring(isRecurring: boolean): AppointmentBuilder {
        this.appointment.isRecurring = isRecurring
        return this
    }

    withRecurrencePattern(recurrencePattern: string): AppointmentBuilder {
        this.appointment.recurrencePattern = recurrencePattern
        return this
    }

    withCreatedAt(createdAt: Date): AppointmentBuilder {
        this.appointment.createdAt = createdAt
        return this
    }

    withUpdatedAt(updatedAt: Date): AppointmentBuilder {
        this.appointment.updatedAt = updatedAt
        return this
    }

    build(): Appointment {
        return this.appointment
    }
} 