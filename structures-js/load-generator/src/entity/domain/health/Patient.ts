import { Entity, AutoGeneratedId, MultiTenancyType, NotNull } from '@kinotic/structures-api'
import { Address } from './Address'
import { ContactInfo } from './ContactInfo'
import { InsuranceInfo } from './InsuranceInfo'
import { Treatment } from './Treatment'

@Entity(MultiTenancyType.SHARED)
export class Patient {
    @AutoGeneratedId
    public id: string | null = null

    @NotNull
    public firstName!: string

    @NotNull
    public lastName!: string

    public dateOfBirth!: Date

    public gender!: string

    public mrn: string = ''  // Medical Record Number

    public addresses!: Address[]

    public contactInfo!: ContactInfo

    public insuranceInfo!: InsuranceInfo

    public treatments: Treatment[] = []

    public medicalHistory!: string[]

    public bloodType!: string

    public allergies!: string[]

    public isActive: boolean = true

    public emergencyContact!: ContactInfo

    public createdAt!: Date

    public updatedAt!: Date

    protected constructor() {}

    static create(): Patient {
        return new Patient()
    }

    static builder(): PatientBuilder {
        return new PatientBuilder()
    }
}

export class PatientBuilder {
    private patient: Patient = Patient.create()

    withFirstName(firstName: string): PatientBuilder {
        this.patient.firstName = firstName
        return this
    }

    withLastName(lastName: string): PatientBuilder {
        this.patient.lastName = lastName
        return this
    }

    withDateOfBirth(dateOfBirth: Date): PatientBuilder {
        this.patient.dateOfBirth = dateOfBirth
        return this
    }

    withGender(gender: string): PatientBuilder {
        this.patient.gender = gender
        return this
    }

    withAddresses(addresses: Address[]): PatientBuilder {
        this.patient.addresses = addresses
        return this
    }

    withAddress(address: Address): PatientBuilder {
        if (!this.patient.addresses) {
            this.patient.addresses = []
        }
        this.patient.addresses.push(address)
        return this
    }

    withContactInfo(contactInfo: ContactInfo): PatientBuilder {
        this.patient.contactInfo = contactInfo
        return this
    }

    withInsuranceInfo(insuranceInfo: InsuranceInfo): PatientBuilder {
        this.patient.insuranceInfo = insuranceInfo
        return this
    }

    withMedicalHistory(medicalHistory: string[]): PatientBuilder {
        this.patient.medicalHistory = medicalHistory
        return this
    }

    withAllergies(allergies: string[]): PatientBuilder {
        this.patient.allergies = allergies
        return this
    }

    withBloodType(bloodType: string): PatientBuilder {
        this.patient.bloodType = bloodType
        return this
    }

    withEmergencyContact(emergencyContact: ContactInfo): PatientBuilder {
        this.patient.emergencyContact = emergencyContact
        return this
    }

    withCreatedAt(createdAt: Date): PatientBuilder {
        this.patient.createdAt = createdAt
        return this
    }

    withUpdatedAt(updatedAt: Date): PatientBuilder {
        this.patient.updatedAt = updatedAt
        return this
    }

    build(): Patient {
        return this.patient
    }
} 