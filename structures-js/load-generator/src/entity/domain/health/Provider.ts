import { 
    Entity, 
    AutoGeneratedId, 
    MultiTenancyType,
    NotNull
} from '@kinotic/structures-api'
import { Address } from './Address'
import { ContactInfo } from './ContactInfo'
import { Specialty } from './Specialty'
import { Qualification } from './Qualification'

@Entity(MultiTenancyType.SHARED)
export class Provider {
    @AutoGeneratedId
    public id: string | null = null

    @NotNull
    public firstName!: string

    @NotNull
    public lastName!: string

    public title!: string

    public specialties!: Specialty[]

    public qualifications!: Qualification[]

    public addresses!: Address[]

    public contactInfo!: ContactInfo

    public licenseNumber!: string

    public licenseExpiryDate!: Date

    public isActive!: boolean

    public createdAt!: Date

    public updatedAt!: Date

    protected constructor() {}

    static create(): Provider {
        return new Provider()
    }

    static builder(): ProviderBuilder {
        return new ProviderBuilder()
    }
}

export class ProviderBuilder {
    private provider: Provider = Provider.create()

    withFirstName(firstName: string): ProviderBuilder {
        this.provider.firstName = firstName
        return this
    }

    withLastName(lastName: string): ProviderBuilder {
        this.provider.lastName = lastName
        return this
    }

    withTitle(title: string): ProviderBuilder {
        this.provider.title = title
        return this
    }

    withSpecialties(specialties: Specialty[]): ProviderBuilder {
        this.provider.specialties = specialties
        return this
    }

    withSpecialty(specialty: Specialty): ProviderBuilder {
        if (!this.provider.specialties) {
            this.provider.specialties = []
        }
        this.provider.specialties.push(specialty)
        return this
    }

    withQualifications(qualifications: Qualification[]): ProviderBuilder {
        this.provider.qualifications = qualifications
        return this
    }

    withQualification(qualification: Qualification): ProviderBuilder {
        if (!this.provider.qualifications) {
            this.provider.qualifications = []
        }
        this.provider.qualifications.push(qualification)
        return this
    }

    withAddresses(addresses: Address[]): ProviderBuilder {
        this.provider.addresses = addresses
        return this
    }

    withAddress(address: Address): ProviderBuilder {
        if (!this.provider.addresses) {
            this.provider.addresses = []
        }
        this.provider.addresses.push(address)
        return this
    }

    withContactInfo(contactInfo: ContactInfo): ProviderBuilder {
        this.provider.contactInfo = contactInfo
        return this
    }

    withLicenseNumber(licenseNumber: string): ProviderBuilder {
        this.provider.licenseNumber = licenseNumber
        return this
    }

    withLicenseExpiryDate(licenseExpiryDate: Date): ProviderBuilder {
        this.provider.licenseExpiryDate = licenseExpiryDate
        return this
    }

    withIsActive(isActive: boolean): ProviderBuilder {
        this.provider.isActive = isActive
        return this
    }

    withCreatedAt(createdAt: Date): ProviderBuilder {
        this.provider.createdAt = createdAt
        return this
    }

    withUpdatedAt(updatedAt: Date): ProviderBuilder {
        this.provider.updatedAt = updatedAt
        return this
    }

    build(): Provider {
        return this.provider
    }
} 