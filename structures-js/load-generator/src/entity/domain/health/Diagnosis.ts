import { Entity, AutoGeneratedId, MultiTenancyType, Text, NotNull } from '@kinotic/structures-api'
import { DiagnosisStatus } from './DiagnosisStatus'

@Entity(MultiTenancyType.SHARED)
export class Diagnosis {
    @AutoGeneratedId
    public id: string | null = null

    @NotNull
    public patientId!: string

    @NotNull
    public providerId!: string

    @Text
    @NotNull
    public condition!: string

    @Text
    public description!: string

    public status!: DiagnosisStatus

    public diagnosisDate!: Date

    public severity!: string

    @Text
    public notes!: string

    public createdAt!: Date

    public updatedAt!: Date

    protected constructor() {}

    static create(): Diagnosis {
        return new Diagnosis()
    }

    static builder(): DiagnosisBuilder {
        return new DiagnosisBuilder()
    }
}

export class DiagnosisBuilder {
    private diagnosis: Diagnosis = Diagnosis.create()

    withPatientId(patientId: string): DiagnosisBuilder {
        this.diagnosis.patientId = patientId
        return this
    }

    withProviderId(providerId: string): DiagnosisBuilder {
        this.diagnosis.providerId = providerId
        return this
    }

    withCondition(condition: string): DiagnosisBuilder {
        this.diagnosis.condition = condition
        return this
    }

    withDescription(description: string): DiagnosisBuilder {
        this.diagnosis.description = description
        return this
    }

    withStatus(status: DiagnosisStatus): DiagnosisBuilder {
        this.diagnosis.status = status
        return this
    }

    withDiagnosisDate(diagnosisDate: Date): DiagnosisBuilder {
        this.diagnosis.diagnosisDate = diagnosisDate
        return this
    }

    withSeverity(severity: string): DiagnosisBuilder {
        this.diagnosis.severity = severity
        return this
    }

    withNotes(notes: string): DiagnosisBuilder {
        this.diagnosis.notes = notes
        return this
    }

    withCreatedAt(createdAt: Date): DiagnosisBuilder {
        this.diagnosis.createdAt = createdAt
        return this
    }

    withUpdatedAt(updatedAt: Date): DiagnosisBuilder {
        this.diagnosis.updatedAt = updatedAt
        return this
    }

    build(): Diagnosis {
        return this.diagnosis
    }
} 