import { Entity, AutoGeneratedId, MultiTenancyType, Text, NotNull } from '@kinotic/structures-api'
import { TreatmentStatus } from './TreatmentStatus'
import { Prescription } from './Prescription'

@Entity(MultiTenancyType.SHARED)
export class Treatment {
    @AutoGeneratedId
    public id: string | null = null

    @NotNull
    public patientId!: string

    @NotNull
    public providerId!: string

    @NotNull
    public diagnosisId!: string

    @NotNull
    public name!: string

    @Text
    public description!: string

    public status!: TreatmentStatus

    public startDate!: Date

    public endDate!: Date

    public frequency!: string

    public dosage!: string

    @Text
    public notes!: string

    public createdAt!: Date

    public updatedAt!: Date

    public prescriptions: Prescription[] = []

    public isActive: boolean = true

    protected constructor() {}

    static create(): Treatment {
        return new Treatment()
    }

    static builder(): TreatmentBuilder {
        return new TreatmentBuilder()
    }
}

export class TreatmentBuilder {
    private treatment: Treatment = Treatment.create()

    withPatientId(patientId: string): TreatmentBuilder {
        this.treatment.patientId = patientId
        return this
    }

    withProviderId(providerId: string): TreatmentBuilder {
        this.treatment.providerId = providerId
        return this
    }

    withDiagnosisId(diagnosisId: string): TreatmentBuilder {
        this.treatment.diagnosisId = diagnosisId
        return this
    }

    withName(name: string): TreatmentBuilder {
        this.treatment.name = name
        return this
    }

    withDescription(description: string): TreatmentBuilder {
        this.treatment.description = description
        return this
    }

    withStatus(status: TreatmentStatus): TreatmentBuilder {
        this.treatment.status = status
        return this
    }

    withStartDate(startDate: Date): TreatmentBuilder {
        this.treatment.startDate = startDate
        return this
    }

    withEndDate(endDate: Date): TreatmentBuilder {
        this.treatment.endDate = endDate
        return this
    }

    withFrequency(frequency: string): TreatmentBuilder {
        this.treatment.frequency = frequency
        return this
    }

    withDosage(dosage: string): TreatmentBuilder {
        this.treatment.dosage = dosage
        return this
    }

    withNotes(notes: string): TreatmentBuilder {
        this.treatment.notes = notes
        return this
    }

    withCreatedAt(createdAt: Date): TreatmentBuilder {
        this.treatment.createdAt = createdAt
        return this
    }

    withUpdatedAt(updatedAt: Date): TreatmentBuilder {
        this.treatment.updatedAt = updatedAt
        return this
    }

    build(): Treatment {
        return this.treatment
    }
} 