import { Entity, AutoGeneratedId, MultiTenancyType, NotNull } from '@kinotic/structures-api'
import { PrescriptionStatus } from './PrescriptionStatus'

@Entity(MultiTenancyType.SHARED)
export class Prescription {
    @AutoGeneratedId
    public id: string | null = null

    @NotNull
    public patientId!: string

    @NotNull
    public providerId!: string

    @NotNull
    public diagnosisId!: string

    @NotNull
    public medicationName!: string

    @NotNull
    public dosageForm!: string

    @NotNull
    public strength!: string

    @NotNull
    public frequency!: string

    @NotNull
    public quantity!: number

    public refillsRemaining: number = 0

    @NotNull
    public startDate!: Date

    public endDate!: Date

    @NotNull
    public instructions!: string

    public pharmacyName!: string

    public pharmacyPhone!: string

    public isActive: boolean = true

    public notes!: string

    public createdAt!: Date

    public updatedAt!: Date

    public status: PrescriptionStatus = PrescriptionStatus.ACTIVE

    protected constructor() {}

    static create(): Prescription {
        return new Prescription()
    }

    static builder(): PrescriptionBuilder {
        return new PrescriptionBuilder()
    }
}

export class PrescriptionBuilder {
    private prescription: Prescription = Prescription.create()

    withPatientId(patientId: string): PrescriptionBuilder {
        this.prescription.patientId = patientId
        return this
    }

    withProviderId(providerId: string): PrescriptionBuilder {
        this.prescription.providerId = providerId
        return this
    }

    withDiagnosisId(diagnosisId: string): PrescriptionBuilder {
        this.prescription.diagnosisId = diagnosisId
        return this
    }

    withMedicationName(medicationName: string): PrescriptionBuilder {
        this.prescription.medicationName = medicationName
        return this
    }

    withDosageForm(dosageForm: string): PrescriptionBuilder {
        this.prescription.dosageForm = dosageForm
        return this
    }

    withStrength(strength: string): PrescriptionBuilder {
        this.prescription.strength = strength
        return this
    }

    withFrequency(frequency: string): PrescriptionBuilder {
        this.prescription.frequency = frequency
        return this
    }

    withQuantity(quantity: number): PrescriptionBuilder {
        this.prescription.quantity = quantity
        return this
    }

    withRefillsRemaining(refillsRemaining: number): PrescriptionBuilder {
        this.prescription.refillsRemaining = refillsRemaining
        return this
    }

    withStartDate(startDate: Date): PrescriptionBuilder {
        this.prescription.startDate = startDate
        return this
    }

    withEndDate(endDate: Date): PrescriptionBuilder {
        this.prescription.endDate = endDate
        return this
    }

    withInstructions(instructions: string): PrescriptionBuilder {
        this.prescription.instructions = instructions
        return this
    }

    withPharmacyName(pharmacyName: string): PrescriptionBuilder {
        this.prescription.pharmacyName = pharmacyName
        return this
    }

    withPharmacyPhone(pharmacyPhone: string): PrescriptionBuilder {
        this.prescription.pharmacyPhone = pharmacyPhone
        return this
    }

    withIsActive(isActive: boolean): PrescriptionBuilder {
        this.prescription.isActive = isActive
        return this
    }

    withNotes(notes: string): PrescriptionBuilder {
        this.prescription.notes = notes
        return this
    }

    withCreatedAt(createdAt: Date): PrescriptionBuilder {
        this.prescription.createdAt = createdAt
        return this
    }

    withUpdatedAt(updatedAt: Date): PrescriptionBuilder {
        this.prescription.updatedAt = updatedAt
        return this
    }

    build(): Prescription {
        return this.prescription
    }
} 