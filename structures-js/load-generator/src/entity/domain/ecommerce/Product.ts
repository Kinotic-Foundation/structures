import { 
    Entity, 
    AutoGeneratedId, 
    MultiTenancyType,
    Text,
    NotNull,
    Precision,
    PrecisionType
} from '@kinotic/structures-api'
import { ProductImage } from './ProductImage'
import { ProductAttribute } from './ProductAttribute'

@Entity(MultiTenancyType.SHARED)
export class Product {
    @AutoGeneratedId
    public id: string | null = null

    @Text
    @NotNull
    public name!: string

    @Text
    public description!: string

    public sku!: string

    @Precision(PrecisionType.DOUBLE)
    public price!: number

    @Precision(PrecisionType.DOUBLE)
    public salePrice?: number

    @Precision(PrecisionType.INT)
    public stockQuantity!: number

    public brand!: string

    public category!: string

    public tags!: string[]

    public attributes!: ProductAttribute[]

    public images!: ProductImage[]

    protected constructor() {}

    static create(): Product {
        return new Product()
    }

    static builder(): ProductBuilder {
        return new ProductBuilder()
    }
}

export class ProductBuilder {
    private product: Product = Product.create()

    withName(name: string): ProductBuilder {
        this.product.name = name
        return this
    }

    withDescription(description: string): ProductBuilder {
        this.product.description = description
        return this
    }

    withSku(sku: string): ProductBuilder {
        this.product.sku = sku
        return this
    }

    withPrice(price: number): ProductBuilder {
        this.product.price = price
        return this
    }

    withSalePrice(salePrice: number): ProductBuilder {
        this.product.salePrice = salePrice
        return this
    }

    withStockQuantity(stockQuantity: number): ProductBuilder {
        this.product.stockQuantity = stockQuantity
        return this
    }

    withBrand(brand: string): ProductBuilder {
        this.product.brand = brand
        return this
    }

    withCategory(category: string): ProductBuilder {
        this.product.category = category
        return this
    }

    withTags(tags: string[]): ProductBuilder {
        this.product.tags = tags
        return this
    }

    withTag(tag: string): ProductBuilder {
        if (!this.product.tags) {
            this.product.tags = []
        }
        this.product.tags.push(tag)
        return this
    }

    withAttributes(attributes: ProductAttribute[]): ProductBuilder {
        this.product.attributes = attributes
        return this
    }

    withAttribute(key: string, value: string): ProductBuilder {
        if (!this.product.attributes) {
            this.product.attributes = []
        }
        this.product.attributes.push(
            ProductAttribute.builder()
                .withKey(key)
                .withValue(value)
                .build()
        )
        return this
    }

    withImages(images: ProductImage[]): ProductBuilder {
        this.product.images = images
        return this
    }

    withImage(image: ProductImage): ProductBuilder {
        if (!this.product.images) {
            this.product.images = []
        }
        this.product.images.push(image)
        return this
    }

    build(): Product {
        return this.product
    }
} 