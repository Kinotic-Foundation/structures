import { 
    Entity, 
    AutoGeneratedId, 
    MultiTenancyType,
    NotNull,
    Precision,
    PrecisionType
} from '@kinotic/structures-api'
import { Address } from './Address'
import { PaymentMethod } from './PaymentMethod'

@Entity(MultiTenancyType.SHARED)
export class Customer {
    @AutoGeneratedId
    public id: string | null = null

    @NotNull
    public email!: string

    public firstName!: string

    public lastName!: string

    public phoneNumber?: string

    public shippingAddress!: Address

    public billingAddress!: Address

    public paymentMethods!: PaymentMethod[]

    @Precision(PrecisionType.DOUBLE)
    public totalSpent!: number

    @Precision(PrecisionType.INT)
    public purchaseCount!: number

    public favoriteCategories!: string[]

    public lastPurchaseDate?: Date

    public createdAt!: Date

    public updatedAt!: Date

    protected constructor() {}

    static create(): Customer {
        return new Customer()
    }

    static builder(): CustomerBuilder {
        return new CustomerBuilder()
    }
}

export class CustomerBuilder {
    private customer: Customer = Customer.create()

    withEmail(email: string): CustomerBuilder {
        this.customer.email = email
        return this
    }

    withFirstName(firstName: string): CustomerBuilder {
        this.customer.firstName = firstName
        return this
    }

    withLastName(lastName: string): CustomerBuilder {
        this.customer.lastName = lastName
        return this
    }

    withPhoneNumber(phoneNumber: string): CustomerBuilder {
        this.customer.phoneNumber = phoneNumber
        return this
    }

    withShippingAddress(address: Address): CustomerBuilder {
        this.customer.shippingAddress = address
        return this
    }

    withBillingAddress(address: Address): CustomerBuilder {
        this.customer.billingAddress = address
        return this
    }

    withPaymentMethods(paymentMethods: PaymentMethod[]): CustomerBuilder {
        this.customer.paymentMethods = paymentMethods
        return this
    }

    withPaymentMethod(paymentMethod: PaymentMethod): CustomerBuilder {
        if (!this.customer.paymentMethods) {
            this.customer.paymentMethods = []
        }
        this.customer.paymentMethods.push(paymentMethod)
        return this
    }

    withTotalSpent(totalSpent: number): CustomerBuilder {
        this.customer.totalSpent = totalSpent
        return this
    }

    withPurchaseCount(purchaseCount: number): CustomerBuilder {
        this.customer.purchaseCount = purchaseCount
        return this
    }

    withFavoriteCategories(categories: string[]): CustomerBuilder {
        this.customer.favoriteCategories = categories
        return this
    }

    withFavoriteCategory(category: string): CustomerBuilder {
        if (!this.customer.favoriteCategories) {
            this.customer.favoriteCategories = []
        }
        this.customer.favoriteCategories.push(category)
        return this
    }

    withLastPurchaseDate(date: Date): CustomerBuilder {
        this.customer.lastPurchaseDate = date
        return this
    }

    withCreatedAt(date: Date): CustomerBuilder {
        this.customer.createdAt = date
        return this
    }

    withUpdatedAt(date: Date): CustomerBuilder {
        this.customer.updatedAt = date
        return this
    }

    build(): Customer {
        return this.customer
    }
} 