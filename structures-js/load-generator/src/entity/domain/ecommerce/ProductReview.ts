import { 
    Entity, 
    AutoGeneratedId, 
    MultiTenancyType,
    Text,
    NotNull,
    Precision,
    PrecisionType
} from '@kinotic/structures-api'

@Entity(MultiTenancyType.SHARED)
export class ProductReview {
    @AutoGeneratedId    
    public id: string | null = null

    @Text
    @NotNull
    public productId!: string

    @Text
    @NotNull
    public customerId!: string

    @Text   
    public title!: string

    @Text
    public content!: string

    @Precision(PrecisionType.DOUBLE)
    public rating!: number

    public verifiedPurchase!: boolean

    public helpfulVotes!: number

    public unhelpfulVotes!: number

    public images?: string[]

    public createdAt!: Date

    public updatedAt?: Date

    protected constructor() {}

    static create(): ProductReview {
        return new ProductReview()
    }

    static builder(): ProductReviewBuilder {
        return new ProductReviewBuilder()
    }
}

export class ProductReviewBuilder {
    private review: ProductReview = ProductReview.create()

    withProductId(productId: string): ProductReviewBuilder {
        this.review.productId = productId
        return this
    }

    withCustomerId(customerId: string): ProductReviewBuilder {
        this.review.customerId = customerId
        return this
    }

    withTitle(title: string): ProductReviewBuilder {
        this.review.title = title
        return this
    }

    withContent(content: string): ProductReviewBuilder {
        this.review.content = content
        return this
    }

    withRating(rating: number): ProductReviewBuilder {
        this.review.rating = rating
        return this
    }

    withVerifiedPurchase(verifiedPurchase: boolean): ProductReviewBuilder {
        this.review.verifiedPurchase = verifiedPurchase
        return this
    }

    withHelpfulVotes(helpfulVotes: number): ProductReviewBuilder {
        this.review.helpfulVotes = helpfulVotes
        return this
    }

    withUnhelpfulVotes(unhelpfulVotes: number): ProductReviewBuilder {
        this.review.unhelpfulVotes = unhelpfulVotes
        return this
    }

    withImages(images: string[]): ProductReviewBuilder {
        this.review.images = images
        return this
    }

    withImage(image: string): ProductReviewBuilder {
        if (!this.review.images) {
            this.review.images = []
        }
        this.review.images.push(image)
        return this
    }

    withCreatedAt(date: Date): ProductReviewBuilder {
        this.review.createdAt = date
        return this
    }

    withUpdatedAt(date: Date): ProductReviewBuilder {
        this.review.updatedAt = date
        return this
    }

    build(): ProductReview {
        return this.review
    }
} 