import { 
    Entity, 
    AutoGeneratedId, 
    MultiTenancyType,
    Text,
    NotNull,
    Precision,
    PrecisionType
} from '@kinotic/structures-api'
import { Address } from './Address'
import { PurchaseItem } from './PurchaseItem'
import { Payment } from './Payment'
import { PurchaseStatus } from './PurchaseStatus'

@Entity(MultiTenancyType.SHARED)
export class Purchase {
    @AutoGeneratedId
    public id: string | null = null

    @Text
    @NotNull
    public purchaseNumber!: string

    public customerId!: string

    public status!: PurchaseStatus

    public items!: PurchaseItem[]

    @Precision(PrecisionType.DOUBLE)
    public subtotal!: number

    @Precision(PrecisionType.DOUBLE)
    public tax!: number

    @Precision(PrecisionType.DOUBLE)
    public shipping!: number

    @Precision(PrecisionType.DOUBLE)
    public discount!: number

    @Precision(PrecisionType.DOUBLE)
    public total!: number

    public shippingAddress!: Address

    public billingAddress!: Address

    public payment!: Payment

    public trackingNumber?: string

    public carrier?: string

    public estimatedDeliveryDate?: Date

    public actualDeliveryDate?: Date

    public createdAt!: Date

    public updatedAt!: Date

    protected constructor() {}

    static create(): Purchase {
        return new Purchase()
    }

    static builder(): PurchaseBuilder {
        return new PurchaseBuilder()
    }
}

export class PurchaseBuilder {
    private purchase: Purchase = Purchase.create()

    withPurchaseNumber(purchaseNumber: string): PurchaseBuilder {
        this.purchase.purchaseNumber = purchaseNumber
        return this
    }

    withCustomerId(customerId: string): PurchaseBuilder {
        this.purchase.customerId = customerId
        return this
    }

    withStatus(status: PurchaseStatus): PurchaseBuilder {
        this.purchase.status = status
        return this
    }

    withItems(items: PurchaseItem[]): PurchaseBuilder {
        this.purchase.items = items
        return this
    }

    withItem(item: PurchaseItem): PurchaseBuilder {
        if (!this.purchase.items) {
            this.purchase.items = []
        }
        this.purchase.items.push(item)
        return this
    }

    withSubtotal(subtotal: number): PurchaseBuilder {
        this.purchase.subtotal = subtotal
        return this
    }

    withTax(tax: number): PurchaseBuilder {
        this.purchase.tax = tax
        return this
    }

    withShipping(shipping: number): PurchaseBuilder {
        this.purchase.shipping = shipping
        return this
    }

    withDiscount(discount: number): PurchaseBuilder {
        this.purchase.discount = discount
        return this
    }

    withTotal(total: number): PurchaseBuilder {
        this.purchase.total = total
        return this
    }

    withShippingAddress(address: Address): PurchaseBuilder {
        this.purchase.shippingAddress = address
        return this
    }

    withBillingAddress(address: Address): PurchaseBuilder {
        this.purchase.billingAddress = address
        return this
    }

    withPayment(payment: Payment): PurchaseBuilder {
        this.purchase.payment = payment
        return this
    }

    withTrackingNumber(trackingNumber: string): PurchaseBuilder {
        this.purchase.trackingNumber = trackingNumber
        return this
    }

    withCarrier(carrier: string): PurchaseBuilder {
        this.purchase.carrier = carrier
        return this
    }

    withEstimatedDeliveryDate(date: Date): PurchaseBuilder {
        this.purchase.estimatedDeliveryDate = date
        return this
    }

    withActualDeliveryDate(date: Date): PurchaseBuilder {
        this.purchase.actualDeliveryDate = date
        return this
    }

    withCreatedAt(date: Date): PurchaseBuilder {
        this.purchase.createdAt = date
        return this
    }

    withUpdatedAt(date: Date): PurchaseBuilder {
        this.purchase.updatedAt = date
        return this
    }

    build(): Purchase {
        return this.purchase
    }
} 