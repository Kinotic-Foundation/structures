# Structures Auth Library - Development Guidelines

## Overview
This library provides JWT authentication and authorization functionality for the Structures framework.

## Architecture
- **JWT Token Management**: Token creation, validation, and parsing
- **OIDC Integration**: OpenID Connect authentication support
- **Authorization**: Role-based access control and permission management
- **Spring Boot Auto-Configuration**: Automatic configuration for Spring Boot applications

## Key Components

### JWT Token Services
- Token creation and signing
- Token validation and parsing
- Claims extraction and validation
- Signature verification

### OIDC Authentication
- OIDC provider integration
- Token exchange and validation
- User information retrieval
- Multi-provider support

### Authorization Services
- Role-based access control
- Permission checking
- Tenant-aware authorization
- Policy enforcement

### Spring Boot Integration
- Auto-configuration classes
- Configuration properties
- Starter dependencies
- Health indicators

## Development Guidelines

### Code Organization
- Follow the `org.kinotic.structures.auth` package structure
- Use Spring Boot conventions for configuration
- Implement proper error handling and logging
- Follow security best practices

### Testing Strategy
- Unit tests for all services
- Integration tests for OIDC flows
- Security testing for token validation
- Performance testing for token operations

### Security Considerations
- Never log sensitive information
- Validate all inputs
- Use secure random for token generation
- Implement proper key management
- Follow OWASP security guidelines

### Configuration
- Use `@ConfigurationProperties` for externalized config
- Support environment-specific configuration
- Provide sensible defaults
- Document all configuration options

### Dependencies
- JWT libraries: jjwt-api, jjwt-impl, jjwt-jackson
- Jackson for JSON processing
- Continuum Core for framework integration
- Spring Boot for auto-configuration

## Integration Patterns

### Library Usage
```java
@SpringBootApplication
@EnableStructuresAuth
public class MyApplication {
    // Auto-configured JWT services
}
```

### Configuration Example
```yaml
structures:
  auth:
    jwt:
      issuer: "https://your-issuer.com"
      audience: "your-audience"
      signing-key: "your-signing-key"
    oidc:
      providers:
        - name: "okta"
          issuer: "https://your-okta-domain.okta.com"
          client-id: "your-client-id"
```

## API Design
- Provide fluent APIs for token operations
- Use builder patterns for complex configurations
- Implement proper exception handling
- Support async operations where appropriate

## Performance Considerations
- Cache JWKS (JSON Web Key Sets)
- Optimize token validation
- Use connection pooling for OIDC providers
- Implement proper resource cleanup

## Documentation
- Comprehensive Javadoc for all public APIs
- Usage examples and best practices
- Security guidelines and recommendations
- Integration guides for different scenarios 