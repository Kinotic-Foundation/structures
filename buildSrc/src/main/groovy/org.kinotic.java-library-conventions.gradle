plugins {
    // Apply the common convention plugin for shared build configuration between library and application projects.
    id 'org.kinotic.java-common-conventions'
    id 'java-library'
    id 'org.jreleaser'
}

dependencies {
    api "org.kinotic:continuum-core:${continuumVersion}"

    implementation 'org.springframework.boot:spring-boot-autoconfigure'
}

java {
    withJavadocJar()
    withSourcesJar()
}

jreleaser {
    project {
        authors = ['Kinotic Developers']
        license = 'Apache-2.0'
        links {
            homepage = 'https://continuumframework.org'
        }
        inceptionYear = '2021'
        description = 'Framework for data storage and retrieval, supporting schema evolution!'
    }

    signing {
        active = 'ALWAYS'
        armored = true
        verify = false
    }

    deploy {
        maven {
            mavenCentral {
                'release-deploy' {
                    active = 'RELEASE'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('target/staging-deploy')
                }
            }
            nexus2 {
                'snapshot-deploy' {
                    active = 'SNAPSHOT'
                    snapshotUrl = 'https://central.sonatype.com/repository/maven-snapshots/'
                    applyMavenCentralRules = true
                    snapshotSupported = true
                    closeRepository = true
                    releaseRepository = true
                    stagingRepository('target/staging-deploy')
                }
            }
        }
    }

    distributions {
        main {
            artifact {
                path = 'build/libs/{{distributionName}}-{{projectVersion}}.jar'
            }
            extraProperties.put('includeJavadocJar', true)
            extraProperties.put('includeSourcesJar', true)
            java {
                enabled = true
                groupId = 'org.kinotic'
                artifactId = project.name
            }
        }
    }
}

javadoc {
    // suppress warnings
    options.addStringOption('Xdoclint:none', '-quiet')

    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

// Add JReleaser validation task
tasks.register('validateJreleaser') {
    dependsOn 'jreleaser:config'
    doLast {
        println "JReleaser configuration validated successfully"
    }
}

// Make build depend on JReleaser validation
tasks.named('build') {
    dependsOn 'validateJreleaser'
}
