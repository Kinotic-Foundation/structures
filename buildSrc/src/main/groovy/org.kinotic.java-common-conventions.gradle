plugins {
    // Apply the java Plugin to add support for Java.
    id 'java'
    id 'io.spring.dependency-management'
}

group 'org.kinotic'
version "${structuresVersion}"
sourceCompatibility = '21'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    maven {
        url = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
    }
}

// Define configuration for AspectJ agent
configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        mavenBom "io.opentelemetry:opentelemetry-bom:${otelBomVersion}"
        mavenBom "io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:${otelInstrumentationBomVersion}"
    }
    dependencies {
        dependency "co.elastic.clients:elasticsearch-java:${elasticClientVersion}"

        dependency "com.github.ben-manes.caffeine:caffeine:${caffeineVersion}"

        dependency "com.graphql-java:graphql-java:${graphQlJavaVersion}"

        dependency "io.vertx:vertx-web:${vertxVersion}"
        dependency "io.vertx:vertx-web-graphql:${vertxVersion}"
        dependency "io.vertx:vertx-web-client:${vertxVersion}"
        dependency "io.vertx:vertx-health-check:${vertxVersion}"

        dependency "me.escoffier.vertx:vertx-completable-future:${vertxCompletableFutureVersion}"

        dependency "org.apache.commons:commons-compress:${commonsCompressVersion}"

        dependency "org.apache.ignite:ignite-core:${igniteVersion}"

        dependency "org.apache.lucene:lucene-analyzers-common:${luceneVersion}"
        dependency "org.apache.lucene:lucene-backwards-codecs:${luceneVersion}"
        dependency "org.apache.lucene:lucene-core:${luceneVersion}"
        dependency "org.apache.lucene:lucene-grouping:${luceneVersion}"
        dependency "org.apache.lucene:lucene-highlighter:${luceneVersion}"
        dependency "org.apache.lucene:lucene-join:${luceneVersion}"
        dependency "org.apache.lucene:lucene-memory:${luceneVersion}"
        dependency "org.apache.lucene:lucene-misc:${luceneVersion}"
        dependency "org.apache.lucene:lucene-queries:${luceneVersion}"
        dependency "org.apache.lucene:lucene-queryparser:${luceneVersion}"
        dependency "org.apache.lucene:lucene-sandbox:${luceneVersion}"
        dependency "org.apache.lucene:lucene-spatial:${luceneVersion}"
        dependency "org.apache.lucene:lucene-suggest:${luceneVersion}"

        dependency "org.elasticsearch:elasticsearch:${elasticClientVersion}"
        dependency "org.elasticsearch.client:elasticsearch-rest-client:${elasticClientVersion}"
        dependency "org.elasticsearch.client:elasticsearch-rest-high-level-client:${elasticClientVersion}"

        dependency "org.kinotic:continuum-core:${continuumVersion}"
        dependency "org.kinotic:continuum-core-vertx:${continuumVersion}"
        dependency "org.kinotic:continuum-gateway:${continuumVersion}"
        dependency "org.kinotic:continuum-idl:${continuumVersion}"

        // must be overridden for the elastic client
        dependency 'jakarta.json:jakarta.json-api:2.0.1'
    }
}

dependencies {
    implementation 'org.apache.commons:commons-lang3'
    implementation "org.apache.commons:commons-text:${apacheCommonsTextVersion}"

    implementation 'io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations'

    implementation 'ch.qos.logback:logback-core'
    implementation 'ch.qos.logback:logback-classic'

    // Add aspectj weaver dependency for use during tests
    agent "org.aspectj:aspectjweaver:$aspectJVersion"

    testImplementation platform("io.qameta.allure:allure-bom:$allureVersion")
    testImplementation "io.qameta.allure:allure-junit5"
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'

}

test {
    useJUnitPlatform()
    environment("JAVA_TOOL_OPTIONS", "-javaagent:${configurations.agent.singleFile} --add-opens=jdk.management/com.sun.management.internal=ALL-UNNAMED --add-opens=java.base/jdk.internal.misc=ALL-UNNAMED --add-opens=java.base/sun.nio.ch=ALL-UNNAMED --add-opens=java.management/com.sun.jmx.mbeanserver=ALL-UNNAMED --add-opens=java.base/sun.reflect.generics.reflectiveObjects=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.base/java.nio=ALL-UNNAMED --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang=ALL-UNNAMED")
}
