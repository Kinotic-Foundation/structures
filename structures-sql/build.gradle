plugins {
	id 'org.kinotic.java-library-conventions'
//	id 'antlr'
}

ext {

}

dependencies {
//	antlr "org.antlr:antlr4:${antlrVersion}"

	implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-json'
	implementation 'org.springframework.boot:spring-boot-autoconfigure'


	implementation 'com.fasterxml.jackson.core:jackson-annotations'
	implementation 'com.fasterxml.jackson.core:jackson-core'
	implementation 'com.fasterxml.jackson.core:jackson-databind'

	implementation "com.github.ben-manes.caffeine:caffeine:${caffeineVersion}"

	implementation "org.antlr:antlr4-runtime:${antlrVersion}"

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
	testImplementation "org.testcontainers:elasticsearch:${testContainersVersion}"
	testImplementation 'io.projectreactor:reactor-test'
}

//generateGrammarSource {
//	maxHeapSize = '1024m'
//	arguments += ['-package', 'org.kinotic.structures.sql.antlr', '-visitor', '-long-messages']
//	outputDirectory = file("${projectDir}/src/main/java/org/kinotic/structures/sql/antlr")
//}
//compileJava.dependsOn generateGrammarSource
//
//sourceSets {
//	main {
//		antlr {
//			srcDirs += file('src/main/resources/antlr')
//		}
//	}
//}



test {
	useJUnitPlatform()
}
