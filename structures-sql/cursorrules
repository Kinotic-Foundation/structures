# Structures SQL Library

## Overview
SQL parsing and processing library that provides a custom SQL dialect for Elasticsearch operations, including migrations, table creation, and data manipulation. This library is consumed by `structures-core` and other applications to provide SQL-based Elasticsearch operations.

## Library Purpose
- **SQL Parser**: ANTLR4-based parser for custom SQL dialect
- **Migration Engine**: Automatic migration execution for Elasticsearch
- **Statement Executors**: Convert SQL to Elasticsearch operations
- **Type Mapping**: SQL types to Elasticsearch field types
- **Query Building**: Dynamic query construction for Elasticsearch

## Library Architecture
- **Parser Layer**: ANTLR4 grammar and generated parser classes
- **Domain Layer**: SQL statement and migration domain objects
- **Executor Layer**: Statement execution and Elasticsearch integration
- **Migration Layer**: System migration loading and execution

## Library Integration Points

### Spring Boot Integration
```java
// Used by structures-core for migration execution
@Component
public class SystemMigrator implements ApplicationListener<ContextRefreshedEvent> {
    private final MigrationExecutor migrationExecutor;
    private final MigrationParser migrationParser;
}
```

### Migration System Integration
```java
// Migration interface for custom implementations
public interface Migration {
    String getVersion();
    String getDescription();
    CompletableFuture<Void> execute(ElasticsearchClient client);
}
```

### SQL Parser Integration
```java
// Parser usage in applications
MigrationParser parser = new MigrationParser();
List<Statement> statements = parser.parse(sqlContent);
```

## Development Patterns
1. **ANTLR4 Grammar**: Modify `StructuresSQL.g4` for grammar changes
2. **Parser Implementation**: Follow visitor pattern in parser classes
3. **Statement Execution**: Use executor pattern for different statement types
4. **Migration System**: Implement `Migration` interface for custom migrations
5. **Type Mapping**: Extend `TypeMapper` for new SQL types

## Key Files and Directories

### Grammar Definition
- `src/main/antlr/StructuresSQL.g4`: ANTLR4 grammar definition

### Core Library Components
- `src/main/java/org/kinotic/structures/sql/SystemMigrator.java`: Migration orchestrator
- `src/main/java/org/kinotic/structures/sql/executor/MigrationExecutor.java`: Migration execution
- `src/main/java/org/kinotic/structures/sql/parsers/MigrationParser.java`: SQL parsing
- `src/main/java/org/kinotic/structures/sql/domain/`: Domain objects

### Parser Implementation
- `src/main/java/org/kinotic/structures/sql/parsers/`: Statement parsers
  - `CreateTableStatementParser.java`: Table creation parsing
  - `ReindexStatementParser.java`: Reindex operation parsing
  - `UpdateStatementParser.java`: Update operation parsing
  - `DeleteStatementParser.java`: Delete operation parsing
  - `InsertStatementParser.java`: Insert operation parsing

### Executor Implementation
- `src/main/java/org/kinotic/structures/sql/executor/`: Statement executors
  - `executors/`: Specific statement executors
  - `TypeMapper.java`: SQL to Elasticsearch type mapping
  - `QueryBuilder.java`: Dynamic query construction

## SQL Dialect Features

### Data Definition Language (DDL)
- **CREATE TABLE**: Elasticsearch index creation
- **CREATE COMPONENT TEMPLATE**: Component template creation
- **CREATE INDEX TEMPLATE**: Index template creation
- **ALTER TABLE**: Schema modifications

### Data Manipulation Language (DML)
- **REINDEX**: Index reindexing operations
- **UPDATE**: Data updates with WHERE clauses
- **DELETE**: Data deletion with WHERE clauses
- **INSERT**: Data insertion with VALUES

### Query Features
- **WHERE Clauses**: Conditional filtering
- **Expressions**: Mathematical and logical operations
- **Parameters**: Parameterized queries
- **Scripts**: Custom Elasticsearch scripts

## Library Usage Examples

### Basic Migration Usage
```java
// In structures-core SystemMigrator
PathMatchingResourcePatternResolver resolver = new PathMatchingResourcePatternResolver(resourceLoader);
Resource[] resources = resolver.getResources("classpath:migrations/*.sql");

List<Migration> migrations = new ArrayList<>();
for (Resource resource : resources) {
    migrations.add(new ResourceMigration(resource, migrationParser));
}
migrationExecutor.executeSystemMigrations(migrations).get();
```

### Custom Migration Implementation
```java
public class CustomMigration implements Migration {
    @Override
    public String getVersion() {
        return "V2__custom_migration";
    }
    
    @Override
    public String getDescription() {
        return "Custom migration description";
    }
    
    @Override
    public CompletableFuture<Void> execute(ElasticsearchClient client) {
        // Custom migration logic
        return CompletableFuture.completedFuture(null);
    }
}
```

### SQL Parser Usage
```java
MigrationParser parser = new MigrationParser();
String sqlContent = "CREATE TABLE my_index (field1 TEXT, field2 KEYWORD);";
List<Statement> statements = parser.parse(sqlContent);
```

## Dependencies
- **ANTLR4**: Parser generation and runtime
- **Spring Boot**: Dependency injection and configuration
- **Elasticsearch Java Client**: Elasticsearch operations
- **Jackson**: JSON processing
- **Lombok**: Code generation

## Testing Strategy
- **Unit Tests**: Test individual parsers and executors
- **Integration Tests**: Test with TestContainers Elasticsearch
- **Grammar Tests**: Test ANTLR4 grammar rules
- **Migration Tests**: Test migration execution

## Migration System
- **System Migrations**: Automatically loaded from `classpath:migrations/*.sql`
- **Resource Migration**: File-based migration loading
- **Execution Order**: Migrations executed during application startup
- **Error Handling**: Comprehensive error reporting and rollback

## Elasticsearch Integration
- **Index Management**: Create, alter, and manage indices
- **Template Management**: Component and index templates
- **Data Operations**: CRUD operations with Elasticsearch
- **Reindexing**: Bulk data migration and transformation
- **Type Mapping**: SQL types to Elasticsearch field types

## Grammar Development
- **ANTLR4 Grammar**: Extend `StructuresSQL.g4` for new SQL features
- **Visitor Pattern**: Implement visitors for AST traversal
- **Error Recovery**: Robust error handling in parser
- **Code Generation**: ANTLR4 generates parser classes automatically

## Configuration
- **Migration Path**: Configurable migration file location
- **Elasticsearch Client**: Spring Boot auto-configuration
- **Parser Options**: ANTLR4 generation options
- **Type Mapping**: Customizable SQL to Elasticsearch type mapping

## Best Practices for Library Development
- **Grammar Changes**: Test thoroughly with various SQL inputs
- **Migration Safety**: Always test migrations in development first
- **Error Handling**: Provide clear error messages for SQL syntax errors
- **Performance**: Optimize for large migration files
- **Documentation**: Document new SQL features and syntax
- **API Stability**: Maintain backward compatibility for parser interfaces
- **Testing**: Comprehensive unit and integration tests 