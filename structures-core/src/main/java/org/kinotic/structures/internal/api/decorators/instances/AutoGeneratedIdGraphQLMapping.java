package org.kinotic.structures.internal.api.decorators.instances;

import graphql.Scalars;
import graphql.language.StringValue;
import graphql.schema.GraphQLAppliedDirective;
import graphql.schema.GraphQLNonNull;
import org.kinotic.continuum.idl.api.schema.C3Type;
import org.kinotic.continuum.idl.api.schema.StringC3Type;
import org.kinotic.structures.api.decorators.AutoGeneratedIdDecorator;
import org.kinotic.structures.api.decorators.runtime.mapping.GraphQLMappingPreProcessor;
import org.kinotic.structures.api.decorators.runtime.mapping.GraphQLTypeHolder;
import org.kinotic.structures.api.decorators.runtime.mapping.MappingContext;
import org.kinotic.structures.api.domain.Structure;
import org.kinotic.structures.internal.idl.converters.graphql.GraphQLConversionState;
import org.springframework.stereotype.Component;

import static graphql.Scalars.GraphQLString;

/**
 * Created by NavÃ­d Mitchell ðŸ¤ªon 6/24/23.
 */
@Component
public class AutoGeneratedIdGraphQLMapping implements GraphQLMappingPreProcessor<AutoGeneratedIdDecorator> {
    @Override
    public Class<AutoGeneratedIdDecorator> implementsDecorator() {
        return AutoGeneratedIdDecorator.class;
    }

    @Override
    public boolean supportC3Type(C3Type c3Type) {
        return c3Type instanceof StringC3Type;
    }

    @Override
    public GraphQLTypeHolder process(Structure structure,
                                     String fieldName,
                                     AutoGeneratedIdDecorator decorator,
                                     C3Type type,
                                     MappingContext<GraphQLTypeHolder, GraphQLConversionState> context) {

        // TODO: Only do this if federation is enabled
        GraphQLAppliedDirective directive = GraphQLAppliedDirective.newDirective()
                                                                   .name("key")
                                                                   .argument(builder -> builder.name("fields")
                                                                                               .type(GraphQLString)
                                                                                               .valueLiteral(StringValue.of(fieldName)))
                                                                   .build();

        context.state().getOutputTypeDirectives().add(directive);

        return new GraphQLTypeHolder(Scalars.GraphQLID, GraphQLNonNull.nonNull(Scalars.GraphQLID));
    }
}
