import { EntityService, type IEntitiesService } from '@kinotic/structures-api'
import { DashboardWidget } from '../../domain/DashboardWidget.js'


/**
 * Base Service for interacting with DashboardWidget entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BaseDashboardWidgetEntityService extends EntityService<DashboardWidget> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('structures__system', 'DashboardWidget', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: DashboardWidget): Promise<DashboardWidget> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: DashboardWidget[]): Promise<DashboardWidget[]> {
    if (this.shouldValidate) {
      const validatedEntities: DashboardWidget[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: DashboardWidget): DashboardWidget {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.dashboardId = entity.dashboardId
      ret.widgetId = entity.widgetId
      ret.x = entity.x
      ret.y = entity.y
      ret.w = entity.w
      ret.h = entity.h
      ret.minW = entity.minW
      ret.minH = entity.minH
      ret.maxW = entity.maxW
      ret.maxH = entity.maxH
      ret.locked = entity.locked
      ret.noResize = entity.noResize
      ret.noMove = entity.noMove
      ret.static_ = entity.static_
      ret.created = entity.created
      ret.updated = entity.updated
    }

    return ret
  }

}
