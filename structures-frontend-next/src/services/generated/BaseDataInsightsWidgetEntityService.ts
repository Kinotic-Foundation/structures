import { EntityService, type IEntitiesService } from '@kinotic/structures-api'
import { DataInsightsWidget } from '../../domain/DataInsightsWidget.js'


/**
 * Base Service for interacting with DataInsightsWidget entities
 * This class was generated by the Structures CLI. And will be overwritten if the CLI is run again.
 */
export class BaseDataInsightsWidgetEntityService extends EntityService<DataInsightsWidget> {

  private readonly shouldValidate: boolean

  constructor(shouldValidate: boolean = true, entitiesService?: IEntitiesService) {
    super('structures__system', 'DataInsightsWidget', entitiesService)
    this.shouldValidate = shouldValidate
  }

  protected async beforeSaveOrUpdate(entity: DataInsightsWidget): Promise<DataInsightsWidget> {
    if (this.shouldValidate) {
      return this.validate(entity)
    } else {
      return entity
    }
  }

  protected async beforeBulkSaveOrUpdate(entities: DataInsightsWidget[]): Promise<DataInsightsWidget[]> {
    if (this.shouldValidate) {
      const validatedEntities: DataInsightsWidget[] = []
      for (let entity of entities) {
        validatedEntities.push(this.validate(entity))
      }
      return validatedEntities
    } else {
      return entities
    }
  }

  validate(entity: DataInsightsWidget): DataInsightsWidget {
    let ret: any
    if (entity) {
      ret = (ret ? ret : {})
      ret.id = entity.id
      ret.applicationId = entity.applicationId
      ret.name = entity.name
      ret.description = entity.description
      ret.src = entity.src
      ret.created = entity.created
      ret.updated = entity.updated
    }

    return ret
  }

}
