import{_ as i,c as t,a1 as o,o as a}from"./chunks/framework.Xy-u92ix.js";const p=JSON.parse('{"title":"PolicyAuthorizationService","description":"","frontmatter":{},"headers":[],"relativePath":"reference/graphos/policy-authorization-service.md","filePath":"reference/graphos/policy-authorization-service.md"}'),r={name:"reference/graphos/policy-authorization-service.md"};function l(n,e,s,c,d,h){return a(),t("div",null,e[0]||(e[0]=[o('<h1 id="policyauthorizationservice" tabindex="-1">PolicyAuthorizationService <a class="header-anchor" href="#policyauthorizationservice" aria-label="Permalink to &quot;PolicyAuthorizationService&quot;">​</a></h1><p>The <code>PolicyAuthorizationService</code> is the central class in Structures for managing and enforcing policies at runtime. It integrates GraphOS-style policy management with Structures&#39; data modeling capabilities, ensuring that policies defined in your models are enforced seamlessly across operations, entities, and fields.</p><h2 id="key-responsibilities" tabindex="-1">Key Responsibilities <a class="header-anchor" href="#key-responsibilities" aria-label="Permalink to &quot;Key Responsibilities&quot;">​</a></h2><ol><li><strong>Policy Enforcement</strong>: Ensures that only authorized operations, entities, and fields can be accessed.</li><li><strong>Operation-Level Policies</strong>: Evaluates policies applied to specific operations, such as <code>SAVE</code>, <code>READ</code>, or <code>DELETE</code>.</li><li><strong>Entity-Level Policies</strong>: Determines whether access to an entire entity (structure) is allowed.</li><li><strong>Field-Level Policies</strong>: Checks individual field access based on the policies defined in the model.</li></ol><h2 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h2><h3 id="initialization" tabindex="-1">Initialization <a class="header-anchor" href="#initialization" aria-label="Permalink to &quot;Initialization&quot;">​</a></h3><p>The <code>PolicyAuthorizationService</code> is initialized with:</p><ul><li>A <code>Structure</code> object that defines the entity, its fields, and their respective policies.</li><li>A <code>PolicyAuthorizer</code> implementation responsible for evaluating individual policy requests.</li></ul><p>During initialization:</p><ul><li><strong>Entity-Level Policies</strong>: Extracted from the <code>PolicyDecorator</code> applied to the entity.</li><li><strong>Field-Level Policies</strong>: Extracted from the <code>PolicyDecorator</code> applied to individual fields.</li><li><strong>Operation-Level Policies</strong>: Extracted from the <code>EntityServiceDecoratorsConfig</code> mapped to specific <code>EntityOperation</code> values.</li></ul><h3 id="runtime-authorization" tabindex="-1">Runtime Authorization <a class="header-anchor" href="#runtime-authorization" aria-label="Permalink to &quot;Runtime Authorization&quot;">​</a></h3><p>The <code>authorize</code> method evaluates policies for a requested operation:</p><ol><li><strong>Operation Evaluation</strong>: Checks if the requested operation is allowed based on its policies.</li><li><strong>Entity Evaluation</strong>: Ensures access to the entire entity is permitted.</li><li><strong>Field Evaluation</strong>: Verifies each field’s policies, accumulating any denied fields.</li><li><strong>Outcome</strong>: <ul><li>If all evaluations succeed, the operation proceeds.</li><li>If any evaluation fails, an appropriate <code>AuthorizationException</code> is thrown.</li></ul></li></ol><h3 id="example-flow" tabindex="-1">Example Flow <a class="header-anchor" href="#example-flow" aria-label="Permalink to &quot;Example Flow&quot;">​</a></h3><ol><li>A client requests to perform an operation (e.g., <code>READ</code>).</li><li>The <code>authorize</code> method maps the operation name to an <code>EntityOperation</code> and retrieves the corresponding evaluator.</li><li>The evaluator checks the policies sequentially: <ul><li>Operation policies.</li><li>Entity policies.</li><li>Field policies.</li></ul></li><li>If any policy fails, the request is denied with detailed feedback about the failure.</li></ol><h2 id="integration-with-graphos" tabindex="-1">Integration with GraphOS <a class="header-anchor" href="#integration-with-graphos" aria-label="Permalink to &quot;Integration with GraphOS&quot;">​</a></h2><p>The <code>PolicyAuthorizationService</code> directly supports the new GraphOS <code>@policy</code> directive by ensuring:</p><ul><li><strong>1-to-1 Mapping</strong>: Policies defined in Structures are automatically translated to GraphOS-compatible schema directives.</li><li><strong>Runtime Enforcement</strong>: Policies are enforced at runtime, ensuring consistent behavior with your GraphQL API.</li></ul><h2 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h2><ul><li><strong>Centralized Management</strong>: Unified handling of operation, entity, and field-level policies.</li><li><strong>GraphOS Compatibility</strong>: Seamless integration with GraphOS-style <code>@policy</code> directives for federated GraphQL APIs.</li><li><strong>Granular Control</strong>: Fine-grained access control for operations, entities, and fields.</li></ul><h2 id="related-links" tabindex="-1">Related Links <a class="header-anchor" href="#related-links" aria-label="Permalink to &quot;Related Links&quot;">​</a></h2><ul><li>Learn about the <a href="./policy-authorizer.html">PolicyAuthorizer</a> used for evaluating individual policies.</li><li>Explore how to define <a href="./../../guide/graphos/policy-decorators.html">PolicyDecorators</a> in your Structures models.</li><li>Understand the <a href="./../../guide/graphos/policy-evaluation-flow.html">Policy Evaluation Flow</a> for runtime authorization.</li></ul>',22)]))}const f=i(r,[["render",l]]);export{p as __pageData,f as default};
