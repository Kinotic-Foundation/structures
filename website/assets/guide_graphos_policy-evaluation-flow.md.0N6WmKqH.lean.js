import{_ as i,c as o,a1 as t,o as l}from"./chunks/framework.Xy-u92ix.js";const p=JSON.parse('{"title":"Policy Evaluation Flow","description":"","frontmatter":{},"headers":[],"relativePath":"guide/graphos/policy-evaluation-flow.md","filePath":"guide/graphos/policy-evaluation-flow.md"}'),a={name:"guide/graphos/policy-evaluation-flow.md"};function r(n,e,c,s,d,u){return l(),o("div",null,e[0]||(e[0]=[t('<h1 id="policy-evaluation-flow" tabindex="-1">Policy Evaluation Flow <a class="header-anchor" href="#policy-evaluation-flow" aria-label="Permalink to &quot;Policy Evaluation Flow&quot;">​</a></h1><p>The policy evaluation flow in Structures ensures that policies defined at the operation, entity, and field levels are correctly processed and enforced during runtime. This flow integrates seamlessly with the <code>PolicyAuthorizationService</code>, ensuring that only authorized actions are performed.</p><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The policy evaluation flow follows these key steps:</p><ol><li><p><strong>Policy Collection</strong>:</p><ul><li>Collect all relevant policies from the operation, entity, and field levels.</li><li>Deduplicate the policies to create a unique set of <code>PolicyAuthorizationRequest</code> objects.</li></ul></li><li><p><strong>Policy Evaluation</strong>:</p><ul><li>Pass the collected policies to the <code>PolicyAuthorizer</code> for evaluation.</li><li>The <code>PolicyAuthorizer</code> processes each <code>PolicyAuthorizationRequest</code>, marking it as either authorized or denied.</li></ul></li></ol><ol start="3"><li><p><strong>Result Aggregation</strong>:</p><ul><li>Aggregate the evaluation results to determine: <ul><li>If the operation is allowed.</li><li>If access to the entity is permitted.</li><li>Which fields (if any) are denied.</li></ul></li></ul></li><li><p><strong>Outcome Determination</strong>:</p><ul><li>If the operation or entity-level policies fail, the entire request is denied.</li><li>If field-level policies fail, those fields are excluded from the result.</li></ul></li></ol><h2 id="detailed-steps" tabindex="-1">Detailed Steps <a class="header-anchor" href="#detailed-steps" aria-label="Permalink to &quot;Detailed Steps&quot;">​</a></h2><h3 id="step-1-policy-collection" tabindex="-1">Step 1: Policy Collection <a class="header-anchor" href="#step-1-policy-collection" aria-label="Permalink to &quot;Step 1: Policy Collection&quot;">​</a></h3><ul><li>The <code>PolicyEvaluator</code> gathers all relevant policies: <ul><li><strong>Operation Policies</strong>: Extracted from the operation being performed.</li><li><strong>Entity Policies</strong>: Retrieved from the entity&#39;s <code>PolicyDecorator</code>.</li><li><strong>Field Policies</strong>: Collected from the <code>PolicyDecorator</code> of each field in the entity.</li></ul></li></ul><h3 id="step-2-policy-evaluation" tabindex="-1">Step 2: Policy Evaluation <a class="header-anchor" href="#step-2-policy-evaluation" aria-label="Permalink to &quot;Step 2: Policy Evaluation&quot;">​</a></h3><ul><li>The unique set of policies is passed to the <code>PolicyAuthorizer</code>.</li><li>Each policy is evaluated in the context of the provided <code>SecurityContext</code>. <ul><li>The <code>authorize()</code> or <code>deny()</code> methods are called on the <code>PolicyAuthorizationRequest</code> objects based on the evaluation.</li></ul></li></ul><h3 id="step-3-result-aggregation" tabindex="-1">Step 3: Result Aggregation <a class="header-anchor" href="#step-3-result-aggregation" aria-label="Permalink to &quot;Step 3: Result Aggregation&quot;">​</a></h3><ul><li>The results of the evaluation are aggregated: <ul><li><strong>Operation-Level Policies</strong>: Determines if the operation can proceed.</li><li><strong>Entity-Level Policies</strong>: Ensures access to the entire entity is allowed.</li><li><strong>Field-Level Policies</strong>: Identifies any fields that should be excluded from the response.</li></ul></li></ul><h3 id="step-4-outcome-determination" tabindex="-1">Step 4: Outcome Determination <a class="header-anchor" href="#step-4-outcome-determination" aria-label="Permalink to &quot;Step 4: Outcome Determination&quot;">​</a></h3><ul><li>If any operation or entity-level policy is denied: <ul><li>The entire request is rejected with an <code>AuthorizationException</code>.</li></ul></li><li>If field-level policies fail: <ul><li>The denied fields are excluded from the response, while the rest of the request proceeds.</li></ul></li></ul><h2 id="integration-with-policyauthorizationservice" tabindex="-1">Integration with <code>PolicyAuthorizationService</code> <a class="header-anchor" href="#integration-with-policyauthorizationservice" aria-label="Permalink to &quot;Integration with `PolicyAuthorizationService`&quot;">​</a></h2><p>The <code>PolicyAuthorizationService</code> orchestrates the evaluation flow by:</p><ul><li>Mapping operation names to <code>EntityOperation</code> values.</li><li>Using <code>PolicyEvaluator</code> to collect and evaluate policies.</li><li>Determining the final outcome based on the evaluation results.</li></ul><h2 id="related-links" tabindex="-1">Related Links <a class="header-anchor" href="#related-links" aria-label="Permalink to &quot;Related Links&quot;">​</a></h2><ul><li>Learn about the <a href="./../../reference/graphos/policy-authorization-service.html">PolicyAuthorizationService</a> and its role in orchestrating policy evaluation.</li><li>Explore how to define and use <a href="./policy-decorators.html">Policy Decorators</a> in your models.</li><li>Review the <a href="./../../reference/graphos/policy-authorizer.html">PolicyAuthorizer</a> and its role in evaluating individual policies.</li></ul>',20)]))}const f=i(a,[["render",r]]);export{p as __pageData,f as default};
