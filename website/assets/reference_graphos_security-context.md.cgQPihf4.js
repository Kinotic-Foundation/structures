import{_ as t,c as i,a1 as o,o as a}from"./chunks/framework.EXotbVbK.js";const p=JSON.parse('{"title":"SecurityContext","description":"","frontmatter":{},"headers":[],"relativePath":"reference/graphos/security-context.md","filePath":"reference/graphos/security-context.md"}'),r={name:"reference/graphos/security-context.md"};function s(n,e,l,c,u,d){return a(),i("div",null,e[0]||(e[0]=[o('<h1 id="securitycontext" tabindex="-1">SecurityContext <a class="header-anchor" href="#securitycontext" aria-label="Permalink to &quot;SecurityContext&quot;">​</a></h1><p>The <code>SecurityContext</code> provides contextual information about the user or system making a request. It is a critical component in the policy evaluation flow, enabling the <code>PolicyAuthorizer</code> to evaluate policies based on the user&#39;s identity, roles, permissions, or other security attributes.</p><h2 id="purpose" tabindex="-1">Purpose <a class="header-anchor" href="#purpose" aria-label="Permalink to &quot;Purpose&quot;">​</a></h2><ul><li><strong>Authorization Context</strong>: Supplies data required to determine whether a policy should be authorized or denied.</li><li><strong>Flexibility</strong>: Allows integration with custom security frameworks or identity providers.</li><li><strong>Consistency</strong>: Ensures that authorization decisions are based on a standard structure for user and request data.</li></ul><h2 id="key-responsibilities" tabindex="-1">Key Responsibilities <a class="header-anchor" href="#key-responsibilities" aria-label="Permalink to &quot;Key Responsibilities&quot;">​</a></h2><ol><li><strong>Identity Information</strong>: Provides details about the authenticated user or system identity.</li><li><strong>Role and Permission Management</strong>: Includes roles, permissions, or claims associated with the user.</li><li><strong>Dynamic Attributes</strong>: Supports additional metadata required for contextual policy evaluation, such as request time or IP address.</li></ol><h2 id="integration-with-policy-evaluation" tabindex="-1">Integration with Policy Evaluation <a class="header-anchor" href="#integration-with-policy-evaluation" aria-label="Permalink to &quot;Integration with Policy Evaluation&quot;">​</a></h2><p>The <code>SecurityContext</code> is passed to the <code>PolicyAuthorizer</code> during policy evaluation. The <code>PolicyAuthorizer</code> uses this context to:</p><ol><li>Validate whether the user meets the requirements specified in the <code>PolicyAuthorizationRequest</code>.</li><li>Apply dynamic checks based on user attributes or environmental variables.</li><li>Enforce policies consistently across operations, entities, and fields.</li></ol><p>*** Example Here: Passing SecurityContext to PolicyAuthorizer ***</p><h2 id="example-use-cases" tabindex="-1">Example Use Cases <a class="header-anchor" href="#example-use-cases" aria-label="Permalink to &quot;Example Use Cases&quot;">​</a></h2><ol><li><p><strong>Role-Based Authorization</strong>:</p><ul><li>Policies requiring a specific role (e.g., &quot;admin&quot;) are checked against the roles in the <code>SecurityContext</code>.</li></ul></li><li><p><strong>Attribute-Based Authorization</strong>:</p><ul><li>Policies that depend on request parameters, such as time of access, can be validated using additional attributes in the context.</li></ul></li><li><p><strong>Tenant-Specific Policies</strong>:</p><ul><li>Multi-tenant applications can enforce policies based on tenant ID stored in the <code>SecurityContext</code>.</li></ul></li></ol><p>*** Example Here: Attribute-Based Authorization with SecurityContext ***</p><h2 id="benefits" tabindex="-1">Benefits <a class="header-anchor" href="#benefits" aria-label="Permalink to &quot;Benefits&quot;">​</a></h2><ul><li><strong>Standardized Input</strong>: Provides a unified format for passing security data into the policy evaluation process.</li><li><strong>Flexible Extensions</strong>: Can be extended to include custom attributes required for complex authorization logic.</li><li><strong>Reusable Design</strong>: Works with various authentication mechanisms, making it adaptable to different environments.</li></ul><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li>Learn how the <a href="./policy-authorizer.html">PolicyAuthorizer</a> uses the <code>SecurityContext</code> during policy evaluation.</li><li>Explore the <a href="./policy-authorization-service.html">PolicyAuthorizationService</a> for runtime enforcement of policies.</li><li>Review the <a href="./../../guide/graphos/policy-evaluation-flow.html">Policy Evaluation Flow</a> to understand the full process of policy validation.</li></ul>',17)]))}const m=t(r,[["render",s]]);export{p as __pageData,m as default};
